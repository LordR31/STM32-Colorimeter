
Proiect_SDTR_Colorimetru_HC-05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000968c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  0800985c  0800985c  0000a85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a64  08009a64  0000b060  2**0
                  CONTENTS
  4 .ARM          00000008  08009a64  08009a64  0000aa64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a6c  08009a6c  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a6c  08009a6c  0000aa6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a70  08009a70  0000aa70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08009a74  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cb8  20000060  08009ad4  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d18  08009ad4  0000bd18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cbae  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bce  00000000  00000000  00027c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001860  00000000  00000000  0002b810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001320  00000000  00000000  0002d070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004465  00000000  00000000  0002e390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cfb6  00000000  00000000  000327f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dee88  00000000  00000000  0004f7ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e633  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d40  00000000  00000000  0012e678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  001353b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009844 	.word	0x08009844

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08009844 	.word	0x08009844

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <tcs34725_i2c_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// TCS34725 Colour Sensor

void tcs34725_i2c_write(uint8_t reg, uint32_t value) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	4603      	mov	r3, r0
 80005b8:	6039      	str	r1, [r7, #0]
 80005ba:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[2];
    buffer[0] = COMMAND_BIT | reg;
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	733b      	strb	r3, [r7, #12]
    buffer[1] = value & 0xFF;
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, (ADDRESS << 1), buffer, 2, HAL_MAX_DELAY);
 80005cc:	f107 020c 	add.w	r2, r7, #12
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2302      	movs	r3, #2
 80005d8:	2152      	movs	r1, #82	@ 0x52
 80005da:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <tcs34725_i2c_write+0x38>)
 80005dc:	f002 f99c 	bl	8002918 <HAL_I2C_Master_Transmit>
}
 80005e0:	bf00      	nop
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	2000007c 	.word	0x2000007c

080005ec <tcs34725_i2c_read8>:

// Read a single register
uint8_t tcs34725_i2c_read8(uint8_t reg) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af02      	add	r7, sp, #8
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[2];

	buffer[0] = (COMMAND_BIT | reg);
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(&hi2c1, (ADDRESS << 1), buffer, 1, HAL_MAX_DELAY);
 8000600:	f107 020c 	add.w	r2, r7, #12
 8000604:	f04f 33ff 	mov.w	r3, #4294967295
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2301      	movs	r3, #1
 800060c:	2152      	movs	r1, #82	@ 0x52
 800060e:	4809      	ldr	r0, [pc, #36]	@ (8000634 <tcs34725_i2c_read8+0x48>)
 8000610:	f002 f982 	bl	8002918 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (ADDRESS << 1), buffer, 1, HAL_MAX_DELAY);
 8000614:	f107 020c 	add.w	r2, r7, #12
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2301      	movs	r3, #1
 8000620:	2152      	movs	r1, #82	@ 0x52
 8000622:	4804      	ldr	r0, [pc, #16]	@ (8000634 <tcs34725_i2c_read8+0x48>)
 8000624:	f002 fa76 	bl	8002b14 <HAL_I2C_Master_Receive>

	return buffer[0];
 8000628:	7b3b      	ldrb	r3, [r7, #12]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	2000007c 	.word	0x2000007c

08000638 <tcs34725_i2c_read16>:

uint16_t tcs34725_i2c_read16(uint8_t reg) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af02      	add	r7, sp, #8
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
	uint16_t time_delay = 1;
 8000642:	2301      	movs	r3, #1
 8000644:	82fb      	strh	r3, [r7, #22]
    uint16_t value;
    uint8_t reg_value[2];
    uint8_t cmd[2];
    cmd[0] = COMMAND_BIT | reg;
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800064c:	b2db      	uxtb	r3, r3
 800064e:	733b      	strb	r3, [r7, #12]

    HAL_I2C_Master_Transmit(&hi2c1, (ADDRESS << 1), cmd, 1, time_delay);
 8000650:	8afb      	ldrh	r3, [r7, #22]
 8000652:	f107 020c 	add.w	r2, r7, #12
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2301      	movs	r3, #1
 800065a:	2152      	movs	r1, #82	@ 0x52
 800065c:	480d      	ldr	r0, [pc, #52]	@ (8000694 <tcs34725_i2c_read16+0x5c>)
 800065e:	f002 f95b 	bl	8002918 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, (ADDRESS << 1), reg_value, 2, time_delay);
 8000662:	8afb      	ldrh	r3, [r7, #22]
 8000664:	f107 0210 	add.w	r2, r7, #16
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2302      	movs	r3, #2
 800066c:	2152      	movs	r1, #82	@ 0x52
 800066e:	4809      	ldr	r0, [pc, #36]	@ (8000694 <tcs34725_i2c_read16+0x5c>)
 8000670:	f002 fa50 	bl	8002b14 <HAL_I2C_Master_Receive>

    value = reg_value[0];
 8000674:	7c3b      	ldrb	r3, [r7, #16]
 8000676:	82bb      	strh	r3, [r7, #20]
    value <<= 8;
 8000678:	8abb      	ldrh	r3, [r7, #20]
 800067a:	021b      	lsls	r3, r3, #8
 800067c:	82bb      	strh	r3, [r7, #20]
    value |= reg_value[1];
 800067e:	7c7b      	ldrb	r3, [r7, #17]
 8000680:	461a      	mov	r2, r3
 8000682:	8abb      	ldrh	r3, [r7, #20]
 8000684:	4313      	orrs	r3, r2
 8000686:	82bb      	strh	r3, [r7, #20]

    return value;
 8000688:	8abb      	ldrh	r3, [r7, #20]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3718      	adds	r7, #24
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	2000007c 	.word	0x2000007c

08000698 <tcs34725_init_sensor>:

void tcs34725_init_sensor(){
 8000698:	b5b0      	push	{r4, r5, r7, lr}
 800069a:	b092      	sub	sp, #72	@ 0x48
 800069c:	af00      	add	r7, sp, #0
	tcs34725_i2c_write(ENABLE, ENABLE_PON);					// Power
 800069e:	2101      	movs	r1, #1
 80006a0:	2000      	movs	r0, #0
 80006a2:	f7ff ff85 	bl	80005b0 <tcs34725_i2c_write>
	HAL_Delay(3);
 80006a6:	2003      	movs	r0, #3
 80006a8:	f001 f9c2 	bl	8001a30 <HAL_Delay>

	tcs34725_i2c_write(ATIME, ITIME);						// Integration time
 80006ac:	2100      	movs	r1, #0
 80006ae:	2001      	movs	r0, #1
 80006b0:	f7ff ff7e 	bl	80005b0 <tcs34725_i2c_write>
	tcs34725_i2c_write(CONTROL, GAIN);						// Gain
 80006b4:	2100      	movs	r1, #0
 80006b6:	200f      	movs	r0, #15
 80006b8:	f7ff ff7a 	bl	80005b0 <tcs34725_i2c_write>


	uint8_t reg_value = tcs34725_i2c_read8(ATIME);
 80006bc:	2001      	movs	r0, #1
 80006be:	f7ff ff95 	bl	80005ec <tcs34725_i2c_read8>
 80006c2:	4603      	mov	r3, r0
 80006c4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	char reg_str[5];
	sprintf(reg_str, "%d", reg_value);
 80006c8:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80006cc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006d0:	491a      	ldr	r1, [pc, #104]	@ (800073c <tcs34725_init_sensor+0xa4>)
 80006d2:	4618      	mov	r0, r3
 80006d4:	f008 fc5e 	bl	8008f94 <siprintf>

	char temp_msg[64];
	strcpy(temp_msg, "Sensor Integration Time: ");
 80006d8:	463b      	mov	r3, r7
 80006da:	4a19      	ldr	r2, [pc, #100]	@ (8000740 <tcs34725_init_sensor+0xa8>)
 80006dc:	461c      	mov	r4, r3
 80006de:	4615      	mov	r5, r2
 80006e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e8:	c403      	stmia	r4!, {r0, r1}
 80006ea:	8022      	strh	r2, [r4, #0]
	strcat(temp_msg, reg_str);
 80006ec:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80006f0:	463b      	mov	r3, r7
 80006f2:	4611      	mov	r1, r2
 80006f4:	4618      	mov	r0, r3
 80006f6:	f008 fc75 	bl	8008fe4 <strcat>
	strcat(temp_msg, "\n");
 80006fa:	463b      	mov	r3, r7
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff fd87 	bl	8000210 <strlen>
 8000702:	4603      	mov	r3, r0
 8000704:	461a      	mov	r2, r3
 8000706:	463b      	mov	r3, r7
 8000708:	4413      	add	r3, r2
 800070a:	490e      	ldr	r1, [pc, #56]	@ (8000744 <tcs34725_init_sensor+0xac>)
 800070c:	461a      	mov	r2, r3
 800070e:	460b      	mov	r3, r1
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 8000714:	463b      	mov	r3, r7
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff fd7a 	bl	8000210 <strlen>
 800071c:	4603      	mov	r3, r0
 800071e:	b29a      	uxth	r2, r3
 8000720:	4639      	mov	r1, r7
 8000722:	f04f 33ff 	mov.w	r3, #4294967295
 8000726:	4808      	ldr	r0, [pc, #32]	@ (8000748 <tcs34725_init_sensor+0xb0>)
 8000728:	f004 f908 	bl	800493c <HAL_UART_Transmit>



	tcs34725_i2c_write(ENABLE, ENABLE_PON | ENABLE_AEN);    // ADC Enable
 800072c:	2103      	movs	r1, #3
 800072e:	2000      	movs	r0, #0
 8000730:	f7ff ff3e 	bl	80005b0 <tcs34725_i2c_write>

}
 8000734:	bf00      	nop
 8000736:	3748      	adds	r7, #72	@ 0x48
 8000738:	46bd      	mov	sp, r7
 800073a:	bdb0      	pop	{r4, r5, r7, pc}
 800073c:	080098a0 	.word	0x080098a0
 8000740:	080098a4 	.word	0x080098a4
 8000744:	080098c0 	.word	0x080098c0
 8000748:	200000d0 	.word	0x200000d0

0800074c <tcs34725_integration_wait_time>:

void tcs34725_integration_wait_time(int itime){
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	int wait_time = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
	switch(itime){
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2bff      	cmp	r3, #255	@ 0xff
 800075c:	d015      	beq.n	800078a <tcs34725_integration_wait_time+0x3e>
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2bff      	cmp	r3, #255	@ 0xff
 8000762:	dc22      	bgt.n	80007aa <tcs34725_integration_wait_time+0x5e>
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2bf6      	cmp	r3, #246	@ 0xf6
 8000768:	d012      	beq.n	8000790 <tcs34725_integration_wait_time+0x44>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2bf6      	cmp	r3, #246	@ 0xf6
 800076e:	dc1c      	bgt.n	80007aa <tcs34725_integration_wait_time+0x5e>
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2bd5      	cmp	r3, #213	@ 0xd5
 8000774:	d00f      	beq.n	8000796 <tcs34725_integration_wait_time+0x4a>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2bd5      	cmp	r3, #213	@ 0xd5
 800077a:	dc16      	bgt.n	80007aa <tcs34725_integration_wait_time+0x5e>
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d00f      	beq.n	80007a2 <tcs34725_integration_wait_time+0x56>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2bc0      	cmp	r3, #192	@ 0xc0
 8000786:	d009      	beq.n	800079c <tcs34725_integration_wait_time+0x50>
 8000788:	e00f      	b.n	80007aa <tcs34725_integration_wait_time+0x5e>
	case 255:
		wait_time = 3;
 800078a:	2303      	movs	r3, #3
 800078c:	60fb      	str	r3, [r7, #12]
		break;
 800078e:	e00c      	b.n	80007aa <tcs34725_integration_wait_time+0x5e>
	case 246:
		wait_time = 24;
 8000790:	2318      	movs	r3, #24
 8000792:	60fb      	str	r3, [r7, #12]
		break;
 8000794:	e009      	b.n	80007aa <tcs34725_integration_wait_time+0x5e>
	case 213:
		wait_time = 101;
 8000796:	2365      	movs	r3, #101	@ 0x65
 8000798:	60fb      	str	r3, [r7, #12]
		break;
 800079a:	e006      	b.n	80007aa <tcs34725_integration_wait_time+0x5e>
	case 192:
		wait_time = 154;
 800079c:	239a      	movs	r3, #154	@ 0x9a
 800079e:	60fb      	str	r3, [r7, #12]
		break;
 80007a0:	e003      	b.n	80007aa <tcs34725_integration_wait_time+0x5e>
	case 0:
		wait_time = 700;
 80007a2:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 80007a6:	60fb      	str	r3, [r7, #12]
		break;
 80007a8:	bf00      	nop
	}
	HAL_Delay(wait_time);
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 f93f 	bl	8001a30 <HAL_Delay>
}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <tcs34725_update_config_itime>:

void tcs34725_update_config_itime(int itime){
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
	tcs34725_i2c_write(ENABLE, ENABLE_PON);    // Pause Measuring
 80007c2:	2101      	movs	r1, #1
 80007c4:	2000      	movs	r0, #0
 80007c6:	f7ff fef3 	bl	80005b0 <tcs34725_i2c_write>
	tcs34725_i2c_write(ATIME, itime);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4619      	mov	r1, r3
 80007ce:	2001      	movs	r0, #1
 80007d0:	f7ff feee 	bl	80005b0 <tcs34725_i2c_write>
	tcs34725_i2c_write(ENABLE, ENABLE_PON | ENABLE_AEN);
 80007d4:	2103      	movs	r1, #3
 80007d6:	2000      	movs	r0, #0
 80007d8:	f7ff feea 	bl	80005b0 <tcs34725_i2c_write>
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <tcs34725_update_config_gain>:

void tcs34725_update_config_gain(int gain, int itime){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
	tcs34725_i2c_write(ENABLE, ENABLE_PON ); // Pause Measuring
 80007ee:	2101      	movs	r1, #1
 80007f0:	2000      	movs	r0, #0
 80007f2:	f7ff fedd 	bl	80005b0 <tcs34725_i2c_write>
	tcs34725_i2c_write(CONTROL, gain);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4619      	mov	r1, r3
 80007fa:	200f      	movs	r0, #15
 80007fc:	f7ff fed8 	bl	80005b0 <tcs34725_i2c_write>

	tcs34725_i2c_write(ENABLE, ENABLE_PON | ENABLE_AEN);    // ADC Enable
 8000800:	2103      	movs	r1, #3
 8000802:	2000      	movs	r0, #0
 8000804:	f7ff fed4 	bl	80005b0 <tcs34725_i2c_write>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <read_colour_data>:

void read_colour_data(uint16_t *r, uint16_t *g, uint16_t *b, uint16_t *c){
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
 800081c:	603b      	str	r3, [r7, #0]
	// Read colour from all registers
	*r = tcs34725_i2c_read16(RDATAL);
 800081e:	2016      	movs	r0, #22
 8000820:	f7ff ff0a 	bl	8000638 <tcs34725_i2c_read16>
 8000824:	4603      	mov	r3, r0
 8000826:	461a      	mov	r2, r3
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	801a      	strh	r2, [r3, #0]
	*g = tcs34725_i2c_read16(GDATAL);
 800082c:	2018      	movs	r0, #24
 800082e:	f7ff ff03 	bl	8000638 <tcs34725_i2c_read16>
 8000832:	4603      	mov	r3, r0
 8000834:	461a      	mov	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	801a      	strh	r2, [r3, #0]
	*b = tcs34725_i2c_read16(BDATAL);
 800083a:	201a      	movs	r0, #26
 800083c:	f7ff fefc 	bl	8000638 <tcs34725_i2c_read16>
 8000840:	4603      	mov	r3, r0
 8000842:	461a      	mov	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	801a      	strh	r2, [r3, #0]
	*c = tcs34725_i2c_read16(CDATAL);
 8000848:	2014      	movs	r0, #20
 800084a:	f7ff fef5 	bl	8000638 <tcs34725_i2c_read16>
 800084e:	4603      	mov	r3, r0
 8000850:	461a      	mov	r2, r3
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	801a      	strh	r2, [r3, #0]

	int itime = tcs34725_i2c_read8(ATIME);
 8000856:	2001      	movs	r0, #1
 8000858:	f7ff fec8 	bl	80005ec <tcs34725_i2c_read8>
 800085c:	4603      	mov	r3, r0
 800085e:	617b      	str	r3, [r7, #20]

	tcs34725_integration_wait_time(itime);
 8000860:	6978      	ldr	r0, [r7, #20]
 8000862:	f7ff ff73 	bl	800074c <tcs34725_integration_wait_time>
}
 8000866:	bf00      	nop
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <normalize_colour_data>:

void normalize_colour_data(uint8_t *colours, uint16_t *r, uint16_t *g, uint16_t *b, uint16_t *clear){
 800086e:	b480      	push	{r7}
 8000870:	b085      	sub	sp, #20
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
 800087a:	603b      	str	r3, [r7, #0]
	// Normalize to 0-255
	if(*clear == 0){
 800087c:	69bb      	ldr	r3, [r7, #24]
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d10a      	bne.n	800089a <normalize_colour_data+0x2c>
		*(colours + 0) = 0;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
		*(colours + 1) = 0;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	3301      	adds	r3, #1
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
		*(colours + 2) = 0;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	3302      	adds	r3, #2
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
	}

	*(colours + 0) = *r * 255 / *clear;
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	881b      	ldrh	r3, [r3, #0]
 800089e:	461a      	mov	r2, r3
 80008a0:	4613      	mov	r3, r2
 80008a2:	021b      	lsls	r3, r3, #8
 80008a4:	1a9b      	subs	r3, r3, r2
 80008a6:	69ba      	ldr	r2, [r7, #24]
 80008a8:	8812      	ldrh	r2, [r2, #0]
 80008aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	701a      	strb	r2, [r3, #0]
	*(colours + 1) = *g * 255 / *clear;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	4613      	mov	r3, r2
 80008bc:	021b      	lsls	r3, r3, #8
 80008be:	1a9b      	subs	r3, r3, r2
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	8812      	ldrh	r2, [r2, #0]
 80008c4:	fb93 f2f2 	sdiv	r2, r3, r2
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	3301      	adds	r3, #1
 80008cc:	b2d2      	uxtb	r2, r2
 80008ce:	701a      	strb	r2, [r3, #0]
	*(colours + 2) = *b * 255 / *clear;
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	461a      	mov	r2, r3
 80008d6:	4613      	mov	r3, r2
 80008d8:	021b      	lsls	r3, r3, #8
 80008da:	1a9b      	subs	r3, r3, r2
 80008dc:	69ba      	ldr	r2, [r7, #24]
 80008de:	8812      	ldrh	r2, [r2, #0]
 80008e0:	fb93 f2f2 	sdiv	r2, r3, r2
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	3302      	adds	r3, #2
 80008e8:	b2d2      	uxtb	r2, r2
 80008ea:	701a      	strb	r2, [r3, #0]
}
 80008ec:	bf00      	nop
 80008ee:	3714      	adds	r7, #20
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fe:	f001 f855 	bl	80019ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000902:	f000 f867 	bl	80009d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000906:	f000 f94f 	bl	8000ba8 <MX_GPIO_Init>
  MX_DMA_Init();
 800090a:	f000 f92d 	bl	8000b68 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800090e:	f000 f901 	bl	8000b14 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000912:	f000 f8d1 	bl	8000ab8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  tcs34725_init_sensor();
 8000916:	f7ff febf 	bl	8000698 <tcs34725_init_sensor>
  //lcd_init();
  char *message = "Waiting to start! (Send 1 to start the application)";
 800091a:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <main+0xa0>)
 800091c:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff fc76 	bl	8000210 <strlen>
 8000924:	4603      	mov	r3, r0
 8000926:	b29a      	uxth	r2, r3
 8000928:	f04f 33ff 	mov.w	r3, #4294967295
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	481b      	ldr	r0, [pc, #108]	@ (800099c <main+0xa4>)
 8000930:	f004 f804 	bl	800493c <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1, buffer, 1);
 8000934:	2201      	movs	r2, #1
 8000936:	491a      	ldr	r1, [pc, #104]	@ (80009a0 <main+0xa8>)
 8000938:	4818      	ldr	r0, [pc, #96]	@ (800099c <main+0xa4>)
 800093a:	f004 f88a 	bl	8004a52 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800093e:	f005 f847 	bl	80059d0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of messageMutex */
  messageMutexHandle = osMutexNew(&messageMutex_attributes);
 8000942:	4818      	ldr	r0, [pc, #96]	@ (80009a4 <main+0xac>)
 8000944:	f005 f93b 	bl	8005bbe <osMutexNew>
 8000948:	4603      	mov	r3, r0
 800094a:	4a17      	ldr	r2, [pc, #92]	@ (80009a8 <main+0xb0>)
 800094c:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binarySem */
  binarySemHandle = osSemaphoreNew(1, 1, &binarySem_attributes);
 800094e:	4a17      	ldr	r2, [pc, #92]	@ (80009ac <main+0xb4>)
 8000950:	2101      	movs	r1, #1
 8000952:	2001      	movs	r0, #1
 8000954:	f005 f9b9 	bl	8005cca <osSemaphoreNew>
 8000958:	4603      	mov	r3, r0
 800095a:	4a15      	ldr	r2, [pc, #84]	@ (80009b0 <main+0xb8>)
 800095c:	6013      	str	r3, [r2, #0]

  /* creation of CountingSem */
  CountingSemHandle = osSemaphoreNew(3, 0, &CountingSem_attributes);
 800095e:	4a15      	ldr	r2, [pc, #84]	@ (80009b4 <main+0xbc>)
 8000960:	2100      	movs	r1, #0
 8000962:	2003      	movs	r0, #3
 8000964:	f005 f9b1 	bl	8005cca <osSemaphoreNew>
 8000968:	4603      	mov	r3, r0
 800096a:	4a13      	ldr	r2, [pc, #76]	@ (80009b8 <main+0xc0>)
 800096c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of dataReceive */
  dataReceiveHandle = osThreadNew(Task_dataReceive, NULL, &dataReceive_attributes);
 800096e:	4a13      	ldr	r2, [pc, #76]	@ (80009bc <main+0xc4>)
 8000970:	2100      	movs	r1, #0
 8000972:	4813      	ldr	r0, [pc, #76]	@ (80009c0 <main+0xc8>)
 8000974:	f005 f876 	bl	8005a64 <osThreadNew>
 8000978:	4603      	mov	r3, r0
 800097a:	4a12      	ldr	r2, [pc, #72]	@ (80009c4 <main+0xcc>)
 800097c:	6013      	str	r3, [r2, #0]

  /* creation of dataSend_BLT */
  dataSend_BLTHandle = osThreadNew(Task_dataSend_BLT, NULL, &dataSend_BLT_attributes);
 800097e:	4a12      	ldr	r2, [pc, #72]	@ (80009c8 <main+0xd0>)
 8000980:	2100      	movs	r1, #0
 8000982:	4812      	ldr	r0, [pc, #72]	@ (80009cc <main+0xd4>)
 8000984:	f005 f86e 	bl	8005a64 <osThreadNew>
 8000988:	4603      	mov	r3, r0
 800098a:	4a11      	ldr	r2, [pc, #68]	@ (80009d0 <main+0xd8>)
 800098c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800098e:	f005 f843 	bl	8005a18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000992:	bf00      	nop
 8000994:	e7fd      	b.n	8000992 <main+0x9a>
 8000996:	bf00      	nop
 8000998:	080098c4 	.word	0x080098c4
 800099c:	200000d0 	.word	0x200000d0
 80009a0:	20000194 	.word	0x20000194
 80009a4:	080099e0 	.word	0x080099e0
 80009a8:	20000180 	.word	0x20000180
 80009ac:	080099f0 	.word	0x080099f0
 80009b0:	20000184 	.word	0x20000184
 80009b4:	08009a00 	.word	0x08009a00
 80009b8:	20000188 	.word	0x20000188
 80009bc:	08009998 	.word	0x08009998
 80009c0:	080011dd 	.word	0x080011dd
 80009c4:	20000178 	.word	0x20000178
 80009c8:	080099bc 	.word	0x080099bc
 80009cc:	080012c1 	.word	0x080012c1
 80009d0:	2000017c 	.word	0x2000017c

080009d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b094      	sub	sp, #80	@ 0x50
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	2234      	movs	r2, #52	@ 0x34
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f008 faf6 	bl	8008fd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	4b2c      	ldr	r3, [pc, #176]	@ (8000ab0 <SystemClock_Config+0xdc>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a00:	4a2b      	ldr	r2, [pc, #172]	@ (8000ab0 <SystemClock_Config+0xdc>)
 8000a02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a08:	4b29      	ldr	r3, [pc, #164]	@ (8000ab0 <SystemClock_Config+0xdc>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a14:	2300      	movs	r3, #0
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	4b26      	ldr	r3, [pc, #152]	@ (8000ab4 <SystemClock_Config+0xe0>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a25      	ldr	r2, [pc, #148]	@ (8000ab4 <SystemClock_Config+0xe0>)
 8000a1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a22:	6013      	str	r3, [r2, #0]
 8000a24:	4b23      	ldr	r3, [pc, #140]	@ (8000ab4 <SystemClock_Config+0xe0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a30:	2301      	movs	r3, #1
 8000a32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a38:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a3e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a42:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a44:	2304      	movs	r3, #4
 8000a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000a48:	23b4      	movs	r3, #180	@ 0xb4
 8000a4a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a50:	2302      	movs	r3, #2
 8000a52:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a54:	2302      	movs	r3, #2
 8000a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f003 f9dd 	bl	8003e1c <HAL_RCC_OscConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a68:	f000 fd84 	bl	8001574 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a6c:	f002 fe0a 	bl	8003684 <HAL_PWREx_EnableOverDrive>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a76:	f000 fd7d 	bl	8001574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7a:	230f      	movs	r3, #15
 8000a7c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a86:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a90:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	2105      	movs	r1, #5
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f002 fe43 	bl	8003724 <HAL_RCC_ClockConfig>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000aa4:	f000 fd66 	bl	8001574 <Error_Handler>
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	3750      	adds	r7, #80	@ 0x50
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40007000 	.word	0x40007000

08000ab8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000abc:	4b12      	ldr	r3, [pc, #72]	@ (8000b08 <MX_I2C1_Init+0x50>)
 8000abe:	4a13      	ldr	r2, [pc, #76]	@ (8000b0c <MX_I2C1_Init+0x54>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <MX_I2C1_Init+0x50>)
 8000ac4:	4a12      	ldr	r2, [pc, #72]	@ (8000b10 <MX_I2C1_Init+0x58>)
 8000ac6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b08 <MX_I2C1_Init+0x50>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <MX_I2C1_Init+0x50>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <MX_I2C1_Init+0x50>)
 8000ad6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ada:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	@ (8000b08 <MX_I2C1_Init+0x50>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ae2:	4b09      	ldr	r3, [pc, #36]	@ (8000b08 <MX_I2C1_Init+0x50>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae8:	4b07      	ldr	r3, [pc, #28]	@ (8000b08 <MX_I2C1_Init+0x50>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aee:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <MX_I2C1_Init+0x50>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af4:	4804      	ldr	r0, [pc, #16]	@ (8000b08 <MX_I2C1_Init+0x50>)
 8000af6:	f001 fdcb 	bl	8002690 <HAL_I2C_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b00:	f000 fd38 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	2000007c 	.word	0x2000007c
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	00061a80 	.word	0x00061a80

08000b14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b18:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <MX_USART1_UART_Init+0x4c>)
 8000b1a:	4a12      	ldr	r2, [pc, #72]	@ (8000b64 <MX_USART1_UART_Init+0x50>)
 8000b1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b1e:	4b10      	ldr	r3, [pc, #64]	@ (8000b60 <MX_USART1_UART_Init+0x4c>)
 8000b20:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000b24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <MX_USART1_UART_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <MX_USART1_UART_Init+0x4c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	@ (8000b60 <MX_USART1_UART_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b38:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <MX_USART1_UART_Init+0x4c>)
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	@ (8000b60 <MX_USART1_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b44:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <MX_USART1_UART_Init+0x4c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b4a:	4805      	ldr	r0, [pc, #20]	@ (8000b60 <MX_USART1_UART_Init+0x4c>)
 8000b4c:	f003 fea6 	bl	800489c <HAL_UART_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b56:	f000 fd0d 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200000d0 	.word	0x200000d0
 8000b64:	40011000 	.word	0x40011000

08000b68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <MX_DMA_Init+0x3c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	4a0b      	ldr	r2, [pc, #44]	@ (8000ba4 <MX_DMA_Init+0x3c>)
 8000b78:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <MX_DMA_Init+0x3c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2105      	movs	r1, #5
 8000b8e:	203a      	movs	r0, #58	@ 0x3a
 8000b90:	f001 f82a 	bl	8001be8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b94:	203a      	movs	r0, #58	@ 0x3a
 8000b96:	f001 f843 	bl	8001c20 <HAL_NVIC_EnableIRQ>

}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	@ 0x28
 8000bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	4b3d      	ldr	r3, [pc, #244]	@ (8000cb8 <MX_GPIO_Init+0x110>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a3c      	ldr	r2, [pc, #240]	@ (8000cb8 <MX_GPIO_Init+0x110>)
 8000bc8:	f043 0304 	orr.w	r3, r3, #4
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b3a      	ldr	r3, [pc, #232]	@ (8000cb8 <MX_GPIO_Init+0x110>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f003 0304 	and.w	r3, r3, #4
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	4b36      	ldr	r3, [pc, #216]	@ (8000cb8 <MX_GPIO_Init+0x110>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a35      	ldr	r2, [pc, #212]	@ (8000cb8 <MX_GPIO_Init+0x110>)
 8000be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b33      	ldr	r3, [pc, #204]	@ (8000cb8 <MX_GPIO_Init+0x110>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8000cb8 <MX_GPIO_Init+0x110>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a2e      	ldr	r2, [pc, #184]	@ (8000cb8 <MX_GPIO_Init+0x110>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b2c      	ldr	r3, [pc, #176]	@ (8000cb8 <MX_GPIO_Init+0x110>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	4b28      	ldr	r3, [pc, #160]	@ (8000cb8 <MX_GPIO_Init+0x110>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a27      	ldr	r2, [pc, #156]	@ (8000cb8 <MX_GPIO_Init+0x110>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c22:	4b25      	ldr	r3, [pc, #148]	@ (8000cb8 <MX_GPIO_Init+0x110>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2120      	movs	r1, #32
 8000c32:	4822      	ldr	r0, [pc, #136]	@ (8000cbc <MX_GPIO_Init+0x114>)
 8000c34:	f001 fd12 	bl	800265c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c3e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	481c      	ldr	r0, [pc, #112]	@ (8000cc0 <MX_GPIO_Init+0x118>)
 8000c50:	f001 fb70 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c54:	230c      	movs	r3, #12
 8000c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c64:	2307      	movs	r3, #7
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4813      	ldr	r0, [pc, #76]	@ (8000cbc <MX_GPIO_Init+0x114>)
 8000c70:	f001 fb60 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c74:	2320      	movs	r3, #32
 8000c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <MX_GPIO_Init+0x114>)
 8000c8c:	f001 fb52 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c90:	2310      	movs	r3, #16
 8000c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c94:	2312      	movs	r3, #18
 8000c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4806      	ldr	r0, [pc, #24]	@ (8000cc4 <MX_GPIO_Init+0x11c>)
 8000cac:	f001 fb42 	bl	8002334 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cb0:	bf00      	nop
 8000cb2:	3728      	adds	r7, #40	@ 0x28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020000 	.word	0x40020000
 8000cc0:	40020800 	.word	0x40020800
 8000cc4:	40020400 	.word	0x40020400

08000cc8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000cc8:	b5b0      	push	{r4, r5, r7, lr}
 8000cca:	b090      	sub	sp, #64	@ 0x40
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, buffer, 1);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	49be      	ldr	r1, [pc, #760]	@ (8000fcc <HAL_UART_RxCpltCallback+0x304>)
 8000cd4:	48be      	ldr	r0, [pc, #760]	@ (8000fd0 <HAL_UART_RxCpltCallback+0x308>)
 8000cd6:	f003 febc 	bl	8004a52 <HAL_UART_Receive_IT>

	char temp_msg[32];
	char str_itime[6];
	char str_gain[6];
	int itime = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int gain = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	63bb      	str	r3, [r7, #56]	@ 0x38

	switch(buffer[0]){
 8000ce2:	4bba      	ldr	r3, [pc, #744]	@ (8000fcc <HAL_UART_RxCpltCallback+0x304>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	3b30      	subs	r3, #48	@ 0x30
 8000ce8:	2b11      	cmp	r3, #17
 8000cea:	f200 826b 	bhi.w	80011c4 <HAL_UART_RxCpltCallback+0x4fc>
 8000cee:	a201      	add	r2, pc, #4	@ (adr r2, 8000cf4 <HAL_UART_RxCpltCallback+0x2c>)
 8000cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf4:	08000d3d 	.word	0x08000d3d
 8000cf8:	08000d53 	.word	0x08000d53
 8000cfc:	08000d69 	.word	0x08000d69
 8000d00:	08000de3 	.word	0x08000de3
 8000d04:	08000e5d 	.word	0x08000e5d
 8000d08:	08000ed7 	.word	0x08000ed7
 8000d0c:	08000f51 	.word	0x08000f51
 8000d10:	08000fed 	.word	0x08000fed
 8000d14:	08001063 	.word	0x08001063
 8000d18:	080010d9 	.word	0x080010d9
 8000d1c:	080011c5 	.word	0x080011c5
 8000d20:	080011c5 	.word	0x080011c5
 8000d24:	080011c5 	.word	0x080011c5
 8000d28:	080011c5 	.word	0x080011c5
 8000d2c:	080011c5 	.word	0x080011c5
 8000d30:	080011c5 	.word	0x080011c5
 8000d34:	080011c5 	.word	0x080011c5
 8000d38:	0800114f 	.word	0x0800114f
	case '0':
		HAL_UART_Transmit(&huart1, (uint8_t *)"App OFF!\n", 10, HAL_MAX_DELAY);
 8000d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d40:	220a      	movs	r2, #10
 8000d42:	49a4      	ldr	r1, [pc, #656]	@ (8000fd4 <HAL_UART_RxCpltCallback+0x30c>)
 8000d44:	48a2      	ldr	r0, [pc, #648]	@ (8000fd0 <HAL_UART_RxCpltCallback+0x308>)
 8000d46:	f003 fdf9 	bl	800493c <HAL_UART_Transmit>
		isToggled = false;
 8000d4a:	4ba3      	ldr	r3, [pc, #652]	@ (8000fd8 <HAL_UART_RxCpltCallback+0x310>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
		break;
 8000d50:	e238      	b.n	80011c4 <HAL_UART_RxCpltCallback+0x4fc>
	case '1':
		HAL_UART_Transmit(&huart1, (uint8_t *)"App ON!\n", 9, HAL_MAX_DELAY);
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
 8000d56:	2209      	movs	r2, #9
 8000d58:	49a0      	ldr	r1, [pc, #640]	@ (8000fdc <HAL_UART_RxCpltCallback+0x314>)
 8000d5a:	489d      	ldr	r0, [pc, #628]	@ (8000fd0 <HAL_UART_RxCpltCallback+0x308>)
 8000d5c:	f003 fdee 	bl	800493c <HAL_UART_Transmit>
		isToggled = true;
 8000d60:	4b9d      	ldr	r3, [pc, #628]	@ (8000fd8 <HAL_UART_RxCpltCallback+0x310>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	701a      	strb	r2, [r3, #0]
		break;
 8000d66:	e22d      	b.n	80011c4 <HAL_UART_RxCpltCallback+0x4fc>
	case '2':
		itime = 0xFF;
 8000d68:	23ff      	movs	r3, #255	@ 0xff
 8000d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sprintf(str_itime, "0x%02X", itime);
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d72:	499b      	ldr	r1, [pc, #620]	@ (8000fe0 <HAL_UART_RxCpltCallback+0x318>)
 8000d74:	4618      	mov	r0, r3
 8000d76:	f008 f90d 	bl	8008f94 <siprintf>

		strcpy(temp_msg, "Set integration time to ");
 8000d7a:	f107 0318 	add.w	r3, r7, #24
 8000d7e:	4a99      	ldr	r2, [pc, #612]	@ (8000fe4 <HAL_UART_RxCpltCallback+0x31c>)
 8000d80:	461c      	mov	r4, r3
 8000d82:	4615      	mov	r5, r2
 8000d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d8c:	c403      	stmia	r4!, {r0, r1}
 8000d8e:	7022      	strb	r2, [r4, #0]
		strcat(temp_msg, str_itime);
 8000d90:	f107 0210 	add.w	r2, r7, #16
 8000d94:	f107 0318 	add.w	r3, r7, #24
 8000d98:	4611      	mov	r1, r2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f008 f922 	bl	8008fe4 <strcat>
		strcat(temp_msg, "!\n");
 8000da0:	f107 0318 	add.w	r3, r7, #24
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fa33 	bl	8000210 <strlen>
 8000daa:	4603      	mov	r3, r0
 8000dac:	461a      	mov	r2, r3
 8000dae:	f107 0318 	add.w	r3, r7, #24
 8000db2:	4413      	add	r3, r2
 8000db4:	4a8c      	ldr	r2, [pc, #560]	@ (8000fe8 <HAL_UART_RxCpltCallback+0x320>)
 8000db6:	8811      	ldrh	r1, [r2, #0]
 8000db8:	7892      	ldrb	r2, [r2, #2]
 8000dba:	8019      	strh	r1, [r3, #0]
 8000dbc:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, (uint8_t*) temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 8000dbe:	f107 0318 	add.w	r3, r7, #24
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fa24 	bl	8000210 <strlen>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	f107 0118 	add.w	r1, r7, #24
 8000dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd4:	487e      	ldr	r0, [pc, #504]	@ (8000fd0 <HAL_UART_RxCpltCallback+0x308>)
 8000dd6:	f003 fdb1 	bl	800493c <HAL_UART_Transmit>
		tcs34725_update_config_itime(itime);
 8000dda:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000ddc:	f7ff fced 	bl	80007ba <tcs34725_update_config_itime>
		break;
 8000de0:	e1f0      	b.n	80011c4 <HAL_UART_RxCpltCallback+0x4fc>
	case '3':
		itime = 0xF6;
 8000de2:	23f6      	movs	r3, #246	@ 0xf6
 8000de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sprintf(str_itime, "0x%02X", itime);
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000dec:	497c      	ldr	r1, [pc, #496]	@ (8000fe0 <HAL_UART_RxCpltCallback+0x318>)
 8000dee:	4618      	mov	r0, r3
 8000df0:	f008 f8d0 	bl	8008f94 <siprintf>

		strcpy(temp_msg, "Set integration time to ");
 8000df4:	f107 0318 	add.w	r3, r7, #24
 8000df8:	4a7a      	ldr	r2, [pc, #488]	@ (8000fe4 <HAL_UART_RxCpltCallback+0x31c>)
 8000dfa:	461c      	mov	r4, r3
 8000dfc:	4615      	mov	r5, r2
 8000dfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e06:	c403      	stmia	r4!, {r0, r1}
 8000e08:	7022      	strb	r2, [r4, #0]
		strcat(temp_msg, str_itime);
 8000e0a:	f107 0210 	add.w	r2, r7, #16
 8000e0e:	f107 0318 	add.w	r3, r7, #24
 8000e12:	4611      	mov	r1, r2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f008 f8e5 	bl	8008fe4 <strcat>
		strcat(temp_msg, "!\n");
 8000e1a:	f107 0318 	add.w	r3, r7, #24
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff f9f6 	bl	8000210 <strlen>
 8000e24:	4603      	mov	r3, r0
 8000e26:	461a      	mov	r2, r3
 8000e28:	f107 0318 	add.w	r3, r7, #24
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a6e      	ldr	r2, [pc, #440]	@ (8000fe8 <HAL_UART_RxCpltCallback+0x320>)
 8000e30:	8811      	ldrh	r1, [r2, #0]
 8000e32:	7892      	ldrb	r2, [r2, #2]
 8000e34:	8019      	strh	r1, [r3, #0]
 8000e36:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, (uint8_t*) temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 8000e38:	f107 0318 	add.w	r3, r7, #24
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff f9e7 	bl	8000210 <strlen>
 8000e42:	4603      	mov	r3, r0
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	f107 0118 	add.w	r1, r7, #24
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	4860      	ldr	r0, [pc, #384]	@ (8000fd0 <HAL_UART_RxCpltCallback+0x308>)
 8000e50:	f003 fd74 	bl	800493c <HAL_UART_Transmit>
		tcs34725_update_config_itime(itime);
 8000e54:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000e56:	f7ff fcb0 	bl	80007ba <tcs34725_update_config_itime>
		break;
 8000e5a:	e1b3      	b.n	80011c4 <HAL_UART_RxCpltCallback+0x4fc>
	case '4':
		itime = 0xD5;
 8000e5c:	23d5      	movs	r3, #213	@ 0xd5
 8000e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sprintf(str_itime, "0x%02X", itime);
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000e66:	495e      	ldr	r1, [pc, #376]	@ (8000fe0 <HAL_UART_RxCpltCallback+0x318>)
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f008 f893 	bl	8008f94 <siprintf>

		strcpy(temp_msg, "Set integration time to ");
 8000e6e:	f107 0318 	add.w	r3, r7, #24
 8000e72:	4a5c      	ldr	r2, [pc, #368]	@ (8000fe4 <HAL_UART_RxCpltCallback+0x31c>)
 8000e74:	461c      	mov	r4, r3
 8000e76:	4615      	mov	r5, r2
 8000e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e80:	c403      	stmia	r4!, {r0, r1}
 8000e82:	7022      	strb	r2, [r4, #0]
		strcat(temp_msg, str_itime);
 8000e84:	f107 0210 	add.w	r2, r7, #16
 8000e88:	f107 0318 	add.w	r3, r7, #24
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f008 f8a8 	bl	8008fe4 <strcat>
		strcat(temp_msg, "!\n");
 8000e94:	f107 0318 	add.w	r3, r7, #24
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff f9b9 	bl	8000210 <strlen>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	f107 0318 	add.w	r3, r7, #24
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a4f      	ldr	r2, [pc, #316]	@ (8000fe8 <HAL_UART_RxCpltCallback+0x320>)
 8000eaa:	8811      	ldrh	r1, [r2, #0]
 8000eac:	7892      	ldrb	r2, [r2, #2]
 8000eae:	8019      	strh	r1, [r3, #0]
 8000eb0:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, (uint8_t*) temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 8000eb2:	f107 0318 	add.w	r3, r7, #24
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff f9aa 	bl	8000210 <strlen>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	f107 0118 	add.w	r1, r7, #24
 8000ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec8:	4841      	ldr	r0, [pc, #260]	@ (8000fd0 <HAL_UART_RxCpltCallback+0x308>)
 8000eca:	f003 fd37 	bl	800493c <HAL_UART_Transmit>
		tcs34725_update_config_itime(itime);
 8000ece:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000ed0:	f7ff fc73 	bl	80007ba <tcs34725_update_config_itime>
		break;
 8000ed4:	e176      	b.n	80011c4 <HAL_UART_RxCpltCallback+0x4fc>
	case '5':
		itime = 0xC0;
 8000ed6:	23c0      	movs	r3, #192	@ 0xc0
 8000ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sprintf(str_itime, "0x%02X", itime);
 8000eda:	f107 0310 	add.w	r3, r7, #16
 8000ede:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ee0:	493f      	ldr	r1, [pc, #252]	@ (8000fe0 <HAL_UART_RxCpltCallback+0x318>)
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f008 f856 	bl	8008f94 <siprintf>

		strcpy(temp_msg, "Set integration time to ");
 8000ee8:	f107 0318 	add.w	r3, r7, #24
 8000eec:	4a3d      	ldr	r2, [pc, #244]	@ (8000fe4 <HAL_UART_RxCpltCallback+0x31c>)
 8000eee:	461c      	mov	r4, r3
 8000ef0:	4615      	mov	r5, r2
 8000ef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000efa:	c403      	stmia	r4!, {r0, r1}
 8000efc:	7022      	strb	r2, [r4, #0]
		strcat(temp_msg, str_itime);
 8000efe:	f107 0210 	add.w	r2, r7, #16
 8000f02:	f107 0318 	add.w	r3, r7, #24
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f008 f86b 	bl	8008fe4 <strcat>
		strcat(temp_msg, "!\n");
 8000f0e:	f107 0318 	add.w	r3, r7, #24
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff f97c 	bl	8000210 <strlen>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	f107 0318 	add.w	r3, r7, #24
 8000f20:	4413      	add	r3, r2
 8000f22:	4a31      	ldr	r2, [pc, #196]	@ (8000fe8 <HAL_UART_RxCpltCallback+0x320>)
 8000f24:	8811      	ldrh	r1, [r2, #0]
 8000f26:	7892      	ldrb	r2, [r2, #2]
 8000f28:	8019      	strh	r1, [r3, #0]
 8000f2a:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, (uint8_t*) temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 8000f2c:	f107 0318 	add.w	r3, r7, #24
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff f96d 	bl	8000210 <strlen>
 8000f36:	4603      	mov	r3, r0
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	f107 0118 	add.w	r1, r7, #24
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f42:	4823      	ldr	r0, [pc, #140]	@ (8000fd0 <HAL_UART_RxCpltCallback+0x308>)
 8000f44:	f003 fcfa 	bl	800493c <HAL_UART_Transmit>
		tcs34725_update_config_itime(itime);
 8000f48:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000f4a:	f7ff fc36 	bl	80007ba <tcs34725_update_config_itime>
		break;
 8000f4e:	e139      	b.n	80011c4 <HAL_UART_RxCpltCallback+0x4fc>
	case '6':
		itime = 0x00;
 8000f50:	2300      	movs	r3, #0
 8000f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sprintf(str_itime, "0x%02X", itime);
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f5a:	4921      	ldr	r1, [pc, #132]	@ (8000fe0 <HAL_UART_RxCpltCallback+0x318>)
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f008 f819 	bl	8008f94 <siprintf>

		strcpy(temp_msg, "Set integration time to ");
 8000f62:	f107 0318 	add.w	r3, r7, #24
 8000f66:	4a1f      	ldr	r2, [pc, #124]	@ (8000fe4 <HAL_UART_RxCpltCallback+0x31c>)
 8000f68:	461c      	mov	r4, r3
 8000f6a:	4615      	mov	r5, r2
 8000f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f74:	c403      	stmia	r4!, {r0, r1}
 8000f76:	7022      	strb	r2, [r4, #0]
		strcat(temp_msg, str_itime);
 8000f78:	f107 0210 	add.w	r2, r7, #16
 8000f7c:	f107 0318 	add.w	r3, r7, #24
 8000f80:	4611      	mov	r1, r2
 8000f82:	4618      	mov	r0, r3
 8000f84:	f008 f82e 	bl	8008fe4 <strcat>
		strcat(temp_msg, "!\n");
 8000f88:	f107 0318 	add.w	r3, r7, #24
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff f93f 	bl	8000210 <strlen>
 8000f92:	4603      	mov	r3, r0
 8000f94:	461a      	mov	r2, r3
 8000f96:	f107 0318 	add.w	r3, r7, #24
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a12      	ldr	r2, [pc, #72]	@ (8000fe8 <HAL_UART_RxCpltCallback+0x320>)
 8000f9e:	8811      	ldrh	r1, [r2, #0]
 8000fa0:	7892      	ldrb	r2, [r2, #2]
 8000fa2:	8019      	strh	r1, [r3, #0]
 8000fa4:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, (uint8_t*) temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 8000fa6:	f107 0318 	add.w	r3, r7, #24
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff f930 	bl	8000210 <strlen>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	f107 0118 	add.w	r1, r7, #24
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbc:	4804      	ldr	r0, [pc, #16]	@ (8000fd0 <HAL_UART_RxCpltCallback+0x308>)
 8000fbe:	f003 fcbd 	bl	800493c <HAL_UART_Transmit>
		tcs34725_update_config_itime(itime);
 8000fc2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000fc4:	f7ff fbf9 	bl	80007ba <tcs34725_update_config_itime>
		break;
 8000fc8:	e0fc      	b.n	80011c4 <HAL_UART_RxCpltCallback+0x4fc>
 8000fca:	bf00      	nop
 8000fcc:	20000194 	.word	0x20000194
 8000fd0:	200000d0 	.word	0x200000d0
 8000fd4:	080098f8 	.word	0x080098f8
 8000fd8:	20000195 	.word	0x20000195
 8000fdc:	08009904 	.word	0x08009904
 8000fe0:	08009910 	.word	0x08009910
 8000fe4:	08009918 	.word	0x08009918
 8000fe8:	08009934 	.word	0x08009934
	case '7':
		gain = 0x00;
 8000fec:	2300      	movs	r3, #0
 8000fee:	63bb      	str	r3, [r7, #56]	@ 0x38
		sprintf(str_gain, "0x%02X", gain);
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ff6:	4975      	ldr	r1, [pc, #468]	@ (80011cc <HAL_UART_RxCpltCallback+0x504>)
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f007 ffcb 	bl	8008f94 <siprintf>

		strcpy(temp_msg, "Set gain to ");
 8000ffe:	f107 0318 	add.w	r3, r7, #24
 8001002:	4a73      	ldr	r2, [pc, #460]	@ (80011d0 <HAL_UART_RxCpltCallback+0x508>)
 8001004:	461c      	mov	r4, r3
 8001006:	4613      	mov	r3, r2
 8001008:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800100a:	c407      	stmia	r4!, {r0, r1, r2}
 800100c:	7023      	strb	r3, [r4, #0]
		strcat(temp_msg, str_gain);
 800100e:	f107 0208 	add.w	r2, r7, #8
 8001012:	f107 0318 	add.w	r3, r7, #24
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f007 ffe3 	bl	8008fe4 <strcat>
		strcat(temp_msg, "!\n");
 800101e:	f107 0318 	add.w	r3, r7, #24
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff f8f4 	bl	8000210 <strlen>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	f107 0318 	add.w	r3, r7, #24
 8001030:	4413      	add	r3, r2
 8001032:	4a68      	ldr	r2, [pc, #416]	@ (80011d4 <HAL_UART_RxCpltCallback+0x50c>)
 8001034:	8811      	ldrh	r1, [r2, #0]
 8001036:	7892      	ldrb	r2, [r2, #2]
 8001038:	8019      	strh	r1, [r3, #0]
 800103a:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, (uint8_t*) temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 800103c:	f107 0318 	add.w	r3, r7, #24
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff f8e5 	bl	8000210 <strlen>
 8001046:	4603      	mov	r3, r0
 8001048:	b29a      	uxth	r2, r3
 800104a:	f107 0118 	add.w	r1, r7, #24
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	4861      	ldr	r0, [pc, #388]	@ (80011d8 <HAL_UART_RxCpltCallback+0x510>)
 8001054:	f003 fc72 	bl	800493c <HAL_UART_Transmit>
		tcs34725_update_config_gain(gain, itime);
 8001058:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800105a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800105c:	f7ff fbc2 	bl	80007e4 <tcs34725_update_config_gain>
		break;
 8001060:	e0b0      	b.n	80011c4 <HAL_UART_RxCpltCallback+0x4fc>
	case '8':
		gain = 0x01;
 8001062:	2301      	movs	r3, #1
 8001064:	63bb      	str	r3, [r7, #56]	@ 0x38
		sprintf(str_gain, "0x%02X", gain);
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800106c:	4957      	ldr	r1, [pc, #348]	@ (80011cc <HAL_UART_RxCpltCallback+0x504>)
 800106e:	4618      	mov	r0, r3
 8001070:	f007 ff90 	bl	8008f94 <siprintf>

		strcpy(temp_msg, "Set gain to ");
 8001074:	f107 0318 	add.w	r3, r7, #24
 8001078:	4a55      	ldr	r2, [pc, #340]	@ (80011d0 <HAL_UART_RxCpltCallback+0x508>)
 800107a:	461c      	mov	r4, r3
 800107c:	4613      	mov	r3, r2
 800107e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001080:	c407      	stmia	r4!, {r0, r1, r2}
 8001082:	7023      	strb	r3, [r4, #0]
		strcat(temp_msg, str_gain);
 8001084:	f107 0208 	add.w	r2, r7, #8
 8001088:	f107 0318 	add.w	r3, r7, #24
 800108c:	4611      	mov	r1, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f007 ffa8 	bl	8008fe4 <strcat>
		strcat(temp_msg, "!\n");
 8001094:	f107 0318 	add.w	r3, r7, #24
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff f8b9 	bl	8000210 <strlen>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	f107 0318 	add.w	r3, r7, #24
 80010a6:	4413      	add	r3, r2
 80010a8:	4a4a      	ldr	r2, [pc, #296]	@ (80011d4 <HAL_UART_RxCpltCallback+0x50c>)
 80010aa:	8811      	ldrh	r1, [r2, #0]
 80010ac:	7892      	ldrb	r2, [r2, #2]
 80010ae:	8019      	strh	r1, [r3, #0]
 80010b0:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, (uint8_t*) temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 80010b2:	f107 0318 	add.w	r3, r7, #24
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff f8aa 	bl	8000210 <strlen>
 80010bc:	4603      	mov	r3, r0
 80010be:	b29a      	uxth	r2, r3
 80010c0:	f107 0118 	add.w	r1, r7, #24
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	4843      	ldr	r0, [pc, #268]	@ (80011d8 <HAL_UART_RxCpltCallback+0x510>)
 80010ca:	f003 fc37 	bl	800493c <HAL_UART_Transmit>
		tcs34725_update_config_gain(gain, itime);
 80010ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80010d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80010d2:	f7ff fb87 	bl	80007e4 <tcs34725_update_config_gain>
		break;
 80010d6:	e075      	b.n	80011c4 <HAL_UART_RxCpltCallback+0x4fc>
	case '9':
		gain = 0x10;
 80010d8:	2310      	movs	r3, #16
 80010da:	63bb      	str	r3, [r7, #56]	@ 0x38
		sprintf(str_gain, "0x%02X", gain);
 80010dc:	f107 0308 	add.w	r3, r7, #8
 80010e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80010e2:	493a      	ldr	r1, [pc, #232]	@ (80011cc <HAL_UART_RxCpltCallback+0x504>)
 80010e4:	4618      	mov	r0, r3
 80010e6:	f007 ff55 	bl	8008f94 <siprintf>

		strcpy(temp_msg, "Set gain to ");
 80010ea:	f107 0318 	add.w	r3, r7, #24
 80010ee:	4a38      	ldr	r2, [pc, #224]	@ (80011d0 <HAL_UART_RxCpltCallback+0x508>)
 80010f0:	461c      	mov	r4, r3
 80010f2:	4613      	mov	r3, r2
 80010f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010f6:	c407      	stmia	r4!, {r0, r1, r2}
 80010f8:	7023      	strb	r3, [r4, #0]
		strcat(temp_msg, str_gain);
 80010fa:	f107 0208 	add.w	r2, r7, #8
 80010fe:	f107 0318 	add.w	r3, r7, #24
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f007 ff6d 	bl	8008fe4 <strcat>
		strcat(temp_msg, "!\n");
 800110a:	f107 0318 	add.w	r3, r7, #24
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff f87e 	bl	8000210 <strlen>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	f107 0318 	add.w	r3, r7, #24
 800111c:	4413      	add	r3, r2
 800111e:	4a2d      	ldr	r2, [pc, #180]	@ (80011d4 <HAL_UART_RxCpltCallback+0x50c>)
 8001120:	8811      	ldrh	r1, [r2, #0]
 8001122:	7892      	ldrb	r2, [r2, #2]
 8001124:	8019      	strh	r1, [r3, #0]
 8001126:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, (uint8_t*) temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 8001128:	f107 0318 	add.w	r3, r7, #24
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f86f 	bl	8000210 <strlen>
 8001132:	4603      	mov	r3, r0
 8001134:	b29a      	uxth	r2, r3
 8001136:	f107 0118 	add.w	r1, r7, #24
 800113a:	f04f 33ff 	mov.w	r3, #4294967295
 800113e:	4826      	ldr	r0, [pc, #152]	@ (80011d8 <HAL_UART_RxCpltCallback+0x510>)
 8001140:	f003 fbfc 	bl	800493c <HAL_UART_Transmit>
		tcs34725_update_config_gain(gain, itime);
 8001144:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001146:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001148:	f7ff fb4c 	bl	80007e4 <tcs34725_update_config_gain>
		break;
 800114c:	e03a      	b.n	80011c4 <HAL_UART_RxCpltCallback+0x4fc>
	case 'A':
		gain = 0x11;
 800114e:	2311      	movs	r3, #17
 8001150:	63bb      	str	r3, [r7, #56]	@ 0x38
		sprintf(str_gain, "0x%02X", gain);
 8001152:	f107 0308 	add.w	r3, r7, #8
 8001156:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001158:	491c      	ldr	r1, [pc, #112]	@ (80011cc <HAL_UART_RxCpltCallback+0x504>)
 800115a:	4618      	mov	r0, r3
 800115c:	f007 ff1a 	bl	8008f94 <siprintf>

		strcpy(temp_msg, "Set gain to ");
 8001160:	f107 0318 	add.w	r3, r7, #24
 8001164:	4a1a      	ldr	r2, [pc, #104]	@ (80011d0 <HAL_UART_RxCpltCallback+0x508>)
 8001166:	461c      	mov	r4, r3
 8001168:	4613      	mov	r3, r2
 800116a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800116c:	c407      	stmia	r4!, {r0, r1, r2}
 800116e:	7023      	strb	r3, [r4, #0]
		strcat(temp_msg, str_gain);
 8001170:	f107 0208 	add.w	r2, r7, #8
 8001174:	f107 0318 	add.w	r3, r7, #24
 8001178:	4611      	mov	r1, r2
 800117a:	4618      	mov	r0, r3
 800117c:	f007 ff32 	bl	8008fe4 <strcat>
		strcat(temp_msg, "!\n");
 8001180:	f107 0318 	add.w	r3, r7, #24
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f843 	bl	8000210 <strlen>
 800118a:	4603      	mov	r3, r0
 800118c:	461a      	mov	r2, r3
 800118e:	f107 0318 	add.w	r3, r7, #24
 8001192:	4413      	add	r3, r2
 8001194:	4a0f      	ldr	r2, [pc, #60]	@ (80011d4 <HAL_UART_RxCpltCallback+0x50c>)
 8001196:	8811      	ldrh	r1, [r2, #0]
 8001198:	7892      	ldrb	r2, [r2, #2]
 800119a:	8019      	strh	r1, [r3, #0]
 800119c:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, (uint8_t*) temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 800119e:	f107 0318 	add.w	r3, r7, #24
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f834 	bl	8000210 <strlen>
 80011a8:	4603      	mov	r3, r0
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	f107 0118 	add.w	r1, r7, #24
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	4808      	ldr	r0, [pc, #32]	@ (80011d8 <HAL_UART_RxCpltCallback+0x510>)
 80011b6:	f003 fbc1 	bl	800493c <HAL_UART_Transmit>
		tcs34725_update_config_gain(gain, itime);
 80011ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80011bc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80011be:	f7ff fb11 	bl	80007e4 <tcs34725_update_config_gain>
		break;
 80011c2:	bf00      	nop

	}
}
 80011c4:	bf00      	nop
 80011c6:	3740      	adds	r7, #64	@ 0x40
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bdb0      	pop	{r4, r5, r7, pc}
 80011cc:	08009910 	.word	0x08009910
 80011d0:	08009938 	.word	0x08009938
 80011d4:	08009934 	.word	0x08009934
 80011d8:	200000d0 	.word	0x200000d0

080011dc <Task_dataReceive>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_dataReceive */
void Task_dataReceive(void *argument)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08c      	sub	sp, #48	@ 0x30
 80011e0:	af02      	add	r7, sp, #8
 80011e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	uint16_t *r = (uint16_t*) malloc (sizeof(uint16_t));
 80011e4:	2002      	movs	r0, #2
 80011e6:	f007 fe1f 	bl	8008e28 <malloc>
 80011ea:	4603      	mov	r3, r0
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t *g = (uint16_t*) malloc (sizeof(uint16_t));
 80011ee:	2002      	movs	r0, #2
 80011f0:	f007 fe1a 	bl	8008e28 <malloc>
 80011f4:	4603      	mov	r3, r0
 80011f6:	623b      	str	r3, [r7, #32]
	uint16_t *b = (uint16_t*) malloc (sizeof(uint16_t));
 80011f8:	2002      	movs	r0, #2
 80011fa:	f007 fe15 	bl	8008e28 <malloc>
 80011fe:	4603      	mov	r3, r0
 8001200:	61fb      	str	r3, [r7, #28]
	uint16_t *c = (uint16_t*) malloc (sizeof(uint16_t));
 8001202:	2002      	movs	r0, #2
 8001204:	f007 fe10 	bl	8008e28 <malloc>
 8001208:	4603      	mov	r3, r0
 800120a:	61bb      	str	r3, [r7, #24]
	uint8_t *colours = (uint8_t*) malloc (3 * sizeof(uint8_t));
 800120c:	2003      	movs	r0, #3
 800120e:	f007 fe0b 	bl	8008e28 <malloc>
 8001212:	4603      	mov	r3, r0
 8001214:	617b      	str	r3, [r7, #20]


  /* Infinite loop */
  for(;;)
  {
	  if (xSemaphoreTake(binarySemHandle, portMAX_DELAY)){
 8001216:	4b26      	ldr	r3, [pc, #152]	@ (80012b0 <Task_dataReceive+0xd4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f04f 31ff 	mov.w	r1, #4294967295
 800121e:	4618      	mov	r0, r3
 8001220:	f005 fb46 	bl	80068b0 <xQueueSemaphoreTake>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d03e      	beq.n	80012a8 <Task_dataReceive+0xcc>
	  if(isToggled){
 800122a:	4b22      	ldr	r3, [pc, #136]	@ (80012b4 <Task_dataReceive+0xd8>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d033      	beq.n	800129a <Task_dataReceive+0xbe>
		  uint32_t start_time = HAL_GetTick();
 8001232:	f000 fbf1 	bl	8001a18 <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]
		  read_colour_data(r, g, b, c);
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	69fa      	ldr	r2, [r7, #28]
 800123c:	6a39      	ldr	r1, [r7, #32]
 800123e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001240:	f7ff fae6 	bl	8000810 <read_colour_data>
		  normalize_colour_data(colours, r, g, b, c);
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	6a3a      	ldr	r2, [r7, #32]
 800124c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800124e:	6978      	ldr	r0, [r7, #20]
 8001250:	f7ff fb0d 	bl	800086e <normalize_colour_data>
		  uint32_t end_time = HAL_GetTick();
 8001254:	f000 fbe0 	bl	8001a18 <HAL_GetTick>
 8001258:	60f8      	str	r0, [r7, #12]

		  xSemaphoreTake(messageMutexHandle, portMAX_DELAY);
 800125a:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <Task_dataReceive+0xdc>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f04f 31ff 	mov.w	r1, #4294967295
 8001262:	4618      	mov	r0, r3
 8001264:	f005 fb24 	bl	80068b0 <xQueueSemaphoreTake>
		  msg.rgb[0] = *(colours);
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	781a      	ldrb	r2, [r3, #0]
 800126c:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <Task_dataReceive+0xe0>)
 800126e:	701a      	strb	r2, [r3, #0]
		  msg.rgb[1] = *(colours + 1);
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	785a      	ldrb	r2, [r3, #1]
 8001274:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <Task_dataReceive+0xe0>)
 8001276:	705a      	strb	r2, [r3, #1]
		  msg.rgb[2] = *(colours + 2);
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	789a      	ldrb	r2, [r3, #2]
 800127c:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <Task_dataReceive+0xe0>)
 800127e:	709a      	strb	r2, [r3, #2]
		  msg.time = end_time - start_time;
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	461a      	mov	r2, r3
 8001288:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <Task_dataReceive+0xe0>)
 800128a:	605a      	str	r2, [r3, #4]
		  xSemaphoreGive(messageMutexHandle);
 800128c:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <Task_dataReceive+0xdc>)
 800128e:	6818      	ldr	r0, [r3, #0]
 8001290:	2300      	movs	r3, #0
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	f005 f889 	bl	80063ac <xQueueGenericSend>
	  }
		  xSemaphoreGive(binarySemHandle);
 800129a:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <Task_dataReceive+0xd4>)
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	2300      	movs	r3, #0
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	f005 f882 	bl	80063ac <xQueueGenericSend>
	  }
    osDelay(1);
 80012a8:	2001      	movs	r0, #1
 80012aa:	f004 fc6d 	bl	8005b88 <osDelay>
	  if (xSemaphoreTake(binarySemHandle, portMAX_DELAY)){
 80012ae:	e7b2      	b.n	8001216 <Task_dataReceive+0x3a>
 80012b0:	20000184 	.word	0x20000184
 80012b4:	20000195 	.word	0x20000195
 80012b8:	20000180 	.word	0x20000180
 80012bc:	2000018c 	.word	0x2000018c

080012c0 <Task_dataSend_BLT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_dataSend_BLT */
void Task_dataSend_BLT(void *argument)
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b09d      	sub	sp, #116	@ 0x74
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_dataSend_BLT */
  /* Infinite loop */
  for(;;)
  {
	  if(isToggled){
 80012c8:	4b93      	ldr	r3, [pc, #588]	@ (8001518 <Task_dataSend_BLT+0x258>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 811e 	beq.w	800150e <Task_dataSend_BLT+0x24e>
		  if (xSemaphoreTake(binarySemHandle, portMAX_DELAY)) {
 80012d2:	4b92      	ldr	r3, [pc, #584]	@ (800151c <Task_dataSend_BLT+0x25c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f04f 31ff 	mov.w	r1, #4294967295
 80012da:	4618      	mov	r0, r3
 80012dc:	f005 fae8 	bl	80068b0 <xQueueSemaphoreTake>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 810c 	beq.w	8001500 <Task_dataSend_BLT+0x240>
			  char temp_msg[64] = "";
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	223c      	movs	r2, #60	@ 0x3c
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f007 fe6d 	bl	8008fd4 <memset>
			  // Variables for the colour values detected
			  char r_hex_str[3]; // Red in HEX as char
			  char g_hex_str[3]; // Green in HEX as char
			  char b_hex_str[3]; // Blue in HEX as char

			  xSemaphoreTake(messageMutexHandle, portMAX_DELAY);
 80012fa:	4b89      	ldr	r3, [pc, #548]	@ (8001520 <Task_dataSend_BLT+0x260>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f04f 31ff 	mov.w	r1, #4294967295
 8001302:	4618      	mov	r0, r3
 8001304:	f005 fad4 	bl	80068b0 <xQueueSemaphoreTake>
			  // Convert int to char
			  sprintf(r_str, "%d", msg.rgb[0]);
 8001308:	4b86      	ldr	r3, [pc, #536]	@ (8001524 <Task_dataSend_BLT+0x264>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001312:	4985      	ldr	r1, [pc, #532]	@ (8001528 <Task_dataSend_BLT+0x268>)
 8001314:	4618      	mov	r0, r3
 8001316:	f007 fe3d 	bl	8008f94 <siprintf>
			  sprintf(g_str, "%d", msg.rgb[1]);
 800131a:	4b82      	ldr	r3, [pc, #520]	@ (8001524 <Task_dataSend_BLT+0x264>)
 800131c:	785b      	ldrb	r3, [r3, #1]
 800131e:	461a      	mov	r2, r3
 8001320:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001324:	4980      	ldr	r1, [pc, #512]	@ (8001528 <Task_dataSend_BLT+0x268>)
 8001326:	4618      	mov	r0, r3
 8001328:	f007 fe34 	bl	8008f94 <siprintf>
			  sprintf(b_str, "%d", msg.rgb[2]);
 800132c:	4b7d      	ldr	r3, [pc, #500]	@ (8001524 <Task_dataSend_BLT+0x264>)
 800132e:	789b      	ldrb	r3, [r3, #2]
 8001330:	461a      	mov	r2, r3
 8001332:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001336:	497c      	ldr	r1, [pc, #496]	@ (8001528 <Task_dataSend_BLT+0x268>)
 8001338:	4618      	mov	r0, r3
 800133a:	f007 fe2b 	bl	8008f94 <siprintf>

			  // Convert values to hex and char
			  sprintf(r_hex_str, "%02X", msg.rgb[0]);
 800133e:	4b79      	ldr	r3, [pc, #484]	@ (8001524 <Task_dataSend_BLT+0x264>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001348:	4978      	ldr	r1, [pc, #480]	@ (800152c <Task_dataSend_BLT+0x26c>)
 800134a:	4618      	mov	r0, r3
 800134c:	f007 fe22 	bl	8008f94 <siprintf>
			  sprintf(g_hex_str, "%02X", msg.rgb[1]);
 8001350:	4b74      	ldr	r3, [pc, #464]	@ (8001524 <Task_dataSend_BLT+0x264>)
 8001352:	785b      	ldrb	r3, [r3, #1]
 8001354:	461a      	mov	r2, r3
 8001356:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800135a:	4974      	ldr	r1, [pc, #464]	@ (800152c <Task_dataSend_BLT+0x26c>)
 800135c:	4618      	mov	r0, r3
 800135e:	f007 fe19 	bl	8008f94 <siprintf>
			  sprintf(b_hex_str, "%02X", msg.rgb[2]);
 8001362:	4b70      	ldr	r3, [pc, #448]	@ (8001524 <Task_dataSend_BLT+0x264>)
 8001364:	789b      	ldrb	r3, [r3, #2]
 8001366:	461a      	mov	r2, r3
 8001368:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800136c:	496f      	ldr	r1, [pc, #444]	@ (800152c <Task_dataSend_BLT+0x26c>)
 800136e:	4618      	mov	r0, r3
 8001370:	f007 fe10 	bl	8008f94 <siprintf>
			  xSemaphoreGive(messageMutexHandle);
 8001374:	4b6a      	ldr	r3, [pc, #424]	@ (8001520 <Task_dataSend_BLT+0x260>)
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	2300      	movs	r3, #0
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	f005 f815 	bl	80063ac <xQueueGenericSend>

			  strcpy(temp_msg, "R: ");
 8001382:	f107 0308 	add.w	r3, r7, #8
 8001386:	4a6a      	ldr	r2, [pc, #424]	@ (8001530 <Task_dataSend_BLT+0x270>)
 8001388:	601a      	str	r2, [r3, #0]
			  strcat(temp_msg, r_str);
 800138a:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800138e:	f107 0308 	add.w	r3, r7, #8
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f007 fe25 	bl	8008fe4 <strcat>
			  strcat(temp_msg, " G: ");
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	4618      	mov	r0, r3
 80013a0:	f7fe ff36 	bl	8000210 <strlen>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	f107 0308 	add.w	r3, r7, #8
 80013ac:	4413      	add	r3, r2
 80013ae:	4a61      	ldr	r2, [pc, #388]	@ (8001534 <Task_dataSend_BLT+0x274>)
 80013b0:	6810      	ldr	r0, [r2, #0]
 80013b2:	6018      	str	r0, [r3, #0]
 80013b4:	7912      	ldrb	r2, [r2, #4]
 80013b6:	711a      	strb	r2, [r3, #4]
			  strcat(temp_msg, g_str);
 80013b8:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	4611      	mov	r1, r2
 80013c2:	4618      	mov	r0, r3
 80013c4:	f007 fe0e 	bl	8008fe4 <strcat>
			  strcat(temp_msg, " B: ");
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7fe ff1f 	bl	8000210 <strlen>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461a      	mov	r2, r3
 80013d6:	f107 0308 	add.w	r3, r7, #8
 80013da:	4413      	add	r3, r2
 80013dc:	4a56      	ldr	r2, [pc, #344]	@ (8001538 <Task_dataSend_BLT+0x278>)
 80013de:	6810      	ldr	r0, [r2, #0]
 80013e0:	6018      	str	r0, [r3, #0]
 80013e2:	7912      	ldrb	r2, [r2, #4]
 80013e4:	711a      	strb	r2, [r3, #4]
			  strcat(temp_msg, b_str);
 80013e6:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f007 fdf7 	bl	8008fe4 <strcat>
			  strcat(temp_msg, " ");
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7fe ff08 	bl	8000210 <strlen>
 8001400:	4603      	mov	r3, r0
 8001402:	461a      	mov	r2, r3
 8001404:	f107 0308 	add.w	r3, r7, #8
 8001408:	4413      	add	r3, r2
 800140a:	494c      	ldr	r1, [pc, #304]	@ (800153c <Task_dataSend_BLT+0x27c>)
 800140c:	461a      	mov	r2, r3
 800140e:	460b      	mov	r3, r1
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	8013      	strh	r3, [r2, #0]

			  strcat(temp_msg, "HEX: #");
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	4618      	mov	r0, r3
 800141a:	f7fe fef9 	bl	8000210 <strlen>
 800141e:	4603      	mov	r3, r0
 8001420:	461a      	mov	r2, r3
 8001422:	f107 0308 	add.w	r3, r7, #8
 8001426:	4413      	add	r3, r2
 8001428:	4a45      	ldr	r2, [pc, #276]	@ (8001540 <Task_dataSend_BLT+0x280>)
 800142a:	6810      	ldr	r0, [r2, #0]
 800142c:	6018      	str	r0, [r3, #0]
 800142e:	8891      	ldrh	r1, [r2, #4]
 8001430:	7992      	ldrb	r2, [r2, #6]
 8001432:	8099      	strh	r1, [r3, #4]
 8001434:	719a      	strb	r2, [r3, #6]
			  strcat(temp_msg, r_hex_str);
 8001436:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 800143a:	f107 0308 	add.w	r3, r7, #8
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f007 fdcf 	bl	8008fe4 <strcat>
			  strcat(temp_msg, g_hex_str);
 8001446:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800144a:	f107 0308 	add.w	r3, r7, #8
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f007 fdc7 	bl	8008fe4 <strcat>
			  strcat(temp_msg, b_hex_str);
 8001456:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800145a:	f107 0308 	add.w	r3, r7, #8
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f007 fdbf 	bl	8008fe4 <strcat>
			  strcat(temp_msg, " ");
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	4618      	mov	r0, r3
 800146c:	f7fe fed0 	bl	8000210 <strlen>
 8001470:	4603      	mov	r3, r0
 8001472:	461a      	mov	r2, r3
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	4413      	add	r3, r2
 800147a:	4930      	ldr	r1, [pc, #192]	@ (800153c <Task_dataSend_BLT+0x27c>)
 800147c:	461a      	mov	r2, r3
 800147e:	460b      	mov	r3, r1
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	8013      	strh	r3, [r2, #0]

			  // Variable for time keeping
			  char time_str[16];
			  sprintf(time_str, "%d", msg.time);
 8001484:	4b27      	ldr	r3, [pc, #156]	@ (8001524 <Task_dataSend_BLT+0x264>)
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800148c:	4926      	ldr	r1, [pc, #152]	@ (8001528 <Task_dataSend_BLT+0x268>)
 800148e:	4618      	mov	r0, r3
 8001490:	f007 fd80 	bl	8008f94 <siprintf>
			  strcat(temp_msg, "Time taken: ");
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	4618      	mov	r0, r3
 800149a:	f7fe feb9 	bl	8000210 <strlen>
 800149e:	4603      	mov	r3, r0
 80014a0:	461a      	mov	r2, r3
 80014a2:	f107 0308 	add.w	r3, r7, #8
 80014a6:	4413      	add	r3, r2
 80014a8:	4a26      	ldr	r2, [pc, #152]	@ (8001544 <Task_dataSend_BLT+0x284>)
 80014aa:	461c      	mov	r4, r3
 80014ac:	4613      	mov	r3, r2
 80014ae:	cb07      	ldmia	r3!, {r0, r1, r2}
 80014b0:	6020      	str	r0, [r4, #0]
 80014b2:	6061      	str	r1, [r4, #4]
 80014b4:	60a2      	str	r2, [r4, #8]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	7323      	strb	r3, [r4, #12]
			  strcat(temp_msg, time_str);
 80014ba:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f007 fd8d 	bl	8008fe4 <strcat>
			  strcat(temp_msg, "ms\n");
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7fe fe9e 	bl	8000210 <strlen>
 80014d4:	4603      	mov	r3, r0
 80014d6:	461a      	mov	r2, r3
 80014d8:	f107 0308 	add.w	r3, r7, #8
 80014dc:	4413      	add	r3, r2
 80014de:	4a1a      	ldr	r2, [pc, #104]	@ (8001548 <Task_dataSend_BLT+0x288>)
 80014e0:	6810      	ldr	r0, [r2, #0]
 80014e2:	6018      	str	r0, [r3, #0]
			  HAL_UART_Transmit(&huart1, (uint8_t*)temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7fe fe91 	bl	8000210 <strlen>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	f107 0108 	add.w	r1, r7, #8
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
 80014fa:	4814      	ldr	r0, [pc, #80]	@ (800154c <Task_dataSend_BLT+0x28c>)
 80014fc:	f003 fa1e 	bl	800493c <HAL_UART_Transmit>
		  }

		  xSemaphoreGive(binarySemHandle);
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <Task_dataSend_BLT+0x25c>)
 8001502:	6818      	ldr	r0, [r3, #0]
 8001504:	2300      	movs	r3, #0
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	f004 ff4f 	bl	80063ac <xQueueGenericSend>
	  }
    osDelay(1);
 800150e:	2001      	movs	r0, #1
 8001510:	f004 fb3a 	bl	8005b88 <osDelay>
	  if(isToggled){
 8001514:	e6d8      	b.n	80012c8 <Task_dataSend_BLT+0x8>
 8001516:	bf00      	nop
 8001518:	20000195 	.word	0x20000195
 800151c:	20000184 	.word	0x20000184
 8001520:	20000180 	.word	0x20000180
 8001524:	2000018c 	.word	0x2000018c
 8001528:	080098a0 	.word	0x080098a0
 800152c:	08009948 	.word	0x08009948
 8001530:	00203a52 	.word	0x00203a52
 8001534:	08009950 	.word	0x08009950
 8001538:	08009958 	.word	0x08009958
 800153c:	08009960 	.word	0x08009960
 8001540:	08009964 	.word	0x08009964
 8001544:	0800996c 	.word	0x0800996c
 8001548:	0800997c 	.word	0x0800997c
 800154c:	200000d0 	.word	0x200000d0

08001550 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a04      	ldr	r2, [pc, #16]	@ (8001570 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d101      	bne.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001562:	f000 fa45 	bl	80019f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40010000 	.word	0x40010000

08001574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001578:	b672      	cpsid	i
}
 800157a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <Error_Handler+0x8>

08001580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <HAL_MspInit+0x54>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158e:	4a11      	ldr	r2, [pc, #68]	@ (80015d4 <HAL_MspInit+0x54>)
 8001590:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001594:	6453      	str	r3, [r2, #68]	@ 0x44
 8001596:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <HAL_MspInit+0x54>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	4b0b      	ldr	r3, [pc, #44]	@ (80015d4 <HAL_MspInit+0x54>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	4a0a      	ldr	r2, [pc, #40]	@ (80015d4 <HAL_MspInit+0x54>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b2:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <HAL_MspInit+0x54>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	210f      	movs	r1, #15
 80015c2:	f06f 0001 	mvn.w	r0, #1
 80015c6:	f000 fb0f 	bl	8001be8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800

080015d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	@ 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a19      	ldr	r2, [pc, #100]	@ (800165c <HAL_I2C_MspInit+0x84>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d12c      	bne.n	8001654 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <HAL_I2C_MspInit+0x88>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a17      	ldr	r2, [pc, #92]	@ (8001660 <HAL_I2C_MspInit+0x88>)
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <HAL_I2C_MspInit+0x88>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001616:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800161a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800161c:	2312      	movs	r3, #18
 800161e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001628:	2304      	movs	r3, #4
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	480c      	ldr	r0, [pc, #48]	@ (8001664 <HAL_I2C_MspInit+0x8c>)
 8001634:	f000 fe7e 	bl	8002334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <HAL_I2C_MspInit+0x88>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001640:	4a07      	ldr	r2, [pc, #28]	@ (8001660 <HAL_I2C_MspInit+0x88>)
 8001642:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001646:	6413      	str	r3, [r2, #64]	@ 0x40
 8001648:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <HAL_I2C_MspInit+0x88>)
 800164a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001654:	bf00      	nop
 8001656:	3728      	adds	r7, #40	@ 0x28
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40005400 	.word	0x40005400
 8001660:	40023800 	.word	0x40023800
 8001664:	40020400 	.word	0x40020400

08001668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	@ 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a34      	ldr	r2, [pc, #208]	@ (8001758 <HAL_UART_MspInit+0xf0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d162      	bne.n	8001750 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	4b33      	ldr	r3, [pc, #204]	@ (800175c <HAL_UART_MspInit+0xf4>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001692:	4a32      	ldr	r2, [pc, #200]	@ (800175c <HAL_UART_MspInit+0xf4>)
 8001694:	f043 0310 	orr.w	r3, r3, #16
 8001698:	6453      	str	r3, [r2, #68]	@ 0x44
 800169a:	4b30      	ldr	r3, [pc, #192]	@ (800175c <HAL_UART_MspInit+0xf4>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169e:	f003 0310 	and.w	r3, r3, #16
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b2c      	ldr	r3, [pc, #176]	@ (800175c <HAL_UART_MspInit+0xf4>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a2b      	ldr	r2, [pc, #172]	@ (800175c <HAL_UART_MspInit+0xf4>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b29      	ldr	r3, [pc, #164]	@ (800175c <HAL_UART_MspInit+0xf4>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016c2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016d4:	2307      	movs	r3, #7
 80016d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4619      	mov	r1, r3
 80016de:	4820      	ldr	r0, [pc, #128]	@ (8001760 <HAL_UART_MspInit+0xf8>)
 80016e0:	f000 fe28 	bl	8002334 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80016e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001764 <HAL_UART_MspInit+0xfc>)
 80016e6:	4a20      	ldr	r2, [pc, #128]	@ (8001768 <HAL_UART_MspInit+0x100>)
 80016e8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80016ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001764 <HAL_UART_MspInit+0xfc>)
 80016ec:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80016f0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001764 <HAL_UART_MspInit+0xfc>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <HAL_UART_MspInit+0xfc>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016fe:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <HAL_UART_MspInit+0xfc>)
 8001700:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001704:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001706:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <HAL_UART_MspInit+0xfc>)
 8001708:	2200      	movs	r2, #0
 800170a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800170c:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <HAL_UART_MspInit+0xfc>)
 800170e:	2200      	movs	r2, #0
 8001710:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001712:	4b14      	ldr	r3, [pc, #80]	@ (8001764 <HAL_UART_MspInit+0xfc>)
 8001714:	2200      	movs	r2, #0
 8001716:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001718:	4b12      	ldr	r3, [pc, #72]	@ (8001764 <HAL_UART_MspInit+0xfc>)
 800171a:	2200      	movs	r2, #0
 800171c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800171e:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <HAL_UART_MspInit+0xfc>)
 8001720:	2200      	movs	r2, #0
 8001722:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001724:	480f      	ldr	r0, [pc, #60]	@ (8001764 <HAL_UART_MspInit+0xfc>)
 8001726:	f000 fa89 	bl	8001c3c <HAL_DMA_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001730:	f7ff ff20 	bl	8001574 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a0b      	ldr	r2, [pc, #44]	@ (8001764 <HAL_UART_MspInit+0xfc>)
 8001738:	63da      	str	r2, [r3, #60]	@ 0x3c
 800173a:	4a0a      	ldr	r2, [pc, #40]	@ (8001764 <HAL_UART_MspInit+0xfc>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	2105      	movs	r1, #5
 8001744:	2025      	movs	r0, #37	@ 0x25
 8001746:	f000 fa4f 	bl	8001be8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800174a:	2025      	movs	r0, #37	@ 0x25
 800174c:	f000 fa68 	bl	8001c20 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001750:	bf00      	nop
 8001752:	3728      	adds	r7, #40	@ 0x28
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40011000 	.word	0x40011000
 800175c:	40023800 	.word	0x40023800
 8001760:	40020000 	.word	0x40020000
 8001764:	20000118 	.word	0x20000118
 8001768:	40026440 	.word	0x40026440

0800176c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	@ 0x30
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	4b2f      	ldr	r3, [pc, #188]	@ (8001840 <HAL_InitTick+0xd4>)
 8001782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001784:	4a2e      	ldr	r2, [pc, #184]	@ (8001840 <HAL_InitTick+0xd4>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6453      	str	r3, [r2, #68]	@ 0x44
 800178c:	4b2c      	ldr	r3, [pc, #176]	@ (8001840 <HAL_InitTick+0xd4>)
 800178e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001798:	f107 020c 	add.w	r2, r7, #12
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	4611      	mov	r1, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f002 f8d8 	bl	8003958 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80017a8:	f002 f8c2 	bl	8003930 <HAL_RCC_GetPCLK2Freq>
 80017ac:	4603      	mov	r3, r0
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b4:	4a23      	ldr	r2, [pc, #140]	@ (8001844 <HAL_InitTick+0xd8>)
 80017b6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ba:	0c9b      	lsrs	r3, r3, #18
 80017bc:	3b01      	subs	r3, #1
 80017be:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80017c0:	4b21      	ldr	r3, [pc, #132]	@ (8001848 <HAL_InitTick+0xdc>)
 80017c2:	4a22      	ldr	r2, [pc, #136]	@ (800184c <HAL_InitTick+0xe0>)
 80017c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80017c6:	4b20      	ldr	r3, [pc, #128]	@ (8001848 <HAL_InitTick+0xdc>)
 80017c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80017ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001848 <HAL_InitTick+0xdc>)
 80017d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80017d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001848 <HAL_InitTick+0xdc>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017da:	4b1b      	ldr	r3, [pc, #108]	@ (8001848 <HAL_InitTick+0xdc>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e0:	4b19      	ldr	r3, [pc, #100]	@ (8001848 <HAL_InitTick+0xdc>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80017e6:	4818      	ldr	r0, [pc, #96]	@ (8001848 <HAL_InitTick+0xdc>)
 80017e8:	f002 fdb6 	bl	8004358 <HAL_TIM_Base_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80017f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d11b      	bne.n	8001832 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80017fa:	4813      	ldr	r0, [pc, #76]	@ (8001848 <HAL_InitTick+0xdc>)
 80017fc:	f002 fe06 	bl	800440c <HAL_TIM_Base_Start_IT>
 8001800:	4603      	mov	r3, r0
 8001802:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001806:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800180a:	2b00      	cmp	r3, #0
 800180c:	d111      	bne.n	8001832 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800180e:	2019      	movs	r0, #25
 8001810:	f000 fa06 	bl	8001c20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b0f      	cmp	r3, #15
 8001818:	d808      	bhi.n	800182c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800181a:	2200      	movs	r2, #0
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	2019      	movs	r0, #25
 8001820:	f000 f9e2 	bl	8001be8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001824:	4a0a      	ldr	r2, [pc, #40]	@ (8001850 <HAL_InitTick+0xe4>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e002      	b.n	8001832 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001832:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001836:	4618      	mov	r0, r3
 8001838:	3730      	adds	r7, #48	@ 0x30
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	431bde83 	.word	0x431bde83
 8001848:	20000198 	.word	0x20000198
 800184c:	40010000 	.word	0x40010000
 8001850:	20000004 	.word	0x20000004

08001854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001858:	bf00      	nop
 800185a:	e7fd      	b.n	8001858 <NMI_Handler+0x4>

0800185c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <HardFault_Handler+0x4>

08001864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <MemManage_Handler+0x4>

0800186c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <BusFault_Handler+0x4>

08001874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <UsageFault_Handler+0x4>

0800187c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001890:	4802      	ldr	r0, [pc, #8]	@ (800189c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001892:	f002 fe2b 	bl	80044ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000198 	.word	0x20000198

080018a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018a4:	4802      	ldr	r0, [pc, #8]	@ (80018b0 <USART1_IRQHandler+0x10>)
 80018a6:	f003 f8f9 	bl	8004a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200000d0 	.word	0x200000d0

080018b4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80018b8:	4802      	ldr	r0, [pc, #8]	@ (80018c4 <DMA2_Stream2_IRQHandler+0x10>)
 80018ba:	f000 faff 	bl	8001ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000118 	.word	0x20000118

080018c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d0:	4a14      	ldr	r2, [pc, #80]	@ (8001924 <_sbrk+0x5c>)
 80018d2:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <_sbrk+0x60>)
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018dc:	4b13      	ldr	r3, [pc, #76]	@ (800192c <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e4:	4b11      	ldr	r3, [pc, #68]	@ (800192c <_sbrk+0x64>)
 80018e6:	4a12      	ldr	r2, [pc, #72]	@ (8001930 <_sbrk+0x68>)
 80018e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ea:	4b10      	ldr	r3, [pc, #64]	@ (800192c <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d207      	bcs.n	8001908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f8:	f007 fbea 	bl	80090d0 <__errno>
 80018fc:	4603      	mov	r3, r0
 80018fe:	220c      	movs	r2, #12
 8001900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	e009      	b.n	800191c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001908:	4b08      	ldr	r3, [pc, #32]	@ (800192c <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190e:	4b07      	ldr	r3, [pc, #28]	@ (800192c <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	4a05      	ldr	r2, [pc, #20]	@ (800192c <_sbrk+0x64>)
 8001918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20020000 	.word	0x20020000
 8001928:	00000400 	.word	0x00000400
 800192c:	200001e0 	.word	0x200001e0
 8001930:	20004d18 	.word	0x20004d18

08001934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001938:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <SystemInit+0x20>)
 800193a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800193e:	4a05      	ldr	r2, [pc, #20]	@ (8001954 <SystemInit+0x20>)
 8001940:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001944:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001958:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001990 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800195c:	f7ff ffea 	bl	8001934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001960:	480c      	ldr	r0, [pc, #48]	@ (8001994 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001962:	490d      	ldr	r1, [pc, #52]	@ (8001998 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001964:	4a0d      	ldr	r2, [pc, #52]	@ (800199c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001968:	e002      	b.n	8001970 <LoopCopyDataInit>

0800196a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800196a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800196c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800196e:	3304      	adds	r3, #4

08001970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001974:	d3f9      	bcc.n	800196a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001976:	4a0a      	ldr	r2, [pc, #40]	@ (80019a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001978:	4c0a      	ldr	r4, [pc, #40]	@ (80019a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800197a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800197c:	e001      	b.n	8001982 <LoopFillZerobss>

0800197e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800197e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001980:	3204      	adds	r2, #4

08001982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001984:	d3fb      	bcc.n	800197e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001986:	f007 fba9 	bl	80090dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800198a:	f7fe ffb5 	bl	80008f8 <main>
  bx  lr    
 800198e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001990:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001998:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800199c:	08009a74 	.word	0x08009a74
  ldr r2, =_sbss
 80019a0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80019a4:	20004d18 	.word	0x20004d18

080019a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019a8:	e7fe      	b.n	80019a8 <ADC_IRQHandler>
	...

080019ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019b0:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <HAL_Init+0x40>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a0d      	ldr	r2, [pc, #52]	@ (80019ec <HAL_Init+0x40>)
 80019b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019bc:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <HAL_Init+0x40>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <HAL_Init+0x40>)
 80019c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c8:	4b08      	ldr	r3, [pc, #32]	@ (80019ec <HAL_Init+0x40>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a07      	ldr	r2, [pc, #28]	@ (80019ec <HAL_Init+0x40>)
 80019ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d4:	2003      	movs	r0, #3
 80019d6:	f000 f8fc 	bl	8001bd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019da:	200f      	movs	r0, #15
 80019dc:	f7ff fec6 	bl	800176c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019e0:	f7ff fdce 	bl	8001580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40023c00 	.word	0x40023c00

080019f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f4:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <HAL_IncTick+0x20>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <HAL_IncTick+0x24>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4413      	add	r3, r2
 8001a00:	4a04      	ldr	r2, [pc, #16]	@ (8001a14 <HAL_IncTick+0x24>)
 8001a02:	6013      	str	r3, [r2, #0]
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000008 	.word	0x20000008
 8001a14:	200001e4 	.word	0x200001e4

08001a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	@ (8001a2c <HAL_GetTick+0x14>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	200001e4 	.word	0x200001e4

08001a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a38:	f7ff ffee 	bl	8001a18 <HAL_GetTick>
 8001a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a48:	d005      	beq.n	8001a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a74 <HAL_Delay+0x44>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4413      	add	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a56:	bf00      	nop
 8001a58:	f7ff ffde 	bl	8001a18 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d8f7      	bhi.n	8001a58 <HAL_Delay+0x28>
  {
  }
}
 8001a68:	bf00      	nop
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000008 	.word	0x20000008

08001a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a88:	4b0c      	ldr	r3, [pc, #48]	@ (8001abc <__NVIC_SetPriorityGrouping+0x44>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a94:	4013      	ands	r3, r2
 8001a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001aa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aaa:	4a04      	ldr	r2, [pc, #16]	@ (8001abc <__NVIC_SetPriorityGrouping+0x44>)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	60d3      	str	r3, [r2, #12]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac4:	4b04      	ldr	r3, [pc, #16]	@ (8001ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	f003 0307 	and.w	r3, r3, #7
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	db0b      	blt.n	8001b06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	f003 021f 	and.w	r2, r3, #31
 8001af4:	4907      	ldr	r1, [pc, #28]	@ (8001b14 <__NVIC_EnableIRQ+0x38>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	095b      	lsrs	r3, r3, #5
 8001afc:	2001      	movs	r0, #1
 8001afe:	fa00 f202 	lsl.w	r2, r0, r2
 8001b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000e100 	.word	0xe000e100

08001b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	6039      	str	r1, [r7, #0]
 8001b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	db0a      	blt.n	8001b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	490c      	ldr	r1, [pc, #48]	@ (8001b64 <__NVIC_SetPriority+0x4c>)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	0112      	lsls	r2, r2, #4
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b40:	e00a      	b.n	8001b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4908      	ldr	r1, [pc, #32]	@ (8001b68 <__NVIC_SetPriority+0x50>)
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	3b04      	subs	r3, #4
 8001b50:	0112      	lsls	r2, r2, #4
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	440b      	add	r3, r1
 8001b56:	761a      	strb	r2, [r3, #24]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000e100 	.word	0xe000e100
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b089      	sub	sp, #36	@ 0x24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f1c3 0307 	rsb	r3, r3, #7
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	bf28      	it	cs
 8001b8a:	2304      	movcs	r3, #4
 8001b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3304      	adds	r3, #4
 8001b92:	2b06      	cmp	r3, #6
 8001b94:	d902      	bls.n	8001b9c <NVIC_EncodePriority+0x30>
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3b03      	subs	r3, #3
 8001b9a:	e000      	b.n	8001b9e <NVIC_EncodePriority+0x32>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43da      	mvns	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	401a      	ands	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbe:	43d9      	mvns	r1, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	4313      	orrs	r3, r2
         );
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3724      	adds	r7, #36	@ 0x24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ff4c 	bl	8001a78 <__NVIC_SetPriorityGrouping>
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bfa:	f7ff ff61 	bl	8001ac0 <__NVIC_GetPriorityGrouping>
 8001bfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	68b9      	ldr	r1, [r7, #8]
 8001c04:	6978      	ldr	r0, [r7, #20]
 8001c06:	f7ff ffb1 	bl	8001b6c <NVIC_EncodePriority>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c10:	4611      	mov	r1, r2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ff80 	bl	8001b18 <__NVIC_SetPriority>
}
 8001c18:	bf00      	nop
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff ff54 	bl	8001adc <__NVIC_EnableIRQ>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c48:	f7ff fee6 	bl	8001a18 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e099      	b.n	8001d8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0201 	bic.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c78:	e00f      	b.n	8001c9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c7a:	f7ff fecd 	bl	8001a18 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b05      	cmp	r3, #5
 8001c86:	d908      	bls.n	8001c9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2203      	movs	r2, #3
 8001c92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e078      	b.n	8001d8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1e8      	bne.n	8001c7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	4b38      	ldr	r3, [pc, #224]	@ (8001d94 <HAL_DMA_Init+0x158>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d107      	bne.n	8001d04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f023 0307 	bic.w	r3, r3, #7
 8001d1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d117      	bne.n	8001d5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00e      	beq.n	8001d5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 fa7b 	bl	800223c <DMA_CheckFifoParam>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2240      	movs	r2, #64	@ 0x40
 8001d50:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e016      	b.n	8001d8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 fa32 	bl	80021d0 <DMA_CalcBaseAndBitshift>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d74:	223f      	movs	r2, #63	@ 0x3f
 8001d76:	409a      	lsls	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	f010803f 	.word	0xf010803f

08001d98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001da6:	f7ff fe37 	bl	8001a18 <HAL_GetTick>
 8001daa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d008      	beq.n	8001dca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2280      	movs	r2, #128	@ 0x80
 8001dbc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e052      	b.n	8001e70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0216 	bic.w	r2, r2, #22
 8001dd8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695a      	ldr	r2, [r3, #20]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001de8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d103      	bne.n	8001dfa <HAL_DMA_Abort+0x62>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d007      	beq.n	8001e0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0208 	bic.w	r2, r2, #8
 8001e08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0201 	bic.w	r2, r2, #1
 8001e18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e1a:	e013      	b.n	8001e44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e1c:	f7ff fdfc 	bl	8001a18 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b05      	cmp	r3, #5
 8001e28:	d90c      	bls.n	8001e44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2203      	movs	r2, #3
 8001e34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e015      	b.n	8001e70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1e4      	bne.n	8001e1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e56:	223f      	movs	r2, #63	@ 0x3f
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d004      	beq.n	8001e96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2280      	movs	r2, #128	@ 0x80
 8001e90:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00c      	b.n	8001eb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2205      	movs	r2, #5
 8001e9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0201 	bic.w	r2, r2, #1
 8001eac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ec8:	4b8e      	ldr	r3, [pc, #568]	@ (8002104 <HAL_DMA_IRQHandler+0x248>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a8e      	ldr	r2, [pc, #568]	@ (8002108 <HAL_DMA_IRQHandler+0x24c>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	0a9b      	lsrs	r3, r3, #10
 8001ed4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee6:	2208      	movs	r2, #8
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d01a      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d013      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0204 	bic.w	r2, r2, #4
 8001f0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f14:	2208      	movs	r2, #8
 8001f16:	409a      	lsls	r2, r3
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f20:	f043 0201 	orr.w	r2, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	409a      	lsls	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d012      	beq.n	8001f5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00b      	beq.n	8001f5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f56:	f043 0202 	orr.w	r2, r3, #2
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f62:	2204      	movs	r2, #4
 8001f64:	409a      	lsls	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d012      	beq.n	8001f94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00b      	beq.n	8001f94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f80:	2204      	movs	r2, #4
 8001f82:	409a      	lsls	r2, r3
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f8c:	f043 0204 	orr.w	r2, r3, #4
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f98:	2210      	movs	r2, #16
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d043      	beq.n	800202c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d03c      	beq.n	800202c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb6:	2210      	movs	r2, #16
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d018      	beq.n	8001ffe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d108      	bne.n	8001fec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d024      	beq.n	800202c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	4798      	blx	r3
 8001fea:	e01f      	b.n	800202c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d01b      	beq.n	800202c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	4798      	blx	r3
 8001ffc:	e016      	b.n	800202c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002008:	2b00      	cmp	r3, #0
 800200a:	d107      	bne.n	800201c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0208 	bic.w	r2, r2, #8
 800201a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002030:	2220      	movs	r2, #32
 8002032:	409a      	lsls	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 808f 	beq.w	800215c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 8087 	beq.w	800215c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002052:	2220      	movs	r2, #32
 8002054:	409a      	lsls	r2, r3
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b05      	cmp	r3, #5
 8002064:	d136      	bne.n	80020d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0216 	bic.w	r2, r2, #22
 8002074:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	695a      	ldr	r2, [r3, #20]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002084:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	2b00      	cmp	r3, #0
 800208c:	d103      	bne.n	8002096 <HAL_DMA_IRQHandler+0x1da>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002092:	2b00      	cmp	r3, #0
 8002094:	d007      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0208 	bic.w	r2, r2, #8
 80020a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020aa:	223f      	movs	r2, #63	@ 0x3f
 80020ac:	409a      	lsls	r2, r3
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d07e      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	4798      	blx	r3
        }
        return;
 80020d2:	e079      	b.n	80021c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d01d      	beq.n	800211e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10d      	bne.n	800210c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d031      	beq.n	800215c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	4798      	blx	r3
 8002100:	e02c      	b.n	800215c <HAL_DMA_IRQHandler+0x2a0>
 8002102:	bf00      	nop
 8002104:	20000000 	.word	0x20000000
 8002108:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002110:	2b00      	cmp	r3, #0
 8002112:	d023      	beq.n	800215c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
 800211c:	e01e      	b.n	800215c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10f      	bne.n	800214c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0210 	bic.w	r2, r2, #16
 800213a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002160:	2b00      	cmp	r3, #0
 8002162:	d032      	beq.n	80021ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d022      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2205      	movs	r2, #5
 8002174:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0201 	bic.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	3301      	adds	r3, #1
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	429a      	cmp	r2, r3
 8002192:	d307      	bcc.n	80021a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f2      	bne.n	8002188 <HAL_DMA_IRQHandler+0x2cc>
 80021a2:	e000      	b.n	80021a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d005      	beq.n	80021ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	4798      	blx	r3
 80021c6:	e000      	b.n	80021ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80021c8:	bf00      	nop
    }
  }
}
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	3b10      	subs	r3, #16
 80021e0:	4a14      	ldr	r2, [pc, #80]	@ (8002234 <DMA_CalcBaseAndBitshift+0x64>)
 80021e2:	fba2 2303 	umull	r2, r3, r2, r3
 80021e6:	091b      	lsrs	r3, r3, #4
 80021e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021ea:	4a13      	ldr	r2, [pc, #76]	@ (8002238 <DMA_CalcBaseAndBitshift+0x68>)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4413      	add	r3, r2
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d909      	bls.n	8002212 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002206:	f023 0303 	bic.w	r3, r3, #3
 800220a:	1d1a      	adds	r2, r3, #4
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002210:	e007      	b.n	8002222 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800221a:	f023 0303 	bic.w	r3, r3, #3
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002226:	4618      	mov	r0, r3
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	aaaaaaab 	.word	0xaaaaaaab
 8002238:	08009a28 	.word	0x08009a28

0800223c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d11f      	bne.n	8002296 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2b03      	cmp	r3, #3
 800225a:	d856      	bhi.n	800230a <DMA_CheckFifoParam+0xce>
 800225c:	a201      	add	r2, pc, #4	@ (adr r2, 8002264 <DMA_CheckFifoParam+0x28>)
 800225e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002262:	bf00      	nop
 8002264:	08002275 	.word	0x08002275
 8002268:	08002287 	.word	0x08002287
 800226c:	08002275 	.word	0x08002275
 8002270:	0800230b 	.word	0x0800230b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002278:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d046      	beq.n	800230e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002284:	e043      	b.n	800230e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800228e:	d140      	bne.n	8002312 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002294:	e03d      	b.n	8002312 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800229e:	d121      	bne.n	80022e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d837      	bhi.n	8002316 <DMA_CheckFifoParam+0xda>
 80022a6:	a201      	add	r2, pc, #4	@ (adr r2, 80022ac <DMA_CheckFifoParam+0x70>)
 80022a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ac:	080022bd 	.word	0x080022bd
 80022b0:	080022c3 	.word	0x080022c3
 80022b4:	080022bd 	.word	0x080022bd
 80022b8:	080022d5 	.word	0x080022d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
      break;
 80022c0:	e030      	b.n	8002324 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d025      	beq.n	800231a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022d2:	e022      	b.n	800231a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80022dc:	d11f      	bne.n	800231e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022e2:	e01c      	b.n	800231e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d903      	bls.n	80022f2 <DMA_CheckFifoParam+0xb6>
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d003      	beq.n	80022f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022f0:	e018      	b.n	8002324 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	73fb      	strb	r3, [r7, #15]
      break;
 80022f6:	e015      	b.n	8002324 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00e      	beq.n	8002322 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
      break;
 8002308:	e00b      	b.n	8002322 <DMA_CheckFifoParam+0xe6>
      break;
 800230a:	bf00      	nop
 800230c:	e00a      	b.n	8002324 <DMA_CheckFifoParam+0xe8>
      break;
 800230e:	bf00      	nop
 8002310:	e008      	b.n	8002324 <DMA_CheckFifoParam+0xe8>
      break;
 8002312:	bf00      	nop
 8002314:	e006      	b.n	8002324 <DMA_CheckFifoParam+0xe8>
      break;
 8002316:	bf00      	nop
 8002318:	e004      	b.n	8002324 <DMA_CheckFifoParam+0xe8>
      break;
 800231a:	bf00      	nop
 800231c:	e002      	b.n	8002324 <DMA_CheckFifoParam+0xe8>
      break;   
 800231e:	bf00      	nop
 8002320:	e000      	b.n	8002324 <DMA_CheckFifoParam+0xe8>
      break;
 8002322:	bf00      	nop
    }
  } 
  
  return status; 
 8002324:	7bfb      	ldrb	r3, [r7, #15]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop

08002334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	@ 0x24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	e165      	b.n	800261c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002350:	2201      	movs	r2, #1
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	4013      	ands	r3, r2
 8002362:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	429a      	cmp	r2, r3
 800236a:	f040 8154 	bne.w	8002616 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	2b01      	cmp	r3, #1
 8002378:	d005      	beq.n	8002386 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002382:	2b02      	cmp	r3, #2
 8002384:	d130      	bne.n	80023e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	2203      	movs	r2, #3
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4013      	ands	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023bc:	2201      	movs	r2, #1
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	f003 0201 	and.w	r2, r3, #1
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d017      	beq.n	8002424 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	2203      	movs	r2, #3
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d123      	bne.n	8002478 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	08da      	lsrs	r2, r3, #3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3208      	adds	r2, #8
 8002438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800243c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	220f      	movs	r2, #15
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	08da      	lsrs	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3208      	adds	r2, #8
 8002472:	69b9      	ldr	r1, [r7, #24]
 8002474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	2203      	movs	r2, #3
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 0203 	and.w	r2, r3, #3
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 80ae 	beq.w	8002616 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	4b5d      	ldr	r3, [pc, #372]	@ (8002634 <HAL_GPIO_Init+0x300>)
 80024c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c2:	4a5c      	ldr	r2, [pc, #368]	@ (8002634 <HAL_GPIO_Init+0x300>)
 80024c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ca:	4b5a      	ldr	r3, [pc, #360]	@ (8002634 <HAL_GPIO_Init+0x300>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024d6:	4a58      	ldr	r2, [pc, #352]	@ (8002638 <HAL_GPIO_Init+0x304>)
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	089b      	lsrs	r3, r3, #2
 80024dc:	3302      	adds	r3, #2
 80024de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	220f      	movs	r2, #15
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4f      	ldr	r2, [pc, #316]	@ (800263c <HAL_GPIO_Init+0x308>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d025      	beq.n	800254e <HAL_GPIO_Init+0x21a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a4e      	ldr	r2, [pc, #312]	@ (8002640 <HAL_GPIO_Init+0x30c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d01f      	beq.n	800254a <HAL_GPIO_Init+0x216>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a4d      	ldr	r2, [pc, #308]	@ (8002644 <HAL_GPIO_Init+0x310>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d019      	beq.n	8002546 <HAL_GPIO_Init+0x212>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a4c      	ldr	r2, [pc, #304]	@ (8002648 <HAL_GPIO_Init+0x314>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d013      	beq.n	8002542 <HAL_GPIO_Init+0x20e>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a4b      	ldr	r2, [pc, #300]	@ (800264c <HAL_GPIO_Init+0x318>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d00d      	beq.n	800253e <HAL_GPIO_Init+0x20a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a4a      	ldr	r2, [pc, #296]	@ (8002650 <HAL_GPIO_Init+0x31c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d007      	beq.n	800253a <HAL_GPIO_Init+0x206>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a49      	ldr	r2, [pc, #292]	@ (8002654 <HAL_GPIO_Init+0x320>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d101      	bne.n	8002536 <HAL_GPIO_Init+0x202>
 8002532:	2306      	movs	r3, #6
 8002534:	e00c      	b.n	8002550 <HAL_GPIO_Init+0x21c>
 8002536:	2307      	movs	r3, #7
 8002538:	e00a      	b.n	8002550 <HAL_GPIO_Init+0x21c>
 800253a:	2305      	movs	r3, #5
 800253c:	e008      	b.n	8002550 <HAL_GPIO_Init+0x21c>
 800253e:	2304      	movs	r3, #4
 8002540:	e006      	b.n	8002550 <HAL_GPIO_Init+0x21c>
 8002542:	2303      	movs	r3, #3
 8002544:	e004      	b.n	8002550 <HAL_GPIO_Init+0x21c>
 8002546:	2302      	movs	r3, #2
 8002548:	e002      	b.n	8002550 <HAL_GPIO_Init+0x21c>
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <HAL_GPIO_Init+0x21c>
 800254e:	2300      	movs	r3, #0
 8002550:	69fa      	ldr	r2, [r7, #28]
 8002552:	f002 0203 	and.w	r2, r2, #3
 8002556:	0092      	lsls	r2, r2, #2
 8002558:	4093      	lsls	r3, r2
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002560:	4935      	ldr	r1, [pc, #212]	@ (8002638 <HAL_GPIO_Init+0x304>)
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	089b      	lsrs	r3, r3, #2
 8002566:	3302      	adds	r3, #2
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800256e:	4b3a      	ldr	r3, [pc, #232]	@ (8002658 <HAL_GPIO_Init+0x324>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002592:	4a31      	ldr	r2, [pc, #196]	@ (8002658 <HAL_GPIO_Init+0x324>)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002598:	4b2f      	ldr	r3, [pc, #188]	@ (8002658 <HAL_GPIO_Init+0x324>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025bc:	4a26      	ldr	r2, [pc, #152]	@ (8002658 <HAL_GPIO_Init+0x324>)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025c2:	4b25      	ldr	r3, [pc, #148]	@ (8002658 <HAL_GPIO_Init+0x324>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4013      	ands	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002658 <HAL_GPIO_Init+0x324>)
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002658 <HAL_GPIO_Init+0x324>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002610:	4a11      	ldr	r2, [pc, #68]	@ (8002658 <HAL_GPIO_Init+0x324>)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3301      	adds	r3, #1
 800261a:	61fb      	str	r3, [r7, #28]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	2b0f      	cmp	r3, #15
 8002620:	f67f ae96 	bls.w	8002350 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002624:	bf00      	nop
 8002626:	bf00      	nop
 8002628:	3724      	adds	r7, #36	@ 0x24
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40023800 	.word	0x40023800
 8002638:	40013800 	.word	0x40013800
 800263c:	40020000 	.word	0x40020000
 8002640:	40020400 	.word	0x40020400
 8002644:	40020800 	.word	0x40020800
 8002648:	40020c00 	.word	0x40020c00
 800264c:	40021000 	.word	0x40021000
 8002650:	40021400 	.word	0x40021400
 8002654:	40021800 	.word	0x40021800
 8002658:	40013c00 	.word	0x40013c00

0800265c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	807b      	strh	r3, [r7, #2]
 8002668:	4613      	mov	r3, r2
 800266a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800266c:	787b      	ldrb	r3, [r7, #1]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002672:	887a      	ldrh	r2, [r7, #2]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002678:	e003      	b.n	8002682 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800267a:	887b      	ldrh	r3, [r7, #2]
 800267c:	041a      	lsls	r2, r3, #16
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	619a      	str	r2, [r3, #24]
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e12b      	b.n	80028fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d106      	bne.n	80026bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7fe ff8e 	bl	80015d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2224      	movs	r2, #36	@ 0x24
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0201 	bic.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026f4:	f001 f908 	bl	8003908 <HAL_RCC_GetPCLK1Freq>
 80026f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4a81      	ldr	r2, [pc, #516]	@ (8002904 <HAL_I2C_Init+0x274>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d807      	bhi.n	8002714 <HAL_I2C_Init+0x84>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4a80      	ldr	r2, [pc, #512]	@ (8002908 <HAL_I2C_Init+0x278>)
 8002708:	4293      	cmp	r3, r2
 800270a:	bf94      	ite	ls
 800270c:	2301      	movls	r3, #1
 800270e:	2300      	movhi	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	e006      	b.n	8002722 <HAL_I2C_Init+0x92>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4a7d      	ldr	r2, [pc, #500]	@ (800290c <HAL_I2C_Init+0x27c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	bf94      	ite	ls
 800271c:	2301      	movls	r3, #1
 800271e:	2300      	movhi	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e0e7      	b.n	80028fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4a78      	ldr	r2, [pc, #480]	@ (8002910 <HAL_I2C_Init+0x280>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	0c9b      	lsrs	r3, r3, #18
 8002734:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	430a      	orrs	r2, r1
 8002748:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4a6a      	ldr	r2, [pc, #424]	@ (8002904 <HAL_I2C_Init+0x274>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d802      	bhi.n	8002764 <HAL_I2C_Init+0xd4>
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	3301      	adds	r3, #1
 8002762:	e009      	b.n	8002778 <HAL_I2C_Init+0xe8>
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800276a:	fb02 f303 	mul.w	r3, r2, r3
 800276e:	4a69      	ldr	r2, [pc, #420]	@ (8002914 <HAL_I2C_Init+0x284>)
 8002770:	fba2 2303 	umull	r2, r3, r2, r3
 8002774:	099b      	lsrs	r3, r3, #6
 8002776:	3301      	adds	r3, #1
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	430b      	orrs	r3, r1
 800277e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800278a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	495c      	ldr	r1, [pc, #368]	@ (8002904 <HAL_I2C_Init+0x274>)
 8002794:	428b      	cmp	r3, r1
 8002796:	d819      	bhi.n	80027cc <HAL_I2C_Init+0x13c>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1e59      	subs	r1, r3, #1
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80027a6:	1c59      	adds	r1, r3, #1
 80027a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80027ac:	400b      	ands	r3, r1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <HAL_I2C_Init+0x138>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1e59      	subs	r1, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80027c0:	3301      	adds	r3, #1
 80027c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c6:	e051      	b.n	800286c <HAL_I2C_Init+0x1dc>
 80027c8:	2304      	movs	r3, #4
 80027ca:	e04f      	b.n	800286c <HAL_I2C_Init+0x1dc>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d111      	bne.n	80027f8 <HAL_I2C_Init+0x168>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1e58      	subs	r0, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6859      	ldr	r1, [r3, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	440b      	add	r3, r1
 80027e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027e6:	3301      	adds	r3, #1
 80027e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	bf0c      	ite	eq
 80027f0:	2301      	moveq	r3, #1
 80027f2:	2300      	movne	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	e012      	b.n	800281e <HAL_I2C_Init+0x18e>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1e58      	subs	r0, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6859      	ldr	r1, [r3, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	0099      	lsls	r1, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	fbb0 f3f3 	udiv	r3, r0, r3
 800280e:	3301      	adds	r3, #1
 8002810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002814:	2b00      	cmp	r3, #0
 8002816:	bf0c      	ite	eq
 8002818:	2301      	moveq	r3, #1
 800281a:	2300      	movne	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_I2C_Init+0x196>
 8002822:	2301      	movs	r3, #1
 8002824:	e022      	b.n	800286c <HAL_I2C_Init+0x1dc>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10e      	bne.n	800284c <HAL_I2C_Init+0x1bc>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1e58      	subs	r0, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6859      	ldr	r1, [r3, #4]
 8002836:	460b      	mov	r3, r1
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	440b      	add	r3, r1
 800283c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002840:	3301      	adds	r3, #1
 8002842:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002846:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800284a:	e00f      	b.n	800286c <HAL_I2C_Init+0x1dc>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1e58      	subs	r0, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6859      	ldr	r1, [r3, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	0099      	lsls	r1, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002862:	3301      	adds	r3, #1
 8002864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002868:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	6809      	ldr	r1, [r1, #0]
 8002870:	4313      	orrs	r3, r2
 8002872:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69da      	ldr	r2, [r3, #28]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800289a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6911      	ldr	r1, [r2, #16]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68d2      	ldr	r2, [r2, #12]
 80028a6:	4311      	orrs	r1, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	430b      	orrs	r3, r1
 80028ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695a      	ldr	r2, [r3, #20]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	000186a0 	.word	0x000186a0
 8002908:	001e847f 	.word	0x001e847f
 800290c:	003d08ff 	.word	0x003d08ff
 8002910:	431bde83 	.word	0x431bde83
 8002914:	10624dd3 	.word	0x10624dd3

08002918 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af02      	add	r7, sp, #8
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	607a      	str	r2, [r7, #4]
 8002922:	461a      	mov	r2, r3
 8002924:	460b      	mov	r3, r1
 8002926:	817b      	strh	r3, [r7, #10]
 8002928:	4613      	mov	r3, r2
 800292a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800292c:	f7ff f874 	bl	8001a18 <HAL_GetTick>
 8002930:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b20      	cmp	r3, #32
 800293c:	f040 80e0 	bne.w	8002b00 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	2319      	movs	r3, #25
 8002946:	2201      	movs	r2, #1
 8002948:	4970      	ldr	r1, [pc, #448]	@ (8002b0c <HAL_I2C_Master_Transmit+0x1f4>)
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 fc64 	bl	8003218 <I2C_WaitOnFlagUntilTimeout>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002956:	2302      	movs	r3, #2
 8002958:	e0d3      	b.n	8002b02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_I2C_Master_Transmit+0x50>
 8002964:	2302      	movs	r3, #2
 8002966:	e0cc      	b.n	8002b02 <HAL_I2C_Master_Transmit+0x1ea>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b01      	cmp	r3, #1
 800297c:	d007      	beq.n	800298e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f042 0201 	orr.w	r2, r2, #1
 800298c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800299c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2221      	movs	r2, #33	@ 0x21
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2210      	movs	r2, #16
 80029aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	893a      	ldrh	r2, [r7, #8]
 80029be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	4a50      	ldr	r2, [pc, #320]	@ (8002b10 <HAL_I2C_Master_Transmit+0x1f8>)
 80029ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029d0:	8979      	ldrh	r1, [r7, #10]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	6a3a      	ldr	r2, [r7, #32]
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 face 	bl	8002f78 <I2C_MasterRequestWrite>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e08d      	b.n	8002b02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e6:	2300      	movs	r3, #0
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029fc:	e066      	b.n	8002acc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	6a39      	ldr	r1, [r7, #32]
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 fd22 	bl	800344c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00d      	beq.n	8002a2a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d107      	bne.n	8002a26 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e06b      	b.n	8002b02 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2e:	781a      	ldrb	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d11b      	bne.n	8002aa0 <HAL_I2C_Master_Transmit+0x188>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d017      	beq.n	8002aa0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	781a      	ldrb	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	6a39      	ldr	r1, [r7, #32]
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 fd19 	bl	80034dc <I2C_WaitOnBTFFlagUntilTimeout>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00d      	beq.n	8002acc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d107      	bne.n	8002ac8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ac6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e01a      	b.n	8002b02 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d194      	bne.n	80029fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	e000      	b.n	8002b02 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b00:	2302      	movs	r3, #2
  }
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	00100002 	.word	0x00100002
 8002b10:	ffff0000 	.word	0xffff0000

08002b14 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08c      	sub	sp, #48	@ 0x30
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	607a      	str	r2, [r7, #4]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	460b      	mov	r3, r1
 8002b22:	817b      	strh	r3, [r7, #10]
 8002b24:	4613      	mov	r3, r2
 8002b26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b28:	f7fe ff76 	bl	8001a18 <HAL_GetTick>
 8002b2c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	f040 8217 	bne.w	8002f6a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	2319      	movs	r3, #25
 8002b42:	2201      	movs	r2, #1
 8002b44:	497c      	ldr	r1, [pc, #496]	@ (8002d38 <HAL_I2C_Master_Receive+0x224>)
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 fb66 	bl	8003218 <I2C_WaitOnFlagUntilTimeout>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002b52:	2302      	movs	r3, #2
 8002b54:	e20a      	b.n	8002f6c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <HAL_I2C_Master_Receive+0x50>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e203      	b.n	8002f6c <HAL_I2C_Master_Receive+0x458>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d007      	beq.n	8002b8a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f042 0201 	orr.w	r2, r2, #1
 8002b88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2222      	movs	r2, #34	@ 0x22
 8002b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2210      	movs	r2, #16
 8002ba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	893a      	ldrh	r2, [r7, #8]
 8002bba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4a5c      	ldr	r2, [pc, #368]	@ (8002d3c <HAL_I2C_Master_Receive+0x228>)
 8002bca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bcc:	8979      	ldrh	r1, [r7, #10]
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 fa52 	bl	800307c <I2C_MasterRequestRead>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e1c4      	b.n	8002f6c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d113      	bne.n	8002c12 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bea:	2300      	movs	r3, #0
 8002bec:	623b      	str	r3, [r7, #32]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	623b      	str	r3, [r7, #32]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	623b      	str	r3, [r7, #32]
 8002bfe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	e198      	b.n	8002f44 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d11b      	bne.n	8002c52 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	61fb      	str	r3, [r7, #28]
 8002c3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	e178      	b.n	8002f44 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d11b      	bne.n	8002c92 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	61bb      	str	r3, [r7, #24]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	61bb      	str	r3, [r7, #24]
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	e158      	b.n	8002f44 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ca0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	617b      	str	r3, [r7, #20]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	617b      	str	r3, [r7, #20]
 8002cb6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002cb8:	e144      	b.n	8002f44 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cbe:	2b03      	cmp	r3, #3
 8002cc0:	f200 80f1 	bhi.w	8002ea6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d123      	bne.n	8002d14 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 fc4b 	bl	800356c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e145      	b.n	8002f6c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691a      	ldr	r2, [r3, #16]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d12:	e117      	b.n	8002f44 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d14e      	bne.n	8002dba <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d22:	2200      	movs	r2, #0
 8002d24:	4906      	ldr	r1, [pc, #24]	@ (8002d40 <HAL_I2C_Master_Receive+0x22c>)
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 fa76 	bl	8003218 <I2C_WaitOnFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d008      	beq.n	8002d44 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e11a      	b.n	8002f6c <HAL_I2C_Master_Receive+0x458>
 8002d36:	bf00      	nop
 8002d38:	00100002 	.word	0x00100002
 8002d3c:	ffff0000 	.word	0xffff0000
 8002d40:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002db8:	e0c4      	b.n	8002f44 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	496c      	ldr	r1, [pc, #432]	@ (8002f74 <HAL_I2C_Master_Receive+0x460>)
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 fa27 	bl	8003218 <I2C_WaitOnFlagUntilTimeout>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e0cb      	b.n	8002f6c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002de2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691a      	ldr	r2, [r3, #16]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	4955      	ldr	r1, [pc, #340]	@ (8002f74 <HAL_I2C_Master_Receive+0x460>)
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 f9f9 	bl	8003218 <I2C_WaitOnFlagUntilTimeout>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e09d      	b.n	8002f6c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691a      	ldr	r2, [r3, #16]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ea4:	e04e      	b.n	8002f44 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ea8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 fb5e 	bl	800356c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e058      	b.n	8002f6c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d124      	bne.n	8002f44 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	d107      	bne.n	8002f12 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f10:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1c:	b2d2      	uxtb	r2, r2
 8002f1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f47f aeb6 	bne.w	8002cba <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	e000      	b.n	8002f6c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002f6a:	2302      	movs	r3, #2
  }
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3728      	adds	r7, #40	@ 0x28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	00010004 	.word	0x00010004

08002f78 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	460b      	mov	r3, r1
 8002f86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d006      	beq.n	8002fa2 <I2C_MasterRequestWrite+0x2a>
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d003      	beq.n	8002fa2 <I2C_MasterRequestWrite+0x2a>
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002fa0:	d108      	bne.n	8002fb4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	e00b      	b.n	8002fcc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb8:	2b12      	cmp	r3, #18
 8002fba:	d107      	bne.n	8002fcc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f91d 	bl	8003218 <I2C_WaitOnFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00d      	beq.n	8003000 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ff2:	d103      	bne.n	8002ffc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ffa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e035      	b.n	800306c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003008:	d108      	bne.n	800301c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800300a:	897b      	ldrh	r3, [r7, #10]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	461a      	mov	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003018:	611a      	str	r2, [r3, #16]
 800301a:	e01b      	b.n	8003054 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800301c:	897b      	ldrh	r3, [r7, #10]
 800301e:	11db      	asrs	r3, r3, #7
 8003020:	b2db      	uxtb	r3, r3
 8003022:	f003 0306 	and.w	r3, r3, #6
 8003026:	b2db      	uxtb	r3, r3
 8003028:	f063 030f 	orn	r3, r3, #15
 800302c:	b2da      	uxtb	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	490e      	ldr	r1, [pc, #56]	@ (8003074 <I2C_MasterRequestWrite+0xfc>)
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 f966 	bl	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e010      	b.n	800306c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800304a:	897b      	ldrh	r3, [r7, #10]
 800304c:	b2da      	uxtb	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	4907      	ldr	r1, [pc, #28]	@ (8003078 <I2C_MasterRequestWrite+0x100>)
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f956 	bl	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	00010008 	.word	0x00010008
 8003078:	00010002 	.word	0x00010002

0800307c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b088      	sub	sp, #32
 8003080:	af02      	add	r7, sp, #8
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	607a      	str	r2, [r7, #4]
 8003086:	603b      	str	r3, [r7, #0]
 8003088:	460b      	mov	r3, r1
 800308a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003090:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030a0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d006      	beq.n	80030b6 <I2C_MasterRequestRead+0x3a>
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d003      	beq.n	80030b6 <I2C_MasterRequestRead+0x3a>
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030b4:	d108      	bne.n	80030c8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	e00b      	b.n	80030e0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030cc:	2b11      	cmp	r3, #17
 80030ce:	d107      	bne.n	80030e0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 f893 	bl	8003218 <I2C_WaitOnFlagUntilTimeout>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00d      	beq.n	8003114 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003102:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003106:	d103      	bne.n	8003110 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800310e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e079      	b.n	8003208 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800311c:	d108      	bne.n	8003130 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800311e:	897b      	ldrh	r3, [r7, #10]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	b2da      	uxtb	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	611a      	str	r2, [r3, #16]
 800312e:	e05f      	b.n	80031f0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003130:	897b      	ldrh	r3, [r7, #10]
 8003132:	11db      	asrs	r3, r3, #7
 8003134:	b2db      	uxtb	r3, r3
 8003136:	f003 0306 	and.w	r3, r3, #6
 800313a:	b2db      	uxtb	r3, r3
 800313c:	f063 030f 	orn	r3, r3, #15
 8003140:	b2da      	uxtb	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	4930      	ldr	r1, [pc, #192]	@ (8003210 <I2C_MasterRequestRead+0x194>)
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 f8dc 	bl	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e054      	b.n	8003208 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800315e:	897b      	ldrh	r3, [r7, #10]
 8003160:	b2da      	uxtb	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	4929      	ldr	r1, [pc, #164]	@ (8003214 <I2C_MasterRequestRead+0x198>)
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f8cc 	bl	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e044      	b.n	8003208 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800317e:	2300      	movs	r3, #0
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	613b      	str	r3, [r7, #16]
 8003192:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031a2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 f831 	bl	8003218 <I2C_WaitOnFlagUntilTimeout>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00d      	beq.n	80031d8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031ca:	d103      	bne.n	80031d4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031d2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e017      	b.n	8003208 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80031d8:	897b      	ldrh	r3, [r7, #10]
 80031da:	11db      	asrs	r3, r3, #7
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	f003 0306 	and.w	r3, r3, #6
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	f063 030e 	orn	r3, r3, #14
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	4907      	ldr	r1, [pc, #28]	@ (8003214 <I2C_MasterRequestRead+0x198>)
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f888 	bl	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	00010008 	.word	0x00010008
 8003214:	00010002 	.word	0x00010002

08003218 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	4613      	mov	r3, r2
 8003226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003228:	e048      	b.n	80032bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003230:	d044      	beq.n	80032bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003232:	f7fe fbf1 	bl	8001a18 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d302      	bcc.n	8003248 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d139      	bne.n	80032bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	0c1b      	lsrs	r3, r3, #16
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b01      	cmp	r3, #1
 8003250:	d10d      	bne.n	800326e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	43da      	mvns	r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	4013      	ands	r3, r2
 800325e:	b29b      	uxth	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	bf0c      	ite	eq
 8003264:	2301      	moveq	r3, #1
 8003266:	2300      	movne	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	e00c      	b.n	8003288 <I2C_WaitOnFlagUntilTimeout+0x70>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	43da      	mvns	r2, r3
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	4013      	ands	r3, r2
 800327a:	b29b      	uxth	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	bf0c      	ite	eq
 8003280:	2301      	moveq	r3, #1
 8003282:	2300      	movne	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	461a      	mov	r2, r3
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	429a      	cmp	r2, r3
 800328c:	d116      	bne.n	80032bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a8:	f043 0220 	orr.w	r2, r3, #32
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e023      	b.n	8003304 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	0c1b      	lsrs	r3, r3, #16
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d10d      	bne.n	80032e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	43da      	mvns	r2, r3
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	4013      	ands	r3, r2
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	bf0c      	ite	eq
 80032d8:	2301      	moveq	r3, #1
 80032da:	2300      	movne	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	461a      	mov	r2, r3
 80032e0:	e00c      	b.n	80032fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	43da      	mvns	r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	4013      	ands	r3, r2
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	bf0c      	ite	eq
 80032f4:	2301      	moveq	r3, #1
 80032f6:	2300      	movne	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	461a      	mov	r2, r3
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d093      	beq.n	800322a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800331a:	e071      	b.n	8003400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800332a:	d123      	bne.n	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800333a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003344:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003360:	f043 0204 	orr.w	r2, r3, #4
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e067      	b.n	8003444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337a:	d041      	beq.n	8003400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337c:	f7fe fb4c 	bl	8001a18 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	429a      	cmp	r2, r3
 800338a:	d302      	bcc.n	8003392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d136      	bne.n	8003400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	0c1b      	lsrs	r3, r3, #16
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b01      	cmp	r3, #1
 800339a:	d10c      	bne.n	80033b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	43da      	mvns	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4013      	ands	r3, r2
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	bf14      	ite	ne
 80033ae:	2301      	movne	r3, #1
 80033b0:	2300      	moveq	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	e00b      	b.n	80033ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	43da      	mvns	r2, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	4013      	ands	r3, r2
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bf14      	ite	ne
 80033c8:	2301      	movne	r3, #1
 80033ca:	2300      	moveq	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d016      	beq.n	8003400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ec:	f043 0220 	orr.w	r2, r3, #32
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e021      	b.n	8003444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	0c1b      	lsrs	r3, r3, #16
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b01      	cmp	r3, #1
 8003408:	d10c      	bne.n	8003424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	43da      	mvns	r2, r3
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	4013      	ands	r3, r2
 8003416:	b29b      	uxth	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	bf14      	ite	ne
 800341c:	2301      	movne	r3, #1
 800341e:	2300      	moveq	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	e00b      	b.n	800343c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	43da      	mvns	r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	4013      	ands	r3, r2
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	bf14      	ite	ne
 8003436:	2301      	movne	r3, #1
 8003438:	2300      	moveq	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	f47f af6d 	bne.w	800331c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003458:	e034      	b.n	80034c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 f8e3 	bl	8003626 <I2C_IsAcknowledgeFailed>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e034      	b.n	80034d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003470:	d028      	beq.n	80034c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003472:	f7fe fad1 	bl	8001a18 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	429a      	cmp	r2, r3
 8003480:	d302      	bcc.n	8003488 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d11d      	bne.n	80034c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003492:	2b80      	cmp	r3, #128	@ 0x80
 8003494:	d016      	beq.n	80034c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b0:	f043 0220 	orr.w	r2, r3, #32
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e007      	b.n	80034d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ce:	2b80      	cmp	r3, #128	@ 0x80
 80034d0:	d1c3      	bne.n	800345a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034e8:	e034      	b.n	8003554 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 f89b 	bl	8003626 <I2C_IsAcknowledgeFailed>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e034      	b.n	8003564 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003500:	d028      	beq.n	8003554 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003502:	f7fe fa89 	bl	8001a18 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	429a      	cmp	r2, r3
 8003510:	d302      	bcc.n	8003518 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d11d      	bne.n	8003554 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b04      	cmp	r3, #4
 8003524:	d016      	beq.n	8003554 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003540:	f043 0220 	orr.w	r2, r3, #32
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e007      	b.n	8003564 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	f003 0304 	and.w	r3, r3, #4
 800355e:	2b04      	cmp	r3, #4
 8003560:	d1c3      	bne.n	80034ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003578:	e049      	b.n	800360e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	f003 0310 	and.w	r3, r3, #16
 8003584:	2b10      	cmp	r3, #16
 8003586:	d119      	bne.n	80035bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f06f 0210 	mvn.w	r2, #16
 8003590:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e030      	b.n	800361e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035bc:	f7fe fa2c 	bl	8001a18 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d302      	bcc.n	80035d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d11d      	bne.n	800360e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035dc:	2b40      	cmp	r3, #64	@ 0x40
 80035de:	d016      	beq.n	800360e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fa:	f043 0220 	orr.w	r2, r3, #32
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e007      	b.n	800361e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003618:	2b40      	cmp	r3, #64	@ 0x40
 800361a:	d1ae      	bne.n	800357a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003638:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800363c:	d11b      	bne.n	8003676 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003646:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003662:	f043 0204 	orr.w	r2, r3, #4
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	603b      	str	r3, [r7, #0]
 8003692:	4b20      	ldr	r3, [pc, #128]	@ (8003714 <HAL_PWREx_EnableOverDrive+0x90>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003696:	4a1f      	ldr	r2, [pc, #124]	@ (8003714 <HAL_PWREx_EnableOverDrive+0x90>)
 8003698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800369c:	6413      	str	r3, [r2, #64]	@ 0x40
 800369e:	4b1d      	ldr	r3, [pc, #116]	@ (8003714 <HAL_PWREx_EnableOverDrive+0x90>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80036aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003718 <HAL_PWREx_EnableOverDrive+0x94>)
 80036ac:	2201      	movs	r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036b0:	f7fe f9b2 	bl	8001a18 <HAL_GetTick>
 80036b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036b6:	e009      	b.n	80036cc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036b8:	f7fe f9ae 	bl	8001a18 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036c6:	d901      	bls.n	80036cc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e01f      	b.n	800370c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036cc:	4b13      	ldr	r3, [pc, #76]	@ (800371c <HAL_PWREx_EnableOverDrive+0x98>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036d8:	d1ee      	bne.n	80036b8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80036da:	4b11      	ldr	r3, [pc, #68]	@ (8003720 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036dc:	2201      	movs	r2, #1
 80036de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036e0:	f7fe f99a 	bl	8001a18 <HAL_GetTick>
 80036e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036e6:	e009      	b.n	80036fc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036e8:	f7fe f996 	bl	8001a18 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036f6:	d901      	bls.n	80036fc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e007      	b.n	800370c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036fc:	4b07      	ldr	r3, [pc, #28]	@ (800371c <HAL_PWREx_EnableOverDrive+0x98>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003704:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003708:	d1ee      	bne.n	80036e8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40023800 	.word	0x40023800
 8003718:	420e0040 	.word	0x420e0040
 800371c:	40007000 	.word	0x40007000
 8003720:	420e0044 	.word	0x420e0044

08003724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0cc      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003738:	4b68      	ldr	r3, [pc, #416]	@ (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d90c      	bls.n	8003760 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003746:	4b65      	ldr	r3, [pc, #404]	@ (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800374e:	4b63      	ldr	r3, [pc, #396]	@ (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e0b8      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d020      	beq.n	80037ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003778:	4b59      	ldr	r3, [pc, #356]	@ (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	4a58      	ldr	r2, [pc, #352]	@ (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003782:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b00      	cmp	r3, #0
 800378e:	d005      	beq.n	800379c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003790:	4b53      	ldr	r3, [pc, #332]	@ (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	4a52      	ldr	r2, [pc, #328]	@ (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800379a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800379c:	4b50      	ldr	r3, [pc, #320]	@ (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	494d      	ldr	r1, [pc, #308]	@ (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d044      	beq.n	8003844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d107      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c2:	4b47      	ldr	r3, [pc, #284]	@ (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d119      	bne.n	8003802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e07f      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d003      	beq.n	80037e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d107      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e2:	4b3f      	ldr	r3, [pc, #252]	@ (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d109      	bne.n	8003802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e06f      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f2:	4b3b      	ldr	r3, [pc, #236]	@ (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e067      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003802:	4b37      	ldr	r3, [pc, #220]	@ (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f023 0203 	bic.w	r2, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	4934      	ldr	r1, [pc, #208]	@ (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003810:	4313      	orrs	r3, r2
 8003812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003814:	f7fe f900 	bl	8001a18 <HAL_GetTick>
 8003818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381a:	e00a      	b.n	8003832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800381c:	f7fe f8fc 	bl	8001a18 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800382a:	4293      	cmp	r3, r2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e04f      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003832:	4b2b      	ldr	r3, [pc, #172]	@ (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 020c 	and.w	r2, r3, #12
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	429a      	cmp	r2, r3
 8003842:	d1eb      	bne.n	800381c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003844:	4b25      	ldr	r3, [pc, #148]	@ (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 030f 	and.w	r3, r3, #15
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d20c      	bcs.n	800386c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003852:	4b22      	ldr	r3, [pc, #136]	@ (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800385a:	4b20      	ldr	r3, [pc, #128]	@ (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d001      	beq.n	800386c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e032      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003878:	4b19      	ldr	r3, [pc, #100]	@ (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	4916      	ldr	r1, [pc, #88]	@ (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	4313      	orrs	r3, r2
 8003888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d009      	beq.n	80038aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003896:	4b12      	ldr	r3, [pc, #72]	@ (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	490e      	ldr	r1, [pc, #56]	@ (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038aa:	f000 f887 	bl	80039bc <HAL_RCC_GetSysClockFreq>
 80038ae:	4602      	mov	r2, r0
 80038b0:	4b0b      	ldr	r3, [pc, #44]	@ (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	091b      	lsrs	r3, r3, #4
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	490a      	ldr	r1, [pc, #40]	@ (80038e4 <HAL_RCC_ClockConfig+0x1c0>)
 80038bc:	5ccb      	ldrb	r3, [r1, r3]
 80038be:	fa22 f303 	lsr.w	r3, r2, r3
 80038c2:	4a09      	ldr	r2, [pc, #36]	@ (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 80038c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80038c6:	4b09      	ldr	r3, [pc, #36]	@ (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fd ff4e 	bl	800176c <HAL_InitTick>

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40023c00 	.word	0x40023c00
 80038e0:	40023800 	.word	0x40023800
 80038e4:	08009a10 	.word	0x08009a10
 80038e8:	20000000 	.word	0x20000000
 80038ec:	20000004 	.word	0x20000004

080038f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f4:	4b03      	ldr	r3, [pc, #12]	@ (8003904 <HAL_RCC_GetHCLKFreq+0x14>)
 80038f6:	681b      	ldr	r3, [r3, #0]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	20000000 	.word	0x20000000

08003908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800390c:	f7ff fff0 	bl	80038f0 <HAL_RCC_GetHCLKFreq>
 8003910:	4602      	mov	r2, r0
 8003912:	4b05      	ldr	r3, [pc, #20]	@ (8003928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	0a9b      	lsrs	r3, r3, #10
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	4903      	ldr	r1, [pc, #12]	@ (800392c <HAL_RCC_GetPCLK1Freq+0x24>)
 800391e:	5ccb      	ldrb	r3, [r1, r3]
 8003920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003924:	4618      	mov	r0, r3
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40023800 	.word	0x40023800
 800392c:	08009a20 	.word	0x08009a20

08003930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003934:	f7ff ffdc 	bl	80038f0 <HAL_RCC_GetHCLKFreq>
 8003938:	4602      	mov	r2, r0
 800393a:	4b05      	ldr	r3, [pc, #20]	@ (8003950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	0b5b      	lsrs	r3, r3, #13
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	4903      	ldr	r1, [pc, #12]	@ (8003954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003946:	5ccb      	ldrb	r3, [r1, r3]
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800394c:	4618      	mov	r0, r3
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40023800 	.word	0x40023800
 8003954:	08009a20 	.word	0x08009a20

08003958 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	220f      	movs	r2, #15
 8003966:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003968:	4b12      	ldr	r3, [pc, #72]	@ (80039b4 <HAL_RCC_GetClockConfig+0x5c>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 0203 	and.w	r2, r3, #3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003974:	4b0f      	ldr	r3, [pc, #60]	@ (80039b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003980:	4b0c      	ldr	r3, [pc, #48]	@ (80039b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800398c:	4b09      	ldr	r3, [pc, #36]	@ (80039b4 <HAL_RCC_GetClockConfig+0x5c>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	08db      	lsrs	r3, r3, #3
 8003992:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800399a:	4b07      	ldr	r3, [pc, #28]	@ (80039b8 <HAL_RCC_GetClockConfig+0x60>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 020f 	and.w	r2, r3, #15
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	601a      	str	r2, [r3, #0]
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40023800 	.word	0x40023800
 80039b8:	40023c00 	.word	0x40023c00

080039bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039c0:	b0ae      	sub	sp, #184	@ 0xb8
 80039c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039e2:	4bcb      	ldr	r3, [pc, #812]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0x354>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
 80039ea:	2b0c      	cmp	r3, #12
 80039ec:	f200 8206 	bhi.w	8003dfc <HAL_RCC_GetSysClockFreq+0x440>
 80039f0:	a201      	add	r2, pc, #4	@ (adr r2, 80039f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80039f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f6:	bf00      	nop
 80039f8:	08003a2d 	.word	0x08003a2d
 80039fc:	08003dfd 	.word	0x08003dfd
 8003a00:	08003dfd 	.word	0x08003dfd
 8003a04:	08003dfd 	.word	0x08003dfd
 8003a08:	08003a35 	.word	0x08003a35
 8003a0c:	08003dfd 	.word	0x08003dfd
 8003a10:	08003dfd 	.word	0x08003dfd
 8003a14:	08003dfd 	.word	0x08003dfd
 8003a18:	08003a3d 	.word	0x08003a3d
 8003a1c:	08003dfd 	.word	0x08003dfd
 8003a20:	08003dfd 	.word	0x08003dfd
 8003a24:	08003dfd 	.word	0x08003dfd
 8003a28:	08003c2d 	.word	0x08003c2d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a2c:	4bb9      	ldr	r3, [pc, #740]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a32:	e1e7      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a34:	4bb8      	ldr	r3, [pc, #736]	@ (8003d18 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003a36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a3a:	e1e3      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a3c:	4bb4      	ldr	r3, [pc, #720]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a48:	4bb1      	ldr	r3, [pc, #708]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d071      	beq.n	8003b38 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a54:	4bae      	ldr	r3, [pc, #696]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	099b      	lsrs	r3, r3, #6
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a60:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003a64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a70:	2300      	movs	r3, #0
 8003a72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a7a:	4622      	mov	r2, r4
 8003a7c:	462b      	mov	r3, r5
 8003a7e:	f04f 0000 	mov.w	r0, #0
 8003a82:	f04f 0100 	mov.w	r1, #0
 8003a86:	0159      	lsls	r1, r3, #5
 8003a88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a8c:	0150      	lsls	r0, r2, #5
 8003a8e:	4602      	mov	r2, r0
 8003a90:	460b      	mov	r3, r1
 8003a92:	4621      	mov	r1, r4
 8003a94:	1a51      	subs	r1, r2, r1
 8003a96:	6439      	str	r1, [r7, #64]	@ 0x40
 8003a98:	4629      	mov	r1, r5
 8003a9a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003aac:	4649      	mov	r1, r9
 8003aae:	018b      	lsls	r3, r1, #6
 8003ab0:	4641      	mov	r1, r8
 8003ab2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ab6:	4641      	mov	r1, r8
 8003ab8:	018a      	lsls	r2, r1, #6
 8003aba:	4641      	mov	r1, r8
 8003abc:	1a51      	subs	r1, r2, r1
 8003abe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ac0:	4649      	mov	r1, r9
 8003ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003ad4:	4649      	mov	r1, r9
 8003ad6:	00cb      	lsls	r3, r1, #3
 8003ad8:	4641      	mov	r1, r8
 8003ada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ade:	4641      	mov	r1, r8
 8003ae0:	00ca      	lsls	r2, r1, #3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	4622      	mov	r2, r4
 8003aea:	189b      	adds	r3, r3, r2
 8003aec:	633b      	str	r3, [r7, #48]	@ 0x30
 8003aee:	462b      	mov	r3, r5
 8003af0:	460a      	mov	r2, r1
 8003af2:	eb42 0303 	adc.w	r3, r2, r3
 8003af6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b04:	4629      	mov	r1, r5
 8003b06:	024b      	lsls	r3, r1, #9
 8003b08:	4621      	mov	r1, r4
 8003b0a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b0e:	4621      	mov	r1, r4
 8003b10:	024a      	lsls	r2, r1, #9
 8003b12:	4610      	mov	r0, r2
 8003b14:	4619      	mov	r1, r3
 8003b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b24:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003b28:	f7fc fbca 	bl	80002c0 <__aeabi_uldivmod>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4613      	mov	r3, r2
 8003b32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b36:	e067      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b38:	4b75      	ldr	r3, [pc, #468]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	099b      	lsrs	r3, r3, #6
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b44:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003b48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b50:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b52:	2300      	movs	r3, #0
 8003b54:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b56:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003b5a:	4622      	mov	r2, r4
 8003b5c:	462b      	mov	r3, r5
 8003b5e:	f04f 0000 	mov.w	r0, #0
 8003b62:	f04f 0100 	mov.w	r1, #0
 8003b66:	0159      	lsls	r1, r3, #5
 8003b68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b6c:	0150      	lsls	r0, r2, #5
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	4621      	mov	r1, r4
 8003b74:	1a51      	subs	r1, r2, r1
 8003b76:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003b78:	4629      	mov	r1, r5
 8003b7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003b8c:	4649      	mov	r1, r9
 8003b8e:	018b      	lsls	r3, r1, #6
 8003b90:	4641      	mov	r1, r8
 8003b92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b96:	4641      	mov	r1, r8
 8003b98:	018a      	lsls	r2, r1, #6
 8003b9a:	4641      	mov	r1, r8
 8003b9c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ba0:	4649      	mov	r1, r9
 8003ba2:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bb2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bba:	4692      	mov	sl, r2
 8003bbc:	469b      	mov	fp, r3
 8003bbe:	4623      	mov	r3, r4
 8003bc0:	eb1a 0303 	adds.w	r3, sl, r3
 8003bc4:	623b      	str	r3, [r7, #32]
 8003bc6:	462b      	mov	r3, r5
 8003bc8:	eb4b 0303 	adc.w	r3, fp, r3
 8003bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003bda:	4629      	mov	r1, r5
 8003bdc:	028b      	lsls	r3, r1, #10
 8003bde:	4621      	mov	r1, r4
 8003be0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003be4:	4621      	mov	r1, r4
 8003be6:	028a      	lsls	r2, r1, #10
 8003be8:	4610      	mov	r0, r2
 8003bea:	4619      	mov	r1, r3
 8003bec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bf4:	677a      	str	r2, [r7, #116]	@ 0x74
 8003bf6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003bfa:	f7fc fb61 	bl	80002c0 <__aeabi_uldivmod>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	460b      	mov	r3, r1
 8003c02:	4613      	mov	r3, r2
 8003c04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c08:	4b41      	ldr	r3, [pc, #260]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	0c1b      	lsrs	r3, r3, #16
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	3301      	adds	r3, #1
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003c1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c2a:	e0eb      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c2c:	4b38      	ldr	r3, [pc, #224]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c38:	4b35      	ldr	r3, [pc, #212]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d06b      	beq.n	8003d1c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c44:	4b32      	ldr	r3, [pc, #200]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	099b      	lsrs	r3, r3, #6
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c56:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c58:	2300      	movs	r3, #0
 8003c5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c5c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003c60:	4622      	mov	r2, r4
 8003c62:	462b      	mov	r3, r5
 8003c64:	f04f 0000 	mov.w	r0, #0
 8003c68:	f04f 0100 	mov.w	r1, #0
 8003c6c:	0159      	lsls	r1, r3, #5
 8003c6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c72:	0150      	lsls	r0, r2, #5
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4621      	mov	r1, r4
 8003c7a:	1a51      	subs	r1, r2, r1
 8003c7c:	61b9      	str	r1, [r7, #24]
 8003c7e:	4629      	mov	r1, r5
 8003c80:	eb63 0301 	sbc.w	r3, r3, r1
 8003c84:	61fb      	str	r3, [r7, #28]
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003c92:	4659      	mov	r1, fp
 8003c94:	018b      	lsls	r3, r1, #6
 8003c96:	4651      	mov	r1, sl
 8003c98:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c9c:	4651      	mov	r1, sl
 8003c9e:	018a      	lsls	r2, r1, #6
 8003ca0:	4651      	mov	r1, sl
 8003ca2:	ebb2 0801 	subs.w	r8, r2, r1
 8003ca6:	4659      	mov	r1, fp
 8003ca8:	eb63 0901 	sbc.w	r9, r3, r1
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cb8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cbc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cc0:	4690      	mov	r8, r2
 8003cc2:	4699      	mov	r9, r3
 8003cc4:	4623      	mov	r3, r4
 8003cc6:	eb18 0303 	adds.w	r3, r8, r3
 8003cca:	613b      	str	r3, [r7, #16]
 8003ccc:	462b      	mov	r3, r5
 8003cce:	eb49 0303 	adc.w	r3, r9, r3
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003ce0:	4629      	mov	r1, r5
 8003ce2:	024b      	lsls	r3, r1, #9
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cea:	4621      	mov	r1, r4
 8003cec:	024a      	lsls	r2, r1, #9
 8003cee:	4610      	mov	r0, r2
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003cfa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003cfc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d00:	f7fc fade 	bl	80002c0 <__aeabi_uldivmod>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4613      	mov	r3, r2
 8003d0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d0e:	e065      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0x420>
 8003d10:	40023800 	.word	0x40023800
 8003d14:	00f42400 	.word	0x00f42400
 8003d18:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d1c:	4b3d      	ldr	r3, [pc, #244]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	099b      	lsrs	r3, r3, #6
 8003d22:	2200      	movs	r2, #0
 8003d24:	4618      	mov	r0, r3
 8003d26:	4611      	mov	r1, r2
 8003d28:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d2e:	2300      	movs	r3, #0
 8003d30:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d32:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003d36:	4642      	mov	r2, r8
 8003d38:	464b      	mov	r3, r9
 8003d3a:	f04f 0000 	mov.w	r0, #0
 8003d3e:	f04f 0100 	mov.w	r1, #0
 8003d42:	0159      	lsls	r1, r3, #5
 8003d44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d48:	0150      	lsls	r0, r2, #5
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4641      	mov	r1, r8
 8003d50:	1a51      	subs	r1, r2, r1
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	4649      	mov	r1, r9
 8003d56:	eb63 0301 	sbc.w	r3, r3, r1
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003d68:	4659      	mov	r1, fp
 8003d6a:	018b      	lsls	r3, r1, #6
 8003d6c:	4651      	mov	r1, sl
 8003d6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d72:	4651      	mov	r1, sl
 8003d74:	018a      	lsls	r2, r1, #6
 8003d76:	4651      	mov	r1, sl
 8003d78:	1a54      	subs	r4, r2, r1
 8003d7a:	4659      	mov	r1, fp
 8003d7c:	eb63 0501 	sbc.w	r5, r3, r1
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	f04f 0300 	mov.w	r3, #0
 8003d88:	00eb      	lsls	r3, r5, #3
 8003d8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d8e:	00e2      	lsls	r2, r4, #3
 8003d90:	4614      	mov	r4, r2
 8003d92:	461d      	mov	r5, r3
 8003d94:	4643      	mov	r3, r8
 8003d96:	18e3      	adds	r3, r4, r3
 8003d98:	603b      	str	r3, [r7, #0]
 8003d9a:	464b      	mov	r3, r9
 8003d9c:	eb45 0303 	adc.w	r3, r5, r3
 8003da0:	607b      	str	r3, [r7, #4]
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dae:	4629      	mov	r1, r5
 8003db0:	028b      	lsls	r3, r1, #10
 8003db2:	4621      	mov	r1, r4
 8003db4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003db8:	4621      	mov	r1, r4
 8003dba:	028a      	lsls	r2, r1, #10
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dc8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003dca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003dce:	f7fc fa77 	bl	80002c0 <__aeabi_uldivmod>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x458>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	0f1b      	lsrs	r3, r3, #28
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003dea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003dee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003dfa:	e003      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dfc:	4b06      	ldr	r3, [pc, #24]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003dfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	37b8      	adds	r7, #184	@ 0xb8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e12:	bf00      	nop
 8003e14:	40023800 	.word	0x40023800
 8003e18:	00f42400 	.word	0x00f42400

08003e1c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e28d      	b.n	800434a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 8083 	beq.w	8003f42 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e3c:	4b94      	ldr	r3, [pc, #592]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 030c 	and.w	r3, r3, #12
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d019      	beq.n	8003e7c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e48:	4b91      	ldr	r3, [pc, #580]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d106      	bne.n	8003e62 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e54:	4b8e      	ldr	r3, [pc, #568]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e60:	d00c      	beq.n	8003e7c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e62:	4b8b      	ldr	r3, [pc, #556]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e6a:	2b0c      	cmp	r3, #12
 8003e6c:	d112      	bne.n	8003e94 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e6e:	4b88      	ldr	r3, [pc, #544]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e7a:	d10b      	bne.n	8003e94 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e7c:	4b84      	ldr	r3, [pc, #528]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d05b      	beq.n	8003f40 <HAL_RCC_OscConfig+0x124>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d157      	bne.n	8003f40 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e25a      	b.n	800434a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e9c:	d106      	bne.n	8003eac <HAL_RCC_OscConfig+0x90>
 8003e9e:	4b7c      	ldr	r3, [pc, #496]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a7b      	ldr	r2, [pc, #492]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003ea4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	e01d      	b.n	8003ee8 <HAL_RCC_OscConfig+0xcc>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_RCC_OscConfig+0xb4>
 8003eb6:	4b76      	ldr	r3, [pc, #472]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a75      	ldr	r2, [pc, #468]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003ebc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	4b73      	ldr	r3, [pc, #460]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a72      	ldr	r2, [pc, #456]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	e00b      	b.n	8003ee8 <HAL_RCC_OscConfig+0xcc>
 8003ed0:	4b6f      	ldr	r3, [pc, #444]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a6e      	ldr	r2, [pc, #440]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003ed6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	4b6c      	ldr	r3, [pc, #432]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a6b      	ldr	r2, [pc, #428]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003ee2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ee6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d013      	beq.n	8003f18 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef0:	f7fd fd92 	bl	8001a18 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ef8:	f7fd fd8e 	bl	8001a18 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b64      	cmp	r3, #100	@ 0x64
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e21f      	b.n	800434a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0a:	4b61      	ldr	r3, [pc, #388]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0f0      	beq.n	8003ef8 <HAL_RCC_OscConfig+0xdc>
 8003f16:	e014      	b.n	8003f42 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f18:	f7fd fd7e 	bl	8001a18 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f20:	f7fd fd7a 	bl	8001a18 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b64      	cmp	r3, #100	@ 0x64
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e20b      	b.n	800434a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f32:	4b57      	ldr	r3, [pc, #348]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1f0      	bne.n	8003f20 <HAL_RCC_OscConfig+0x104>
 8003f3e:	e000      	b.n	8003f42 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d06f      	beq.n	800402e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f4e:	4b50      	ldr	r3, [pc, #320]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 030c 	and.w	r3, r3, #12
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d017      	beq.n	8003f8a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f5a:	4b4d      	ldr	r3, [pc, #308]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d105      	bne.n	8003f72 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f66:	4b4a      	ldr	r3, [pc, #296]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00b      	beq.n	8003f8a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f72:	4b47      	ldr	r3, [pc, #284]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f7a:	2b0c      	cmp	r3, #12
 8003f7c:	d11c      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f7e:	4b44      	ldr	r3, [pc, #272]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d116      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f8a:	4b41      	ldr	r3, [pc, #260]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d005      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x186>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d001      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e1d3      	b.n	800434a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4937      	ldr	r1, [pc, #220]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fb6:	e03a      	b.n	800402e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d020      	beq.n	8004002 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fc0:	4b34      	ldr	r3, [pc, #208]	@ (8004094 <HAL_RCC_OscConfig+0x278>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc6:	f7fd fd27 	bl	8001a18 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fce:	f7fd fd23 	bl	8001a18 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e1b4      	b.n	800434a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fec:	4b28      	ldr	r3, [pc, #160]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	4925      	ldr	r1, [pc, #148]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	600b      	str	r3, [r1, #0]
 8004000:	e015      	b.n	800402e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004002:	4b24      	ldr	r3, [pc, #144]	@ (8004094 <HAL_RCC_OscConfig+0x278>)
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fd fd06 	bl	8001a18 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004010:	f7fd fd02 	bl	8001a18 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e193      	b.n	800434a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004022:	4b1b      	ldr	r3, [pc, #108]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d036      	beq.n	80040a8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d016      	beq.n	8004070 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004042:	4b15      	ldr	r3, [pc, #84]	@ (8004098 <HAL_RCC_OscConfig+0x27c>)
 8004044:	2201      	movs	r2, #1
 8004046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004048:	f7fd fce6 	bl	8001a18 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004050:	f7fd fce2 	bl	8001a18 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e173      	b.n	800434a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004062:	4b0b      	ldr	r3, [pc, #44]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8004064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0f0      	beq.n	8004050 <HAL_RCC_OscConfig+0x234>
 800406e:	e01b      	b.n	80040a8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004070:	4b09      	ldr	r3, [pc, #36]	@ (8004098 <HAL_RCC_OscConfig+0x27c>)
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004076:	f7fd fccf 	bl	8001a18 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800407c:	e00e      	b.n	800409c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800407e:	f7fd fccb 	bl	8001a18 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d907      	bls.n	800409c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e15c      	b.n	800434a <HAL_RCC_OscConfig+0x52e>
 8004090:	40023800 	.word	0x40023800
 8004094:	42470000 	.word	0x42470000
 8004098:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800409c:	4b8a      	ldr	r3, [pc, #552]	@ (80042c8 <HAL_RCC_OscConfig+0x4ac>)
 800409e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1ea      	bne.n	800407e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 8097 	beq.w	80041e4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040b6:	2300      	movs	r3, #0
 80040b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ba:	4b83      	ldr	r3, [pc, #524]	@ (80042c8 <HAL_RCC_OscConfig+0x4ac>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10f      	bne.n	80040e6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	4b7f      	ldr	r3, [pc, #508]	@ (80042c8 <HAL_RCC_OscConfig+0x4ac>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ce:	4a7e      	ldr	r2, [pc, #504]	@ (80042c8 <HAL_RCC_OscConfig+0x4ac>)
 80040d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040d6:	4b7c      	ldr	r3, [pc, #496]	@ (80042c8 <HAL_RCC_OscConfig+0x4ac>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040e2:	2301      	movs	r3, #1
 80040e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e6:	4b79      	ldr	r3, [pc, #484]	@ (80042cc <HAL_RCC_OscConfig+0x4b0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d118      	bne.n	8004124 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040f2:	4b76      	ldr	r3, [pc, #472]	@ (80042cc <HAL_RCC_OscConfig+0x4b0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a75      	ldr	r2, [pc, #468]	@ (80042cc <HAL_RCC_OscConfig+0x4b0>)
 80040f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040fe:	f7fd fc8b 	bl	8001a18 <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004104:	e008      	b.n	8004118 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004106:	f7fd fc87 	bl	8001a18 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e118      	b.n	800434a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004118:	4b6c      	ldr	r3, [pc, #432]	@ (80042cc <HAL_RCC_OscConfig+0x4b0>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0f0      	beq.n	8004106 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d106      	bne.n	800413a <HAL_RCC_OscConfig+0x31e>
 800412c:	4b66      	ldr	r3, [pc, #408]	@ (80042c8 <HAL_RCC_OscConfig+0x4ac>)
 800412e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004130:	4a65      	ldr	r2, [pc, #404]	@ (80042c8 <HAL_RCC_OscConfig+0x4ac>)
 8004132:	f043 0301 	orr.w	r3, r3, #1
 8004136:	6713      	str	r3, [r2, #112]	@ 0x70
 8004138:	e01c      	b.n	8004174 <HAL_RCC_OscConfig+0x358>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2b05      	cmp	r3, #5
 8004140:	d10c      	bne.n	800415c <HAL_RCC_OscConfig+0x340>
 8004142:	4b61      	ldr	r3, [pc, #388]	@ (80042c8 <HAL_RCC_OscConfig+0x4ac>)
 8004144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004146:	4a60      	ldr	r2, [pc, #384]	@ (80042c8 <HAL_RCC_OscConfig+0x4ac>)
 8004148:	f043 0304 	orr.w	r3, r3, #4
 800414c:	6713      	str	r3, [r2, #112]	@ 0x70
 800414e:	4b5e      	ldr	r3, [pc, #376]	@ (80042c8 <HAL_RCC_OscConfig+0x4ac>)
 8004150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004152:	4a5d      	ldr	r2, [pc, #372]	@ (80042c8 <HAL_RCC_OscConfig+0x4ac>)
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	6713      	str	r3, [r2, #112]	@ 0x70
 800415a:	e00b      	b.n	8004174 <HAL_RCC_OscConfig+0x358>
 800415c:	4b5a      	ldr	r3, [pc, #360]	@ (80042c8 <HAL_RCC_OscConfig+0x4ac>)
 800415e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004160:	4a59      	ldr	r2, [pc, #356]	@ (80042c8 <HAL_RCC_OscConfig+0x4ac>)
 8004162:	f023 0301 	bic.w	r3, r3, #1
 8004166:	6713      	str	r3, [r2, #112]	@ 0x70
 8004168:	4b57      	ldr	r3, [pc, #348]	@ (80042c8 <HAL_RCC_OscConfig+0x4ac>)
 800416a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800416c:	4a56      	ldr	r2, [pc, #344]	@ (80042c8 <HAL_RCC_OscConfig+0x4ac>)
 800416e:	f023 0304 	bic.w	r3, r3, #4
 8004172:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d015      	beq.n	80041a8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417c:	f7fd fc4c 	bl	8001a18 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004182:	e00a      	b.n	800419a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004184:	f7fd fc48 	bl	8001a18 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e0d7      	b.n	800434a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419a:	4b4b      	ldr	r3, [pc, #300]	@ (80042c8 <HAL_RCC_OscConfig+0x4ac>)
 800419c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0ee      	beq.n	8004184 <HAL_RCC_OscConfig+0x368>
 80041a6:	e014      	b.n	80041d2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a8:	f7fd fc36 	bl	8001a18 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ae:	e00a      	b.n	80041c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b0:	f7fd fc32 	bl	8001a18 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041be:	4293      	cmp	r3, r2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e0c1      	b.n	800434a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c6:	4b40      	ldr	r3, [pc, #256]	@ (80042c8 <HAL_RCC_OscConfig+0x4ac>)
 80041c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1ee      	bne.n	80041b0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041d2:	7dfb      	ldrb	r3, [r7, #23]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d105      	bne.n	80041e4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d8:	4b3b      	ldr	r3, [pc, #236]	@ (80042c8 <HAL_RCC_OscConfig+0x4ac>)
 80041da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041dc:	4a3a      	ldr	r2, [pc, #232]	@ (80042c8 <HAL_RCC_OscConfig+0x4ac>)
 80041de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 80ad 	beq.w	8004348 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041ee:	4b36      	ldr	r3, [pc, #216]	@ (80042c8 <HAL_RCC_OscConfig+0x4ac>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d060      	beq.n	80042bc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d145      	bne.n	800428e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004202:	4b33      	ldr	r3, [pc, #204]	@ (80042d0 <HAL_RCC_OscConfig+0x4b4>)
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004208:	f7fd fc06 	bl	8001a18 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004210:	f7fd fc02 	bl	8001a18 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e093      	b.n	800434a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004222:	4b29      	ldr	r3, [pc, #164]	@ (80042c8 <HAL_RCC_OscConfig+0x4ac>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69da      	ldr	r2, [r3, #28]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423c:	019b      	lsls	r3, r3, #6
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004244:	085b      	lsrs	r3, r3, #1
 8004246:	3b01      	subs	r3, #1
 8004248:	041b      	lsls	r3, r3, #16
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004250:	061b      	lsls	r3, r3, #24
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004258:	071b      	lsls	r3, r3, #28
 800425a:	491b      	ldr	r1, [pc, #108]	@ (80042c8 <HAL_RCC_OscConfig+0x4ac>)
 800425c:	4313      	orrs	r3, r2
 800425e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004260:	4b1b      	ldr	r3, [pc, #108]	@ (80042d0 <HAL_RCC_OscConfig+0x4b4>)
 8004262:	2201      	movs	r2, #1
 8004264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004266:	f7fd fbd7 	bl	8001a18 <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800426e:	f7fd fbd3 	bl	8001a18 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e064      	b.n	800434a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004280:	4b11      	ldr	r3, [pc, #68]	@ (80042c8 <HAL_RCC_OscConfig+0x4ac>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f0      	beq.n	800426e <HAL_RCC_OscConfig+0x452>
 800428c:	e05c      	b.n	8004348 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800428e:	4b10      	ldr	r3, [pc, #64]	@ (80042d0 <HAL_RCC_OscConfig+0x4b4>)
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7fd fbc0 	bl	8001a18 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800429c:	f7fd fbbc 	bl	8001a18 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e04d      	b.n	800434a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ae:	4b06      	ldr	r3, [pc, #24]	@ (80042c8 <HAL_RCC_OscConfig+0x4ac>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x480>
 80042ba:	e045      	b.n	8004348 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d107      	bne.n	80042d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e040      	b.n	800434a <HAL_RCC_OscConfig+0x52e>
 80042c8:	40023800 	.word	0x40023800
 80042cc:	40007000 	.word	0x40007000
 80042d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042d4:	4b1f      	ldr	r3, [pc, #124]	@ (8004354 <HAL_RCC_OscConfig+0x538>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d030      	beq.n	8004344 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d129      	bne.n	8004344 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d122      	bne.n	8004344 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004304:	4013      	ands	r3, r2
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800430a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800430c:	4293      	cmp	r3, r2
 800430e:	d119      	bne.n	8004344 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431a:	085b      	lsrs	r3, r3, #1
 800431c:	3b01      	subs	r3, #1
 800431e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004320:	429a      	cmp	r2, r3
 8004322:	d10f      	bne.n	8004344 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800432e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004330:	429a      	cmp	r2, r3
 8004332:	d107      	bne.n	8004344 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004340:	429a      	cmp	r2, r3
 8004342:	d001      	beq.n	8004348 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e000      	b.n	800434a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40023800 	.word	0x40023800

08004358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e041      	b.n	80043ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d106      	bne.n	8004384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f839 	bl	80043f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3304      	adds	r3, #4
 8004394:	4619      	mov	r1, r3
 8004396:	4610      	mov	r0, r2
 8004398:	f000 f9c0 	bl	800471c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b01      	cmp	r3, #1
 800441e:	d001      	beq.n	8004424 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e04e      	b.n	80044c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a23      	ldr	r2, [pc, #140]	@ (80044d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d022      	beq.n	800448c <HAL_TIM_Base_Start_IT+0x80>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800444e:	d01d      	beq.n	800448c <HAL_TIM_Base_Start_IT+0x80>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a1f      	ldr	r2, [pc, #124]	@ (80044d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d018      	beq.n	800448c <HAL_TIM_Base_Start_IT+0x80>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a1e      	ldr	r2, [pc, #120]	@ (80044d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d013      	beq.n	800448c <HAL_TIM_Base_Start_IT+0x80>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a1c      	ldr	r2, [pc, #112]	@ (80044dc <HAL_TIM_Base_Start_IT+0xd0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d00e      	beq.n	800448c <HAL_TIM_Base_Start_IT+0x80>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a1b      	ldr	r2, [pc, #108]	@ (80044e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d009      	beq.n	800448c <HAL_TIM_Base_Start_IT+0x80>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a19      	ldr	r2, [pc, #100]	@ (80044e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d004      	beq.n	800448c <HAL_TIM_Base_Start_IT+0x80>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a18      	ldr	r2, [pc, #96]	@ (80044e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d111      	bne.n	80044b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b06      	cmp	r3, #6
 800449c:	d010      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f042 0201 	orr.w	r2, r2, #1
 80044ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ae:	e007      	b.n	80044c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0201 	orr.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40010000 	.word	0x40010000
 80044d4:	40000400 	.word	0x40000400
 80044d8:	40000800 	.word	0x40000800
 80044dc:	40000c00 	.word	0x40000c00
 80044e0:	40010400 	.word	0x40010400
 80044e4:	40014000 	.word	0x40014000
 80044e8:	40001800 	.word	0x40001800

080044ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d020      	beq.n	8004550 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d01b      	beq.n	8004550 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 0202 	mvn.w	r2, #2
 8004520:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f8d2 	bl	80046e0 <HAL_TIM_IC_CaptureCallback>
 800453c:	e005      	b.n	800454a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f8c4 	bl	80046cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f8d5 	bl	80046f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f003 0304 	and.w	r3, r3, #4
 8004556:	2b00      	cmp	r3, #0
 8004558:	d020      	beq.n	800459c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01b      	beq.n	800459c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f06f 0204 	mvn.w	r2, #4
 800456c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2202      	movs	r2, #2
 8004572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f8ac 	bl	80046e0 <HAL_TIM_IC_CaptureCallback>
 8004588:	e005      	b.n	8004596 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f89e 	bl	80046cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f8af 	bl	80046f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d020      	beq.n	80045e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01b      	beq.n	80045e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f06f 0208 	mvn.w	r2, #8
 80045b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2204      	movs	r2, #4
 80045be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f886 	bl	80046e0 <HAL_TIM_IC_CaptureCallback>
 80045d4:	e005      	b.n	80045e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f878 	bl	80046cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f889 	bl	80046f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d020      	beq.n	8004634 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01b      	beq.n	8004634 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f06f 0210 	mvn.w	r2, #16
 8004604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2208      	movs	r2, #8
 800460a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f860 	bl	80046e0 <HAL_TIM_IC_CaptureCallback>
 8004620:	e005      	b.n	800462e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f852 	bl	80046cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f863 	bl	80046f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00c      	beq.n	8004658 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d007      	beq.n	8004658 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f06f 0201 	mvn.w	r2, #1
 8004650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7fc ff7c 	bl	8001550 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00c      	beq.n	800467c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004668:	2b00      	cmp	r3, #0
 800466a:	d007      	beq.n	800467c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f906 	bl	8004888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00c      	beq.n	80046a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800468c:	2b00      	cmp	r3, #0
 800468e:	d007      	beq.n	80046a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f834 	bl	8004708 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f003 0320 	and.w	r3, r3, #32
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00c      	beq.n	80046c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d007      	beq.n	80046c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f06f 0220 	mvn.w	r2, #32
 80046bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f8d8 	bl	8004874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046c4:	bf00      	nop
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a46      	ldr	r2, [pc, #280]	@ (8004848 <TIM_Base_SetConfig+0x12c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d013      	beq.n	800475c <TIM_Base_SetConfig+0x40>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800473a:	d00f      	beq.n	800475c <TIM_Base_SetConfig+0x40>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a43      	ldr	r2, [pc, #268]	@ (800484c <TIM_Base_SetConfig+0x130>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00b      	beq.n	800475c <TIM_Base_SetConfig+0x40>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a42      	ldr	r2, [pc, #264]	@ (8004850 <TIM_Base_SetConfig+0x134>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d007      	beq.n	800475c <TIM_Base_SetConfig+0x40>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a41      	ldr	r2, [pc, #260]	@ (8004854 <TIM_Base_SetConfig+0x138>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d003      	beq.n	800475c <TIM_Base_SetConfig+0x40>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a40      	ldr	r2, [pc, #256]	@ (8004858 <TIM_Base_SetConfig+0x13c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d108      	bne.n	800476e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	4313      	orrs	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a35      	ldr	r2, [pc, #212]	@ (8004848 <TIM_Base_SetConfig+0x12c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d02b      	beq.n	80047ce <TIM_Base_SetConfig+0xb2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800477c:	d027      	beq.n	80047ce <TIM_Base_SetConfig+0xb2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a32      	ldr	r2, [pc, #200]	@ (800484c <TIM_Base_SetConfig+0x130>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d023      	beq.n	80047ce <TIM_Base_SetConfig+0xb2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a31      	ldr	r2, [pc, #196]	@ (8004850 <TIM_Base_SetConfig+0x134>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d01f      	beq.n	80047ce <TIM_Base_SetConfig+0xb2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a30      	ldr	r2, [pc, #192]	@ (8004854 <TIM_Base_SetConfig+0x138>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d01b      	beq.n	80047ce <TIM_Base_SetConfig+0xb2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a2f      	ldr	r2, [pc, #188]	@ (8004858 <TIM_Base_SetConfig+0x13c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d017      	beq.n	80047ce <TIM_Base_SetConfig+0xb2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a2e      	ldr	r2, [pc, #184]	@ (800485c <TIM_Base_SetConfig+0x140>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d013      	beq.n	80047ce <TIM_Base_SetConfig+0xb2>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a2d      	ldr	r2, [pc, #180]	@ (8004860 <TIM_Base_SetConfig+0x144>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00f      	beq.n	80047ce <TIM_Base_SetConfig+0xb2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a2c      	ldr	r2, [pc, #176]	@ (8004864 <TIM_Base_SetConfig+0x148>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00b      	beq.n	80047ce <TIM_Base_SetConfig+0xb2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004868 <TIM_Base_SetConfig+0x14c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d007      	beq.n	80047ce <TIM_Base_SetConfig+0xb2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a2a      	ldr	r2, [pc, #168]	@ (800486c <TIM_Base_SetConfig+0x150>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d003      	beq.n	80047ce <TIM_Base_SetConfig+0xb2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a29      	ldr	r2, [pc, #164]	@ (8004870 <TIM_Base_SetConfig+0x154>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d108      	bne.n	80047e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	4313      	orrs	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a10      	ldr	r2, [pc, #64]	@ (8004848 <TIM_Base_SetConfig+0x12c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d003      	beq.n	8004814 <TIM_Base_SetConfig+0xf8>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a12      	ldr	r2, [pc, #72]	@ (8004858 <TIM_Base_SetConfig+0x13c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d103      	bne.n	800481c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	691a      	ldr	r2, [r3, #16]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b01      	cmp	r3, #1
 800482c:	d105      	bne.n	800483a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f023 0201 	bic.w	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	611a      	str	r2, [r3, #16]
  }
}
 800483a:	bf00      	nop
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40010000 	.word	0x40010000
 800484c:	40000400 	.word	0x40000400
 8004850:	40000800 	.word	0x40000800
 8004854:	40000c00 	.word	0x40000c00
 8004858:	40010400 	.word	0x40010400
 800485c:	40014000 	.word	0x40014000
 8004860:	40014400 	.word	0x40014400
 8004864:	40014800 	.word	0x40014800
 8004868:	40001800 	.word	0x40001800
 800486c:	40001c00 	.word	0x40001c00
 8004870:	40002000 	.word	0x40002000

08004874 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e042      	b.n	8004934 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fc fed0 	bl	8001668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2224      	movs	r2, #36	@ 0x24
 80048cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 fdbd 	bl	8005460 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695a      	ldr	r2, [r3, #20]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08a      	sub	sp, #40	@ 0x28
 8004940:	af02      	add	r7, sp, #8
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	603b      	str	r3, [r7, #0]
 8004948:	4613      	mov	r3, r2
 800494a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b20      	cmp	r3, #32
 800495a:	d175      	bne.n	8004a48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_UART_Transmit+0x2c>
 8004962:	88fb      	ldrh	r3, [r7, #6]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e06e      	b.n	8004a4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2221      	movs	r2, #33	@ 0x21
 8004976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800497a:	f7fd f84d 	bl	8001a18 <HAL_GetTick>
 800497e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	88fa      	ldrh	r2, [r7, #6]
 8004984:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	88fa      	ldrh	r2, [r7, #6]
 800498a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004994:	d108      	bne.n	80049a8 <HAL_UART_Transmit+0x6c>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d104      	bne.n	80049a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800499e:	2300      	movs	r3, #0
 80049a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	61bb      	str	r3, [r7, #24]
 80049a6:	e003      	b.n	80049b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049ac:	2300      	movs	r3, #0
 80049ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049b0:	e02e      	b.n	8004a10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2200      	movs	r2, #0
 80049ba:	2180      	movs	r1, #128	@ 0x80
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 fb1f 	bl	8005000 <UART_WaitOnFlagUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e03a      	b.n	8004a4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10b      	bne.n	80049f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	461a      	mov	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	3302      	adds	r3, #2
 80049ee:	61bb      	str	r3, [r7, #24]
 80049f0:	e007      	b.n	8004a02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	781a      	ldrb	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	3301      	adds	r3, #1
 8004a00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1cb      	bne.n	80049b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2200      	movs	r2, #0
 8004a22:	2140      	movs	r1, #64	@ 0x40
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 faeb 	bl	8005000 <UART_WaitOnFlagUntilTimeout>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e006      	b.n	8004a4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	e000      	b.n	8004a4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a48:	2302      	movs	r3, #2
  }
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3720      	adds	r7, #32
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b084      	sub	sp, #16
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	d112      	bne.n	8004a92 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <HAL_UART_Receive_IT+0x26>
 8004a72:	88fb      	ldrh	r3, [r7, #6]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e00b      	b.n	8004a94 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a82:	88fb      	ldrh	r3, [r7, #6]
 8004a84:	461a      	mov	r2, r3
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 fb12 	bl	80050b2 <UART_Start_Receive_IT>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	e000      	b.n	8004a94 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004a92:	2302      	movs	r3, #2
  }
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b0ba      	sub	sp, #232	@ 0xe8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004ada:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10f      	bne.n	8004b02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ae6:	f003 0320 	and.w	r3, r3, #32
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d009      	beq.n	8004b02 <HAL_UART_IRQHandler+0x66>
 8004aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004af2:	f003 0320 	and.w	r3, r3, #32
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fbf2 	bl	80052e4 <UART_Receive_IT>
      return;
 8004b00:	e25b      	b.n	8004fba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 80de 	beq.w	8004cc8 <HAL_UART_IRQHandler+0x22c>
 8004b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d106      	bne.n	8004b26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b1c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 80d1 	beq.w	8004cc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00b      	beq.n	8004b4a <HAL_UART_IRQHandler+0xae>
 8004b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d005      	beq.n	8004b4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b42:	f043 0201 	orr.w	r2, r3, #1
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b4e:	f003 0304 	and.w	r3, r3, #4
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00b      	beq.n	8004b6e <HAL_UART_IRQHandler+0xd2>
 8004b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d005      	beq.n	8004b6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b66:	f043 0202 	orr.w	r2, r3, #2
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00b      	beq.n	8004b92 <HAL_UART_IRQHandler+0xf6>
 8004b7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d005      	beq.n	8004b92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b8a:	f043 0204 	orr.w	r2, r3, #4
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d011      	beq.n	8004bc2 <HAL_UART_IRQHandler+0x126>
 8004b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ba2:	f003 0320 	and.w	r3, r3, #32
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d105      	bne.n	8004bb6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d005      	beq.n	8004bc2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bba:	f043 0208 	orr.w	r2, r3, #8
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 81f2 	beq.w	8004fb0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bd0:	f003 0320 	and.w	r3, r3, #32
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d008      	beq.n	8004bea <HAL_UART_IRQHandler+0x14e>
 8004bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bdc:	f003 0320 	and.w	r3, r3, #32
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 fb7d 	bl	80052e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf4:	2b40      	cmp	r3, #64	@ 0x40
 8004bf6:	bf0c      	ite	eq
 8004bf8:	2301      	moveq	r3, #1
 8004bfa:	2300      	movne	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d103      	bne.n	8004c16 <HAL_UART_IRQHandler+0x17a>
 8004c0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d04f      	beq.n	8004cb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fa85 	bl	8005126 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c26:	2b40      	cmp	r3, #64	@ 0x40
 8004c28:	d141      	bne.n	8004cae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3314      	adds	r3, #20
 8004c30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c38:	e853 3f00 	ldrex	r3, [r3]
 8004c3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3314      	adds	r3, #20
 8004c52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c56:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c66:	e841 2300 	strex	r3, r2, [r1]
 8004c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1d9      	bne.n	8004c2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d013      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c82:	4a7e      	ldr	r2, [pc, #504]	@ (8004e7c <HAL_UART_IRQHandler+0x3e0>)
 8004c84:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fd f8f4 	bl	8001e78 <HAL_DMA_Abort_IT>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d016      	beq.n	8004cc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca4:	e00e      	b.n	8004cc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f994 	bl	8004fd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cac:	e00a      	b.n	8004cc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f990 	bl	8004fd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb4:	e006      	b.n	8004cc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f98c 	bl	8004fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004cc2:	e175      	b.n	8004fb0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc4:	bf00      	nop
    return;
 8004cc6:	e173      	b.n	8004fb0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	f040 814f 	bne.w	8004f70 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cd6:	f003 0310 	and.w	r3, r3, #16
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 8148 	beq.w	8004f70 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ce4:	f003 0310 	and.w	r3, r3, #16
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 8141 	beq.w	8004f70 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60bb      	str	r3, [r7, #8]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	60bb      	str	r3, [r7, #8]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	60bb      	str	r3, [r7, #8]
 8004d02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d0e:	2b40      	cmp	r3, #64	@ 0x40
 8004d10:	f040 80b6 	bne.w	8004e80 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 8145 	beq.w	8004fb4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d32:	429a      	cmp	r2, r3
 8004d34:	f080 813e 	bcs.w	8004fb4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d3e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d4a:	f000 8088 	beq.w	8004e5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	330c      	adds	r3, #12
 8004d54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d5c:	e853 3f00 	ldrex	r3, [r3]
 8004d60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	330c      	adds	r3, #12
 8004d76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004d7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d82:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004d86:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d8a:	e841 2300 	strex	r3, r2, [r1]
 8004d8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1d9      	bne.n	8004d4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	3314      	adds	r3, #20
 8004da0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004da4:	e853 3f00 	ldrex	r3, [r3]
 8004da8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004daa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004dac:	f023 0301 	bic.w	r3, r3, #1
 8004db0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3314      	adds	r3, #20
 8004dba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004dbe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004dc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004dc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004dca:	e841 2300 	strex	r3, r2, [r1]
 8004dce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004dd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1e1      	bne.n	8004d9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	3314      	adds	r3, #20
 8004ddc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004de0:	e853 3f00 	ldrex	r3, [r3]
 8004de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004de6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004de8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3314      	adds	r3, #20
 8004df6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004dfa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004dfc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004e00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e02:	e841 2300 	strex	r3, r2, [r1]
 8004e06:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004e08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1e3      	bne.n	8004dd6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	330c      	adds	r3, #12
 8004e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e26:	e853 3f00 	ldrex	r3, [r3]
 8004e2a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e2e:	f023 0310 	bic.w	r3, r3, #16
 8004e32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	330c      	adds	r3, #12
 8004e3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004e40:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004e42:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e44:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e48:	e841 2300 	strex	r3, r2, [r1]
 8004e4c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1e3      	bne.n	8004e1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fc ff9d 	bl	8001d98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2202      	movs	r2, #2
 8004e62:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	4619      	mov	r1, r3
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f8b7 	bl	8004fe8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e7a:	e09b      	b.n	8004fb4 <HAL_UART_IRQHandler+0x518>
 8004e7c:	080051ed 	.word	0x080051ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 808e 	beq.w	8004fb8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 8089 	beq.w	8004fb8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	330c      	adds	r3, #12
 8004eac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ebc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	330c      	adds	r3, #12
 8004ec6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004eca:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ecc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ece:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ed0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ed2:	e841 2300 	strex	r3, r2, [r1]
 8004ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1e3      	bne.n	8004ea6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3314      	adds	r3, #20
 8004ee4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	e853 3f00 	ldrex	r3, [r3]
 8004eec:	623b      	str	r3, [r7, #32]
   return(result);
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	f023 0301 	bic.w	r3, r3, #1
 8004ef4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3314      	adds	r3, #20
 8004efe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004f02:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f0a:	e841 2300 	strex	r3, r2, [r1]
 8004f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1e3      	bne.n	8004ede <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	330c      	adds	r3, #12
 8004f2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	e853 3f00 	ldrex	r3, [r3]
 8004f32:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0310 	bic.w	r3, r3, #16
 8004f3a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	330c      	adds	r3, #12
 8004f44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004f48:	61fa      	str	r2, [r7, #28]
 8004f4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	69b9      	ldr	r1, [r7, #24]
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	e841 2300 	strex	r3, r2, [r1]
 8004f54:	617b      	str	r3, [r7, #20]
   return(result);
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e3      	bne.n	8004f24 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f66:	4619      	mov	r1, r3
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f83d 	bl	8004fe8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f6e:	e023      	b.n	8004fb8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d009      	beq.n	8004f90 <HAL_UART_IRQHandler+0x4f4>
 8004f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d003      	beq.n	8004f90 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f943 	bl	8005214 <UART_Transmit_IT>
    return;
 8004f8e:	e014      	b.n	8004fba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00e      	beq.n	8004fba <HAL_UART_IRQHandler+0x51e>
 8004f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d008      	beq.n	8004fba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f983 	bl	80052b4 <UART_EndTransmit_IT>
    return;
 8004fae:	e004      	b.n	8004fba <HAL_UART_IRQHandler+0x51e>
    return;
 8004fb0:	bf00      	nop
 8004fb2:	e002      	b.n	8004fba <HAL_UART_IRQHandler+0x51e>
      return;
 8004fb4:	bf00      	nop
 8004fb6:	e000      	b.n	8004fba <HAL_UART_IRQHandler+0x51e>
      return;
 8004fb8:	bf00      	nop
  }
}
 8004fba:	37e8      	adds	r7, #232	@ 0xe8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	4613      	mov	r3, r2
 800500e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005010:	e03b      	b.n	800508a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005018:	d037      	beq.n	800508a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800501a:	f7fc fcfd 	bl	8001a18 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	6a3a      	ldr	r2, [r7, #32]
 8005026:	429a      	cmp	r2, r3
 8005028:	d302      	bcc.n	8005030 <UART_WaitOnFlagUntilTimeout+0x30>
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e03a      	b.n	80050aa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f003 0304 	and.w	r3, r3, #4
 800503e:	2b00      	cmp	r3, #0
 8005040:	d023      	beq.n	800508a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2b80      	cmp	r3, #128	@ 0x80
 8005046:	d020      	beq.n	800508a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	2b40      	cmp	r3, #64	@ 0x40
 800504c:	d01d      	beq.n	800508a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b08      	cmp	r3, #8
 800505a:	d116      	bne.n	800508a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800505c:	2300      	movs	r3, #0
 800505e:	617b      	str	r3, [r7, #20]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 f857 	bl	8005126 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2208      	movs	r2, #8
 800507c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e00f      	b.n	80050aa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	4013      	ands	r3, r2
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	429a      	cmp	r2, r3
 8005098:	bf0c      	ite	eq
 800509a:	2301      	moveq	r3, #1
 800509c:	2300      	movne	r3, #0
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	461a      	mov	r2, r3
 80050a2:	79fb      	ldrb	r3, [r7, #7]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d0b4      	beq.n	8005012 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b085      	sub	sp, #20
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	60b9      	str	r1, [r7, #8]
 80050bc:	4613      	mov	r3, r2
 80050be:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	88fa      	ldrh	r2, [r7, #6]
 80050ca:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	88fa      	ldrh	r2, [r7, #6]
 80050d0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2222      	movs	r2, #34	@ 0x22
 80050dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d007      	beq.n	80050f8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050f6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	695a      	ldr	r2, [r3, #20]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0201 	orr.w	r2, r2, #1
 8005106:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0220 	orr.w	r2, r2, #32
 8005116:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005126:	b480      	push	{r7}
 8005128:	b095      	sub	sp, #84	@ 0x54
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	330c      	adds	r3, #12
 8005134:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800513e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005140:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005144:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	330c      	adds	r3, #12
 800514c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800514e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005150:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005152:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005154:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005156:	e841 2300 	strex	r3, r2, [r1]
 800515a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800515c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1e5      	bne.n	800512e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3314      	adds	r3, #20
 8005168:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	e853 3f00 	ldrex	r3, [r3]
 8005170:	61fb      	str	r3, [r7, #28]
   return(result);
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	f023 0301 	bic.w	r3, r3, #1
 8005178:	64bb      	str	r3, [r7, #72]	@ 0x48
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3314      	adds	r3, #20
 8005180:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005182:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005184:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005186:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005188:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800518a:	e841 2300 	strex	r3, r2, [r1]
 800518e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1e5      	bne.n	8005162 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800519a:	2b01      	cmp	r3, #1
 800519c:	d119      	bne.n	80051d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	330c      	adds	r3, #12
 80051a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	e853 3f00 	ldrex	r3, [r3]
 80051ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	f023 0310 	bic.w	r3, r3, #16
 80051b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	330c      	adds	r3, #12
 80051bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051be:	61ba      	str	r2, [r7, #24]
 80051c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c2:	6979      	ldr	r1, [r7, #20]
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	e841 2300 	strex	r3, r2, [r1]
 80051ca:	613b      	str	r3, [r7, #16]
   return(result);
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1e5      	bne.n	800519e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2220      	movs	r2, #32
 80051d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80051e0:	bf00      	nop
 80051e2:	3754      	adds	r7, #84	@ 0x54
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f7ff fee4 	bl	8004fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800520c:	bf00      	nop
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b21      	cmp	r3, #33	@ 0x21
 8005226:	d13e      	bne.n	80052a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005230:	d114      	bne.n	800525c <UART_Transmit_IT+0x48>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d110      	bne.n	800525c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	461a      	mov	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800524e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	1c9a      	adds	r2, r3, #2
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	621a      	str	r2, [r3, #32]
 800525a:	e008      	b.n	800526e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	1c59      	adds	r1, r3, #1
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6211      	str	r1, [r2, #32]
 8005266:	781a      	ldrb	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005272:	b29b      	uxth	r3, r3
 8005274:	3b01      	subs	r3, #1
 8005276:	b29b      	uxth	r3, r3
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	4619      	mov	r1, r3
 800527c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10f      	bne.n	80052a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005290:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052a2:	2300      	movs	r3, #0
 80052a4:	e000      	b.n	80052a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80052a6:	2302      	movs	r3, #2
  }
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7ff fe73 	bl	8004fc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3708      	adds	r7, #8
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08c      	sub	sp, #48	@ 0x30
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b22      	cmp	r3, #34	@ 0x22
 80052f6:	f040 80ae 	bne.w	8005456 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005302:	d117      	bne.n	8005334 <UART_Receive_IT+0x50>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d113      	bne.n	8005334 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800530c:	2300      	movs	r3, #0
 800530e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005314:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	b29b      	uxth	r3, r3
 800531e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005322:	b29a      	uxth	r2, r3
 8005324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005326:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800532c:	1c9a      	adds	r2, r3, #2
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	629a      	str	r2, [r3, #40]	@ 0x28
 8005332:	e026      	b.n	8005382 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005338:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800533a:	2300      	movs	r3, #0
 800533c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005346:	d007      	beq.n	8005358 <UART_Receive_IT+0x74>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10a      	bne.n	8005366 <UART_Receive_IT+0x82>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d106      	bne.n	8005366 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	b2da      	uxtb	r2, r3
 8005360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005362:	701a      	strb	r2, [r3, #0]
 8005364:	e008      	b.n	8005378 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	b2db      	uxtb	r3, r3
 800536e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005372:	b2da      	uxtb	r2, r3
 8005374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005376:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005386:	b29b      	uxth	r3, r3
 8005388:	3b01      	subs	r3, #1
 800538a:	b29b      	uxth	r3, r3
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	4619      	mov	r1, r3
 8005390:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005392:	2b00      	cmp	r3, #0
 8005394:	d15d      	bne.n	8005452 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0220 	bic.w	r2, r2, #32
 80053a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68da      	ldr	r2, [r3, #12]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	695a      	ldr	r2, [r3, #20]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 0201 	bic.w	r2, r2, #1
 80053c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2220      	movs	r2, #32
 80053ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d135      	bne.n	8005448 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	330c      	adds	r3, #12
 80053e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	e853 3f00 	ldrex	r3, [r3]
 80053f0:	613b      	str	r3, [r7, #16]
   return(result);
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f023 0310 	bic.w	r3, r3, #16
 80053f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	330c      	adds	r3, #12
 8005400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005402:	623a      	str	r2, [r7, #32]
 8005404:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005406:	69f9      	ldr	r1, [r7, #28]
 8005408:	6a3a      	ldr	r2, [r7, #32]
 800540a:	e841 2300 	strex	r3, r2, [r1]
 800540e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1e5      	bne.n	80053e2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0310 	and.w	r3, r3, #16
 8005420:	2b10      	cmp	r3, #16
 8005422:	d10a      	bne.n	800543a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005424:	2300      	movs	r3, #0
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800543e:	4619      	mov	r1, r3
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7ff fdd1 	bl	8004fe8 <HAL_UARTEx_RxEventCallback>
 8005446:	e002      	b.n	800544e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7fb fc3d 	bl	8000cc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800544e:	2300      	movs	r3, #0
 8005450:	e002      	b.n	8005458 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	e000      	b.n	8005458 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005456:	2302      	movs	r3, #2
  }
}
 8005458:	4618      	mov	r0, r3
 800545a:	3730      	adds	r7, #48	@ 0x30
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005464:	b0c0      	sub	sp, #256	@ 0x100
 8005466:	af00      	add	r7, sp, #0
 8005468:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800546c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800547c:	68d9      	ldr	r1, [r3, #12]
 800547e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	ea40 0301 	orr.w	r3, r0, r1
 8005488:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800548a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800548e:	689a      	ldr	r2, [r3, #8]
 8005490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	431a      	orrs	r2, r3
 8005498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	431a      	orrs	r2, r3
 80054a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80054b8:	f021 010c 	bic.w	r1, r1, #12
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054c6:	430b      	orrs	r3, r1
 80054c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80054d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054da:	6999      	ldr	r1, [r3, #24]
 80054dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	ea40 0301 	orr.w	r3, r0, r1
 80054e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	4b8f      	ldr	r3, [pc, #572]	@ (800572c <UART_SetConfig+0x2cc>)
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d005      	beq.n	8005500 <UART_SetConfig+0xa0>
 80054f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	4b8d      	ldr	r3, [pc, #564]	@ (8005730 <UART_SetConfig+0x2d0>)
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d104      	bne.n	800550a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005500:	f7fe fa16 	bl	8003930 <HAL_RCC_GetPCLK2Freq>
 8005504:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005508:	e003      	b.n	8005512 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800550a:	f7fe f9fd 	bl	8003908 <HAL_RCC_GetPCLK1Freq>
 800550e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800551c:	f040 810c 	bne.w	8005738 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005524:	2200      	movs	r2, #0
 8005526:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800552a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800552e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005532:	4622      	mov	r2, r4
 8005534:	462b      	mov	r3, r5
 8005536:	1891      	adds	r1, r2, r2
 8005538:	65b9      	str	r1, [r7, #88]	@ 0x58
 800553a:	415b      	adcs	r3, r3
 800553c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800553e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005542:	4621      	mov	r1, r4
 8005544:	eb12 0801 	adds.w	r8, r2, r1
 8005548:	4629      	mov	r1, r5
 800554a:	eb43 0901 	adc.w	r9, r3, r1
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	f04f 0300 	mov.w	r3, #0
 8005556:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800555a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800555e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005562:	4690      	mov	r8, r2
 8005564:	4699      	mov	r9, r3
 8005566:	4623      	mov	r3, r4
 8005568:	eb18 0303 	adds.w	r3, r8, r3
 800556c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005570:	462b      	mov	r3, r5
 8005572:	eb49 0303 	adc.w	r3, r9, r3
 8005576:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800557a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005586:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800558a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800558e:	460b      	mov	r3, r1
 8005590:	18db      	adds	r3, r3, r3
 8005592:	653b      	str	r3, [r7, #80]	@ 0x50
 8005594:	4613      	mov	r3, r2
 8005596:	eb42 0303 	adc.w	r3, r2, r3
 800559a:	657b      	str	r3, [r7, #84]	@ 0x54
 800559c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80055a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80055a4:	f7fa fe8c 	bl	80002c0 <__aeabi_uldivmod>
 80055a8:	4602      	mov	r2, r0
 80055aa:	460b      	mov	r3, r1
 80055ac:	4b61      	ldr	r3, [pc, #388]	@ (8005734 <UART_SetConfig+0x2d4>)
 80055ae:	fba3 2302 	umull	r2, r3, r3, r2
 80055b2:	095b      	lsrs	r3, r3, #5
 80055b4:	011c      	lsls	r4, r3, #4
 80055b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055ba:	2200      	movs	r2, #0
 80055bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80055c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80055c8:	4642      	mov	r2, r8
 80055ca:	464b      	mov	r3, r9
 80055cc:	1891      	adds	r1, r2, r2
 80055ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80055d0:	415b      	adcs	r3, r3
 80055d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80055d8:	4641      	mov	r1, r8
 80055da:	eb12 0a01 	adds.w	sl, r2, r1
 80055de:	4649      	mov	r1, r9
 80055e0:	eb43 0b01 	adc.w	fp, r3, r1
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055f8:	4692      	mov	sl, r2
 80055fa:	469b      	mov	fp, r3
 80055fc:	4643      	mov	r3, r8
 80055fe:	eb1a 0303 	adds.w	r3, sl, r3
 8005602:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005606:	464b      	mov	r3, r9
 8005608:	eb4b 0303 	adc.w	r3, fp, r3
 800560c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800561c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005620:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005624:	460b      	mov	r3, r1
 8005626:	18db      	adds	r3, r3, r3
 8005628:	643b      	str	r3, [r7, #64]	@ 0x40
 800562a:	4613      	mov	r3, r2
 800562c:	eb42 0303 	adc.w	r3, r2, r3
 8005630:	647b      	str	r3, [r7, #68]	@ 0x44
 8005632:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005636:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800563a:	f7fa fe41 	bl	80002c0 <__aeabi_uldivmod>
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	4611      	mov	r1, r2
 8005644:	4b3b      	ldr	r3, [pc, #236]	@ (8005734 <UART_SetConfig+0x2d4>)
 8005646:	fba3 2301 	umull	r2, r3, r3, r1
 800564a:	095b      	lsrs	r3, r3, #5
 800564c:	2264      	movs	r2, #100	@ 0x64
 800564e:	fb02 f303 	mul.w	r3, r2, r3
 8005652:	1acb      	subs	r3, r1, r3
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800565a:	4b36      	ldr	r3, [pc, #216]	@ (8005734 <UART_SetConfig+0x2d4>)
 800565c:	fba3 2302 	umull	r2, r3, r3, r2
 8005660:	095b      	lsrs	r3, r3, #5
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005668:	441c      	add	r4, r3
 800566a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800566e:	2200      	movs	r2, #0
 8005670:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005674:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005678:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800567c:	4642      	mov	r2, r8
 800567e:	464b      	mov	r3, r9
 8005680:	1891      	adds	r1, r2, r2
 8005682:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005684:	415b      	adcs	r3, r3
 8005686:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005688:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800568c:	4641      	mov	r1, r8
 800568e:	1851      	adds	r1, r2, r1
 8005690:	6339      	str	r1, [r7, #48]	@ 0x30
 8005692:	4649      	mov	r1, r9
 8005694:	414b      	adcs	r3, r1
 8005696:	637b      	str	r3, [r7, #52]	@ 0x34
 8005698:	f04f 0200 	mov.w	r2, #0
 800569c:	f04f 0300 	mov.w	r3, #0
 80056a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80056a4:	4659      	mov	r1, fp
 80056a6:	00cb      	lsls	r3, r1, #3
 80056a8:	4651      	mov	r1, sl
 80056aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056ae:	4651      	mov	r1, sl
 80056b0:	00ca      	lsls	r2, r1, #3
 80056b2:	4610      	mov	r0, r2
 80056b4:	4619      	mov	r1, r3
 80056b6:	4603      	mov	r3, r0
 80056b8:	4642      	mov	r2, r8
 80056ba:	189b      	adds	r3, r3, r2
 80056bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056c0:	464b      	mov	r3, r9
 80056c2:	460a      	mov	r2, r1
 80056c4:	eb42 0303 	adc.w	r3, r2, r3
 80056c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80056dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80056e0:	460b      	mov	r3, r1
 80056e2:	18db      	adds	r3, r3, r3
 80056e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056e6:	4613      	mov	r3, r2
 80056e8:	eb42 0303 	adc.w	r3, r2, r3
 80056ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80056f6:	f7fa fde3 	bl	80002c0 <__aeabi_uldivmod>
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005734 <UART_SetConfig+0x2d4>)
 8005700:	fba3 1302 	umull	r1, r3, r3, r2
 8005704:	095b      	lsrs	r3, r3, #5
 8005706:	2164      	movs	r1, #100	@ 0x64
 8005708:	fb01 f303 	mul.w	r3, r1, r3
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	3332      	adds	r3, #50	@ 0x32
 8005712:	4a08      	ldr	r2, [pc, #32]	@ (8005734 <UART_SetConfig+0x2d4>)
 8005714:	fba2 2303 	umull	r2, r3, r2, r3
 8005718:	095b      	lsrs	r3, r3, #5
 800571a:	f003 0207 	and.w	r2, r3, #7
 800571e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4422      	add	r2, r4
 8005726:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005728:	e106      	b.n	8005938 <UART_SetConfig+0x4d8>
 800572a:	bf00      	nop
 800572c:	40011000 	.word	0x40011000
 8005730:	40011400 	.word	0x40011400
 8005734:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800573c:	2200      	movs	r2, #0
 800573e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005742:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005746:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800574a:	4642      	mov	r2, r8
 800574c:	464b      	mov	r3, r9
 800574e:	1891      	adds	r1, r2, r2
 8005750:	6239      	str	r1, [r7, #32]
 8005752:	415b      	adcs	r3, r3
 8005754:	627b      	str	r3, [r7, #36]	@ 0x24
 8005756:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800575a:	4641      	mov	r1, r8
 800575c:	1854      	adds	r4, r2, r1
 800575e:	4649      	mov	r1, r9
 8005760:	eb43 0501 	adc.w	r5, r3, r1
 8005764:	f04f 0200 	mov.w	r2, #0
 8005768:	f04f 0300 	mov.w	r3, #0
 800576c:	00eb      	lsls	r3, r5, #3
 800576e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005772:	00e2      	lsls	r2, r4, #3
 8005774:	4614      	mov	r4, r2
 8005776:	461d      	mov	r5, r3
 8005778:	4643      	mov	r3, r8
 800577a:	18e3      	adds	r3, r4, r3
 800577c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005780:	464b      	mov	r3, r9
 8005782:	eb45 0303 	adc.w	r3, r5, r3
 8005786:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800578a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005796:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800579a:	f04f 0200 	mov.w	r2, #0
 800579e:	f04f 0300 	mov.w	r3, #0
 80057a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80057a6:	4629      	mov	r1, r5
 80057a8:	008b      	lsls	r3, r1, #2
 80057aa:	4621      	mov	r1, r4
 80057ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057b0:	4621      	mov	r1, r4
 80057b2:	008a      	lsls	r2, r1, #2
 80057b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80057b8:	f7fa fd82 	bl	80002c0 <__aeabi_uldivmod>
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	4b60      	ldr	r3, [pc, #384]	@ (8005944 <UART_SetConfig+0x4e4>)
 80057c2:	fba3 2302 	umull	r2, r3, r3, r2
 80057c6:	095b      	lsrs	r3, r3, #5
 80057c8:	011c      	lsls	r4, r3, #4
 80057ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ce:	2200      	movs	r2, #0
 80057d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80057d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80057d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80057dc:	4642      	mov	r2, r8
 80057de:	464b      	mov	r3, r9
 80057e0:	1891      	adds	r1, r2, r2
 80057e2:	61b9      	str	r1, [r7, #24]
 80057e4:	415b      	adcs	r3, r3
 80057e6:	61fb      	str	r3, [r7, #28]
 80057e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057ec:	4641      	mov	r1, r8
 80057ee:	1851      	adds	r1, r2, r1
 80057f0:	6139      	str	r1, [r7, #16]
 80057f2:	4649      	mov	r1, r9
 80057f4:	414b      	adcs	r3, r1
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	f04f 0300 	mov.w	r3, #0
 8005800:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005804:	4659      	mov	r1, fp
 8005806:	00cb      	lsls	r3, r1, #3
 8005808:	4651      	mov	r1, sl
 800580a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800580e:	4651      	mov	r1, sl
 8005810:	00ca      	lsls	r2, r1, #3
 8005812:	4610      	mov	r0, r2
 8005814:	4619      	mov	r1, r3
 8005816:	4603      	mov	r3, r0
 8005818:	4642      	mov	r2, r8
 800581a:	189b      	adds	r3, r3, r2
 800581c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005820:	464b      	mov	r3, r9
 8005822:	460a      	mov	r2, r1
 8005824:	eb42 0303 	adc.w	r3, r2, r3
 8005828:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800582c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005836:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005844:	4649      	mov	r1, r9
 8005846:	008b      	lsls	r3, r1, #2
 8005848:	4641      	mov	r1, r8
 800584a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800584e:	4641      	mov	r1, r8
 8005850:	008a      	lsls	r2, r1, #2
 8005852:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005856:	f7fa fd33 	bl	80002c0 <__aeabi_uldivmod>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	4611      	mov	r1, r2
 8005860:	4b38      	ldr	r3, [pc, #224]	@ (8005944 <UART_SetConfig+0x4e4>)
 8005862:	fba3 2301 	umull	r2, r3, r3, r1
 8005866:	095b      	lsrs	r3, r3, #5
 8005868:	2264      	movs	r2, #100	@ 0x64
 800586a:	fb02 f303 	mul.w	r3, r2, r3
 800586e:	1acb      	subs	r3, r1, r3
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	3332      	adds	r3, #50	@ 0x32
 8005874:	4a33      	ldr	r2, [pc, #204]	@ (8005944 <UART_SetConfig+0x4e4>)
 8005876:	fba2 2303 	umull	r2, r3, r2, r3
 800587a:	095b      	lsrs	r3, r3, #5
 800587c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005880:	441c      	add	r4, r3
 8005882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005886:	2200      	movs	r2, #0
 8005888:	673b      	str	r3, [r7, #112]	@ 0x70
 800588a:	677a      	str	r2, [r7, #116]	@ 0x74
 800588c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005890:	4642      	mov	r2, r8
 8005892:	464b      	mov	r3, r9
 8005894:	1891      	adds	r1, r2, r2
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	415b      	adcs	r3, r3
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058a0:	4641      	mov	r1, r8
 80058a2:	1851      	adds	r1, r2, r1
 80058a4:	6039      	str	r1, [r7, #0]
 80058a6:	4649      	mov	r1, r9
 80058a8:	414b      	adcs	r3, r1
 80058aa:	607b      	str	r3, [r7, #4]
 80058ac:	f04f 0200 	mov.w	r2, #0
 80058b0:	f04f 0300 	mov.w	r3, #0
 80058b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058b8:	4659      	mov	r1, fp
 80058ba:	00cb      	lsls	r3, r1, #3
 80058bc:	4651      	mov	r1, sl
 80058be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058c2:	4651      	mov	r1, sl
 80058c4:	00ca      	lsls	r2, r1, #3
 80058c6:	4610      	mov	r0, r2
 80058c8:	4619      	mov	r1, r3
 80058ca:	4603      	mov	r3, r0
 80058cc:	4642      	mov	r2, r8
 80058ce:	189b      	adds	r3, r3, r2
 80058d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058d2:	464b      	mov	r3, r9
 80058d4:	460a      	mov	r2, r1
 80058d6:	eb42 0303 	adc.w	r3, r2, r3
 80058da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80058e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80058e8:	f04f 0200 	mov.w	r2, #0
 80058ec:	f04f 0300 	mov.w	r3, #0
 80058f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80058f4:	4649      	mov	r1, r9
 80058f6:	008b      	lsls	r3, r1, #2
 80058f8:	4641      	mov	r1, r8
 80058fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058fe:	4641      	mov	r1, r8
 8005900:	008a      	lsls	r2, r1, #2
 8005902:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005906:	f7fa fcdb 	bl	80002c0 <__aeabi_uldivmod>
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	4b0d      	ldr	r3, [pc, #52]	@ (8005944 <UART_SetConfig+0x4e4>)
 8005910:	fba3 1302 	umull	r1, r3, r3, r2
 8005914:	095b      	lsrs	r3, r3, #5
 8005916:	2164      	movs	r1, #100	@ 0x64
 8005918:	fb01 f303 	mul.w	r3, r1, r3
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	011b      	lsls	r3, r3, #4
 8005920:	3332      	adds	r3, #50	@ 0x32
 8005922:	4a08      	ldr	r2, [pc, #32]	@ (8005944 <UART_SetConfig+0x4e4>)
 8005924:	fba2 2303 	umull	r2, r3, r2, r3
 8005928:	095b      	lsrs	r3, r3, #5
 800592a:	f003 020f 	and.w	r2, r3, #15
 800592e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4422      	add	r2, r4
 8005936:	609a      	str	r2, [r3, #8]
}
 8005938:	bf00      	nop
 800593a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800593e:	46bd      	mov	sp, r7
 8005940:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005944:	51eb851f 	.word	0x51eb851f

08005948 <__NVIC_SetPriority>:
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	4603      	mov	r3, r0
 8005950:	6039      	str	r1, [r7, #0]
 8005952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005958:	2b00      	cmp	r3, #0
 800595a:	db0a      	blt.n	8005972 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	b2da      	uxtb	r2, r3
 8005960:	490c      	ldr	r1, [pc, #48]	@ (8005994 <__NVIC_SetPriority+0x4c>)
 8005962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005966:	0112      	lsls	r2, r2, #4
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	440b      	add	r3, r1
 800596c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005970:	e00a      	b.n	8005988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	b2da      	uxtb	r2, r3
 8005976:	4908      	ldr	r1, [pc, #32]	@ (8005998 <__NVIC_SetPriority+0x50>)
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	f003 030f 	and.w	r3, r3, #15
 800597e:	3b04      	subs	r3, #4
 8005980:	0112      	lsls	r2, r2, #4
 8005982:	b2d2      	uxtb	r2, r2
 8005984:	440b      	add	r3, r1
 8005986:	761a      	strb	r2, [r3, #24]
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	e000e100 	.word	0xe000e100
 8005998:	e000ed00 	.word	0xe000ed00

0800599c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80059a0:	4b05      	ldr	r3, [pc, #20]	@ (80059b8 <SysTick_Handler+0x1c>)
 80059a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80059a4:	f002 f8c0 	bl	8007b28 <xTaskGetSchedulerState>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d001      	beq.n	80059b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80059ae:	f002 ffbb 	bl	8008928 <xPortSysTickHandler>
  }
}
 80059b2:	bf00      	nop
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	e000e010 	.word	0xe000e010

080059bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80059c0:	2100      	movs	r1, #0
 80059c2:	f06f 0004 	mvn.w	r0, #4
 80059c6:	f7ff ffbf 	bl	8005948 <__NVIC_SetPriority>
#endif
}
 80059ca:	bf00      	nop
 80059cc:	bd80      	pop	{r7, pc}
	...

080059d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059d6:	f3ef 8305 	mrs	r3, IPSR
 80059da:	603b      	str	r3, [r7, #0]
  return(result);
 80059dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80059e2:	f06f 0305 	mvn.w	r3, #5
 80059e6:	607b      	str	r3, [r7, #4]
 80059e8:	e00c      	b.n	8005a04 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80059ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005a14 <osKernelInitialize+0x44>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d105      	bne.n	80059fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80059f2:	4b08      	ldr	r3, [pc, #32]	@ (8005a14 <osKernelInitialize+0x44>)
 80059f4:	2201      	movs	r2, #1
 80059f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80059f8:	2300      	movs	r3, #0
 80059fa:	607b      	str	r3, [r7, #4]
 80059fc:	e002      	b.n	8005a04 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80059fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005a02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005a04:	687b      	ldr	r3, [r7, #4]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	200001e8 	.word	0x200001e8

08005a18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a1e:	f3ef 8305 	mrs	r3, IPSR
 8005a22:	603b      	str	r3, [r7, #0]
  return(result);
 8005a24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005a2a:	f06f 0305 	mvn.w	r3, #5
 8005a2e:	607b      	str	r3, [r7, #4]
 8005a30:	e010      	b.n	8005a54 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005a32:	4b0b      	ldr	r3, [pc, #44]	@ (8005a60 <osKernelStart+0x48>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d109      	bne.n	8005a4e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005a3a:	f7ff ffbf 	bl	80059bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005a3e:	4b08      	ldr	r3, [pc, #32]	@ (8005a60 <osKernelStart+0x48>)
 8005a40:	2202      	movs	r2, #2
 8005a42:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005a44:	f001 fc0c 	bl	8007260 <vTaskStartScheduler>
      stat = osOK;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	607b      	str	r3, [r7, #4]
 8005a4c:	e002      	b.n	8005a54 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005a54:	687b      	ldr	r3, [r7, #4]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	200001e8 	.word	0x200001e8

08005a64 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08e      	sub	sp, #56	@ 0x38
 8005a68:	af04      	add	r7, sp, #16
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005a70:	2300      	movs	r3, #0
 8005a72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a74:	f3ef 8305 	mrs	r3, IPSR
 8005a78:	617b      	str	r3, [r7, #20]
  return(result);
 8005a7a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d17e      	bne.n	8005b7e <osThreadNew+0x11a>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d07b      	beq.n	8005b7e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005a86:	2380      	movs	r3, #128	@ 0x80
 8005a88:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005a8a:	2318      	movs	r3, #24
 8005a8c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005a92:	f04f 33ff 	mov.w	r3, #4294967295
 8005a96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d045      	beq.n	8005b2a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <osThreadNew+0x48>
        name = attr->name;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d008      	beq.n	8005ad2 <osThreadNew+0x6e>
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	2b38      	cmp	r3, #56	@ 0x38
 8005ac4:	d805      	bhi.n	8005ad2 <osThreadNew+0x6e>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <osThreadNew+0x72>
        return (NULL);
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	e054      	b.n	8005b80 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	089b      	lsrs	r3, r3, #2
 8005ae4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00e      	beq.n	8005b0c <osThreadNew+0xa8>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	2ba7      	cmp	r3, #167	@ 0xa7
 8005af4:	d90a      	bls.n	8005b0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d006      	beq.n	8005b0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <osThreadNew+0xa8>
        mem = 1;
 8005b06:	2301      	movs	r3, #1
 8005b08:	61bb      	str	r3, [r7, #24]
 8005b0a:	e010      	b.n	8005b2e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10c      	bne.n	8005b2e <osThreadNew+0xca>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d108      	bne.n	8005b2e <osThreadNew+0xca>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d104      	bne.n	8005b2e <osThreadNew+0xca>
          mem = 0;
 8005b24:	2300      	movs	r3, #0
 8005b26:	61bb      	str	r3, [r7, #24]
 8005b28:	e001      	b.n	8005b2e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d110      	bne.n	8005b56 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b3c:	9202      	str	r2, [sp, #8]
 8005b3e:	9301      	str	r3, [sp, #4]
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	6a3a      	ldr	r2, [r7, #32]
 8005b48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f001 f994 	bl	8006e78 <xTaskCreateStatic>
 8005b50:	4603      	mov	r3, r0
 8005b52:	613b      	str	r3, [r7, #16]
 8005b54:	e013      	b.n	8005b7e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d110      	bne.n	8005b7e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	f107 0310 	add.w	r3, r7, #16
 8005b64:	9301      	str	r3, [sp, #4]
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f001 f9e2 	bl	8006f38 <xTaskCreate>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d001      	beq.n	8005b7e <osThreadNew+0x11a>
            hTask = NULL;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005b7e:	693b      	ldr	r3, [r7, #16]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3728      	adds	r7, #40	@ 0x28
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b90:	f3ef 8305 	mrs	r3, IPSR
 8005b94:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b96:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <osDelay+0x1c>
    stat = osErrorISR;
 8005b9c:	f06f 0305 	mvn.w	r3, #5
 8005ba0:	60fb      	str	r3, [r7, #12]
 8005ba2:	e007      	b.n	8005bb4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d002      	beq.n	8005bb4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f001 fb20 	bl	80071f4 <vTaskDelay>
    }
  }

  return (stat);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b088      	sub	sp, #32
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bca:	f3ef 8305 	mrs	r3, IPSR
 8005bce:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bd0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d174      	bne.n	8005cc0 <osMutexNew+0x102>
    if (attr != NULL) {
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d003      	beq.n	8005be4 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	61bb      	str	r3, [r7, #24]
 8005be2:	e001      	b.n	8005be8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005be4:	2300      	movs	r3, #0
 8005be6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <osMutexNew+0x3a>
      rmtx = 1U;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	e001      	b.n	8005bfc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	f003 0308 	and.w	r3, r3, #8
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d15c      	bne.n	8005cc0 <osMutexNew+0x102>
      mem = -1;
 8005c06:	f04f 33ff 	mov.w	r3, #4294967295
 8005c0a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d015      	beq.n	8005c3e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d006      	beq.n	8005c28 <osMutexNew+0x6a>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	2b4f      	cmp	r3, #79	@ 0x4f
 8005c20:	d902      	bls.n	8005c28 <osMutexNew+0x6a>
          mem = 1;
 8005c22:	2301      	movs	r3, #1
 8005c24:	613b      	str	r3, [r7, #16]
 8005c26:	e00c      	b.n	8005c42 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d108      	bne.n	8005c42 <osMutexNew+0x84>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d104      	bne.n	8005c42 <osMutexNew+0x84>
            mem = 0;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	613b      	str	r3, [r7, #16]
 8005c3c:	e001      	b.n	8005c42 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d112      	bne.n	8005c6e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d007      	beq.n	8005c5e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	4619      	mov	r1, r3
 8005c54:	2004      	movs	r0, #4
 8005c56:	f000 fb20 	bl	800629a <xQueueCreateMutexStatic>
 8005c5a:	61f8      	str	r0, [r7, #28]
 8005c5c:	e016      	b.n	8005c8c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	4619      	mov	r1, r3
 8005c64:	2001      	movs	r0, #1
 8005c66:	f000 fb18 	bl	800629a <xQueueCreateMutexStatic>
 8005c6a:	61f8      	str	r0, [r7, #28]
 8005c6c:	e00e      	b.n	8005c8c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10b      	bne.n	8005c8c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d004      	beq.n	8005c84 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005c7a:	2004      	movs	r0, #4
 8005c7c:	f000 faf5 	bl	800626a <xQueueCreateMutex>
 8005c80:	61f8      	str	r0, [r7, #28]
 8005c82:	e003      	b.n	8005c8c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005c84:	2001      	movs	r0, #1
 8005c86:	f000 faf0 	bl	800626a <xQueueCreateMutex>
 8005c8a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00c      	beq.n	8005cac <osMutexNew+0xee>
        if (attr != NULL) {
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <osMutexNew+0xe2>
          name = attr->name;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	60fb      	str	r3, [r7, #12]
 8005c9e:	e001      	b.n	8005ca4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005ca4:	68f9      	ldr	r1, [r7, #12]
 8005ca6:	69f8      	ldr	r0, [r7, #28]
 8005ca8:	f001 f85e 	bl	8006d68 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d006      	beq.n	8005cc0 <osMutexNew+0x102>
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	f043 0301 	orr.w	r3, r3, #1
 8005cbe:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005cc0:	69fb      	ldr	r3, [r7, #28]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3720      	adds	r7, #32
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b08a      	sub	sp, #40	@ 0x28
 8005cce:	af02      	add	r7, sp, #8
 8005cd0:	60f8      	str	r0, [r7, #12]
 8005cd2:	60b9      	str	r1, [r7, #8]
 8005cd4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cda:	f3ef 8305 	mrs	r3, IPSR
 8005cde:	613b      	str	r3, [r7, #16]
  return(result);
 8005ce0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d175      	bne.n	8005dd2 <osSemaphoreNew+0x108>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d072      	beq.n	8005dd2 <osSemaphoreNew+0x108>
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d86e      	bhi.n	8005dd2 <osSemaphoreNew+0x108>
    mem = -1;
 8005cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d015      	beq.n	8005d2c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d006      	beq.n	8005d16 <osSemaphoreNew+0x4c>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	2b4f      	cmp	r3, #79	@ 0x4f
 8005d0e:	d902      	bls.n	8005d16 <osSemaphoreNew+0x4c>
        mem = 1;
 8005d10:	2301      	movs	r3, #1
 8005d12:	61bb      	str	r3, [r7, #24]
 8005d14:	e00c      	b.n	8005d30 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d108      	bne.n	8005d30 <osSemaphoreNew+0x66>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d104      	bne.n	8005d30 <osSemaphoreNew+0x66>
          mem = 0;
 8005d26:	2300      	movs	r3, #0
 8005d28:	61bb      	str	r3, [r7, #24]
 8005d2a:	e001      	b.n	8005d30 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d36:	d04c      	beq.n	8005dd2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d128      	bne.n	8005d90 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d10a      	bne.n	8005d5a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	2203      	movs	r2, #3
 8005d4a:	9200      	str	r2, [sp, #0]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	2100      	movs	r1, #0
 8005d50:	2001      	movs	r0, #1
 8005d52:	f000 f995 	bl	8006080 <xQueueGenericCreateStatic>
 8005d56:	61f8      	str	r0, [r7, #28]
 8005d58:	e005      	b.n	8005d66 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005d5a:	2203      	movs	r2, #3
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	2001      	movs	r0, #1
 8005d60:	f000 fa0b 	bl	800617a <xQueueGenericCreate>
 8005d64:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d022      	beq.n	8005db2 <osSemaphoreNew+0xe8>
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d01f      	beq.n	8005db2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005d72:	2300      	movs	r3, #0
 8005d74:	2200      	movs	r2, #0
 8005d76:	2100      	movs	r1, #0
 8005d78:	69f8      	ldr	r0, [r7, #28]
 8005d7a:	f000 fb17 	bl	80063ac <xQueueGenericSend>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d016      	beq.n	8005db2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005d84:	69f8      	ldr	r0, [r7, #28]
 8005d86:	f000 fea3 	bl	8006ad0 <vQueueDelete>
            hSemaphore = NULL;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	61fb      	str	r3, [r7, #28]
 8005d8e:	e010      	b.n	8005db2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d108      	bne.n	8005da8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	68b9      	ldr	r1, [r7, #8]
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 fa96 	bl	80062d0 <xQueueCreateCountingSemaphoreStatic>
 8005da4:	61f8      	str	r0, [r7, #28]
 8005da6:	e004      	b.n	8005db2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005da8:	68b9      	ldr	r1, [r7, #8]
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f000 fac9 	bl	8006342 <xQueueCreateCountingSemaphore>
 8005db0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00c      	beq.n	8005dd2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	617b      	str	r3, [r7, #20]
 8005dc4:	e001      	b.n	8005dca <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005dca:	6979      	ldr	r1, [r7, #20]
 8005dcc:	69f8      	ldr	r0, [r7, #28]
 8005dce:	f000 ffcb 	bl	8006d68 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005dd2:	69fb      	ldr	r3, [r7, #28]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3720      	adds	r7, #32
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4a07      	ldr	r2, [pc, #28]	@ (8005e08 <vApplicationGetIdleTaskMemory+0x2c>)
 8005dec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	4a06      	ldr	r2, [pc, #24]	@ (8005e0c <vApplicationGetIdleTaskMemory+0x30>)
 8005df2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2280      	movs	r2, #128	@ 0x80
 8005df8:	601a      	str	r2, [r3, #0]
}
 8005dfa:	bf00      	nop
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	200001ec 	.word	0x200001ec
 8005e0c:	20000294 	.word	0x20000294

08005e10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4a07      	ldr	r2, [pc, #28]	@ (8005e3c <vApplicationGetTimerTaskMemory+0x2c>)
 8005e20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	4a06      	ldr	r2, [pc, #24]	@ (8005e40 <vApplicationGetTimerTaskMemory+0x30>)
 8005e26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e2e:	601a      	str	r2, [r3, #0]
}
 8005e30:	bf00      	nop
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	20000494 	.word	0x20000494
 8005e40:	2000053c 	.word	0x2000053c

08005e44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f103 0208 	add.w	r2, r3, #8
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f103 0208 	add.w	r2, r3, #8
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f103 0208 	add.w	r2, r3, #8
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e92:	bf00      	nop
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b085      	sub	sp, #20
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	1c5a      	adds	r2, r3, #1
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	601a      	str	r2, [r3, #0]
}
 8005eda:	bf00      	nop
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b085      	sub	sp, #20
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
 8005eee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efc:	d103      	bne.n	8005f06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	e00c      	b.n	8005f20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	3308      	adds	r3, #8
 8005f0a:	60fb      	str	r3, [r7, #12]
 8005f0c:	e002      	b.n	8005f14 <vListInsert+0x2e>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d2f6      	bcs.n	8005f0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	601a      	str	r2, [r3, #0]
}
 8005f4c:	bf00      	nop
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	6892      	ldr	r2, [r2, #8]
 8005f6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	6852      	ldr	r2, [r2, #4]
 8005f78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d103      	bne.n	8005f8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	1e5a      	subs	r2, r3, #1
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10b      	bne.n	8005fd8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005fd2:	bf00      	nop
 8005fd4:	bf00      	nop
 8005fd6:	e7fd      	b.n	8005fd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005fd8:	f002 fc16 	bl	8008808 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fe4:	68f9      	ldr	r1, [r7, #12]
 8005fe6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005fe8:	fb01 f303 	mul.w	r3, r1, r3
 8005fec:	441a      	add	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006008:	3b01      	subs	r3, #1
 800600a:	68f9      	ldr	r1, [r7, #12]
 800600c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800600e:	fb01 f303 	mul.w	r3, r1, r3
 8006012:	441a      	add	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	22ff      	movs	r2, #255	@ 0xff
 800601c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	22ff      	movs	r2, #255	@ 0xff
 8006024:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d114      	bne.n	8006058 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d01a      	beq.n	800606c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	3310      	adds	r3, #16
 800603a:	4618      	mov	r0, r3
 800603c:	f001 fbae 	bl	800779c <xTaskRemoveFromEventList>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d012      	beq.n	800606c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006046:	4b0d      	ldr	r3, [pc, #52]	@ (800607c <xQueueGenericReset+0xd0>)
 8006048:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	e009      	b.n	800606c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	3310      	adds	r3, #16
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff fef1 	bl	8005e44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	3324      	adds	r3, #36	@ 0x24
 8006066:	4618      	mov	r0, r3
 8006068:	f7ff feec 	bl	8005e44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800606c:	f002 fbfe 	bl	800886c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006070:	2301      	movs	r3, #1
}
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	e000ed04 	.word	0xe000ed04

08006080 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006080:	b580      	push	{r7, lr}
 8006082:	b08e      	sub	sp, #56	@ 0x38
 8006084:	af02      	add	r7, sp, #8
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10b      	bne.n	80060ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80060a6:	bf00      	nop
 80060a8:	bf00      	nop
 80060aa:	e7fd      	b.n	80060a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10b      	bne.n	80060ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80060b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b6:	f383 8811 	msr	BASEPRI, r3
 80060ba:	f3bf 8f6f 	isb	sy
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80060c4:	bf00      	nop
 80060c6:	bf00      	nop
 80060c8:	e7fd      	b.n	80060c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <xQueueGenericCreateStatic+0x56>
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <xQueueGenericCreateStatic+0x5a>
 80060d6:	2301      	movs	r3, #1
 80060d8:	e000      	b.n	80060dc <xQueueGenericCreateStatic+0x5c>
 80060da:	2300      	movs	r3, #0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10b      	bne.n	80060f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	623b      	str	r3, [r7, #32]
}
 80060f2:	bf00      	nop
 80060f4:	bf00      	nop
 80060f6:	e7fd      	b.n	80060f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d102      	bne.n	8006104 <xQueueGenericCreateStatic+0x84>
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <xQueueGenericCreateStatic+0x88>
 8006104:	2301      	movs	r3, #1
 8006106:	e000      	b.n	800610a <xQueueGenericCreateStatic+0x8a>
 8006108:	2300      	movs	r3, #0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10b      	bne.n	8006126 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	61fb      	str	r3, [r7, #28]
}
 8006120:	bf00      	nop
 8006122:	bf00      	nop
 8006124:	e7fd      	b.n	8006122 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006126:	2350      	movs	r3, #80	@ 0x50
 8006128:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2b50      	cmp	r3, #80	@ 0x50
 800612e:	d00b      	beq.n	8006148 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006134:	f383 8811 	msr	BASEPRI, r3
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	61bb      	str	r3, [r7, #24]
}
 8006142:	bf00      	nop
 8006144:	bf00      	nop
 8006146:	e7fd      	b.n	8006144 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006148:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800614e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00d      	beq.n	8006170 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800615c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	4613      	mov	r3, r2
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	68b9      	ldr	r1, [r7, #8]
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 f840 	bl	80061f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006172:	4618      	mov	r0, r3
 8006174:	3730      	adds	r7, #48	@ 0x30
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800617a:	b580      	push	{r7, lr}
 800617c:	b08a      	sub	sp, #40	@ 0x28
 800617e:	af02      	add	r7, sp, #8
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	60b9      	str	r1, [r7, #8]
 8006184:	4613      	mov	r3, r2
 8006186:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10b      	bne.n	80061a6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800618e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	613b      	str	r3, [r7, #16]
}
 80061a0:	bf00      	nop
 80061a2:	bf00      	nop
 80061a4:	e7fd      	b.n	80061a2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	fb02 f303 	mul.w	r3, r2, r3
 80061ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	3350      	adds	r3, #80	@ 0x50
 80061b4:	4618      	mov	r0, r3
 80061b6:	f002 fc49 	bl	8008a4c <pvPortMalloc>
 80061ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d011      	beq.n	80061e6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	3350      	adds	r3, #80	@ 0x50
 80061ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061d4:	79fa      	ldrb	r2, [r7, #7]
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	4613      	mov	r3, r2
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	68b9      	ldr	r1, [r7, #8]
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 f805 	bl	80061f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80061e6:	69bb      	ldr	r3, [r7, #24]
	}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3720      	adds	r7, #32
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d103      	bne.n	800620c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	e002      	b.n	8006212 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800621e:	2101      	movs	r1, #1
 8006220:	69b8      	ldr	r0, [r7, #24]
 8006222:	f7ff fec3 	bl	8005fac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	78fa      	ldrb	r2, [r7, #3]
 800622a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800622e:	bf00      	nop
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006236:	b580      	push	{r7, lr}
 8006238:	b082      	sub	sp, #8
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00e      	beq.n	8006262 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006256:	2300      	movs	r3, #0
 8006258:	2200      	movs	r2, #0
 800625a:	2100      	movs	r1, #0
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f8a5 	bl	80063ac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006262:	bf00      	nop
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800626a:	b580      	push	{r7, lr}
 800626c:	b086      	sub	sp, #24
 800626e:	af00      	add	r7, sp, #0
 8006270:	4603      	mov	r3, r0
 8006272:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006274:	2301      	movs	r3, #1
 8006276:	617b      	str	r3, [r7, #20]
 8006278:	2300      	movs	r3, #0
 800627a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800627c:	79fb      	ldrb	r3, [r7, #7]
 800627e:	461a      	mov	r2, r3
 8006280:	6939      	ldr	r1, [r7, #16]
 8006282:	6978      	ldr	r0, [r7, #20]
 8006284:	f7ff ff79 	bl	800617a <xQueueGenericCreate>
 8006288:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f7ff ffd3 	bl	8006236 <prvInitialiseMutex>

		return xNewQueue;
 8006290:	68fb      	ldr	r3, [r7, #12]
	}
 8006292:	4618      	mov	r0, r3
 8006294:	3718      	adds	r7, #24
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800629a:	b580      	push	{r7, lr}
 800629c:	b088      	sub	sp, #32
 800629e:	af02      	add	r7, sp, #8
 80062a0:	4603      	mov	r3, r0
 80062a2:	6039      	str	r1, [r7, #0]
 80062a4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80062a6:	2301      	movs	r3, #1
 80062a8:	617b      	str	r3, [r7, #20]
 80062aa:	2300      	movs	r3, #0
 80062ac:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80062ae:	79fb      	ldrb	r3, [r7, #7]
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2200      	movs	r2, #0
 80062b6:	6939      	ldr	r1, [r7, #16]
 80062b8:	6978      	ldr	r0, [r7, #20]
 80062ba:	f7ff fee1 	bl	8006080 <xQueueGenericCreateStatic>
 80062be:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f7ff ffb8 	bl	8006236 <prvInitialiseMutex>

		return xNewQueue;
 80062c6:	68fb      	ldr	r3, [r7, #12]
	}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08a      	sub	sp, #40	@ 0x28
 80062d4:	af02      	add	r7, sp, #8
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10b      	bne.n	80062fa <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80062e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e6:	f383 8811 	msr	BASEPRI, r3
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	61bb      	str	r3, [r7, #24]
}
 80062f4:	bf00      	nop
 80062f6:	bf00      	nop
 80062f8:	e7fd      	b.n	80062f6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d90b      	bls.n	800631a <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8006302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	617b      	str	r3, [r7, #20]
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop
 8006318:	e7fd      	b.n	8006316 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800631a:	2302      	movs	r3, #2
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	2100      	movs	r1, #0
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f7ff feab 	bl	8006080 <xQueueGenericCreateStatic>
 800632a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006338:	69fb      	ldr	r3, [r7, #28]
	}
 800633a:	4618      	mov	r0, r3
 800633c:	3720      	adds	r7, #32
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006342:	b580      	push	{r7, lr}
 8006344:	b086      	sub	sp, #24
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10b      	bne.n	800636a <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8006352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	613b      	str	r3, [r7, #16]
}
 8006364:	bf00      	nop
 8006366:	bf00      	nop
 8006368:	e7fd      	b.n	8006366 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	429a      	cmp	r2, r3
 8006370:	d90b      	bls.n	800638a <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	60fb      	str	r3, [r7, #12]
}
 8006384:	bf00      	nop
 8006386:	bf00      	nop
 8006388:	e7fd      	b.n	8006386 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800638a:	2202      	movs	r2, #2
 800638c:	2100      	movs	r1, #0
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7ff fef3 	bl	800617a <xQueueGenericCreate>
 8006394:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80063a2:	697b      	ldr	r3, [r7, #20]
	}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3718      	adds	r7, #24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b08e      	sub	sp, #56	@ 0x38
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80063ba:	2300      	movs	r3, #0
 80063bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80063c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10b      	bne.n	80063e0 <xQueueGenericSend+0x34>
	__asm volatile
 80063c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063cc:	f383 8811 	msr	BASEPRI, r3
 80063d0:	f3bf 8f6f 	isb	sy
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80063da:	bf00      	nop
 80063dc:	bf00      	nop
 80063de:	e7fd      	b.n	80063dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d103      	bne.n	80063ee <xQueueGenericSend+0x42>
 80063e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <xQueueGenericSend+0x46>
 80063ee:	2301      	movs	r3, #1
 80063f0:	e000      	b.n	80063f4 <xQueueGenericSend+0x48>
 80063f2:	2300      	movs	r3, #0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10b      	bne.n	8006410 <xQueueGenericSend+0x64>
	__asm volatile
 80063f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800640a:	bf00      	nop
 800640c:	bf00      	nop
 800640e:	e7fd      	b.n	800640c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d103      	bne.n	800641e <xQueueGenericSend+0x72>
 8006416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800641a:	2b01      	cmp	r3, #1
 800641c:	d101      	bne.n	8006422 <xQueueGenericSend+0x76>
 800641e:	2301      	movs	r3, #1
 8006420:	e000      	b.n	8006424 <xQueueGenericSend+0x78>
 8006422:	2300      	movs	r3, #0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10b      	bne.n	8006440 <xQueueGenericSend+0x94>
	__asm volatile
 8006428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	623b      	str	r3, [r7, #32]
}
 800643a:	bf00      	nop
 800643c:	bf00      	nop
 800643e:	e7fd      	b.n	800643c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006440:	f001 fb72 	bl	8007b28 <xTaskGetSchedulerState>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d102      	bne.n	8006450 <xQueueGenericSend+0xa4>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <xQueueGenericSend+0xa8>
 8006450:	2301      	movs	r3, #1
 8006452:	e000      	b.n	8006456 <xQueueGenericSend+0xaa>
 8006454:	2300      	movs	r3, #0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10b      	bne.n	8006472 <xQueueGenericSend+0xc6>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	61fb      	str	r3, [r7, #28]
}
 800646c:	bf00      	nop
 800646e:	bf00      	nop
 8006470:	e7fd      	b.n	800646e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006472:	f002 f9c9 	bl	8008808 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006478:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800647a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800647e:	429a      	cmp	r2, r3
 8006480:	d302      	bcc.n	8006488 <xQueueGenericSend+0xdc>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b02      	cmp	r3, #2
 8006486:	d129      	bne.n	80064dc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	68b9      	ldr	r1, [r7, #8]
 800648c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800648e:	f000 fb5b 	bl	8006b48 <prvCopyDataToQueue>
 8006492:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006498:	2b00      	cmp	r3, #0
 800649a:	d010      	beq.n	80064be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800649c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649e:	3324      	adds	r3, #36	@ 0x24
 80064a0:	4618      	mov	r0, r3
 80064a2:	f001 f97b 	bl	800779c <xTaskRemoveFromEventList>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d013      	beq.n	80064d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80064ac:	4b3f      	ldr	r3, [pc, #252]	@ (80065ac <xQueueGenericSend+0x200>)
 80064ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064b2:	601a      	str	r2, [r3, #0]
 80064b4:	f3bf 8f4f 	dsb	sy
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	e00a      	b.n	80064d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80064be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d007      	beq.n	80064d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80064c4:	4b39      	ldr	r3, [pc, #228]	@ (80065ac <xQueueGenericSend+0x200>)
 80064c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80064d4:	f002 f9ca 	bl	800886c <vPortExitCritical>
				return pdPASS;
 80064d8:	2301      	movs	r3, #1
 80064da:	e063      	b.n	80065a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d103      	bne.n	80064ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064e2:	f002 f9c3 	bl	800886c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80064e6:	2300      	movs	r3, #0
 80064e8:	e05c      	b.n	80065a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d106      	bne.n	80064fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064f0:	f107 0314 	add.w	r3, r7, #20
 80064f4:	4618      	mov	r0, r3
 80064f6:	f001 f9b5 	bl	8007864 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064fa:	2301      	movs	r3, #1
 80064fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064fe:	f002 f9b5 	bl	800886c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006502:	f000 ff1d 	bl	8007340 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006506:	f002 f97f 	bl	8008808 <vPortEnterCritical>
 800650a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006510:	b25b      	sxtb	r3, r3
 8006512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006516:	d103      	bne.n	8006520 <xQueueGenericSend+0x174>
 8006518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651a:	2200      	movs	r2, #0
 800651c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006522:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006526:	b25b      	sxtb	r3, r3
 8006528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652c:	d103      	bne.n	8006536 <xQueueGenericSend+0x18a>
 800652e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006536:	f002 f999 	bl	800886c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800653a:	1d3a      	adds	r2, r7, #4
 800653c:	f107 0314 	add.w	r3, r7, #20
 8006540:	4611      	mov	r1, r2
 8006542:	4618      	mov	r0, r3
 8006544:	f001 f9a4 	bl	8007890 <xTaskCheckForTimeOut>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d124      	bne.n	8006598 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800654e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006550:	f000 fbf2 	bl	8006d38 <prvIsQueueFull>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d018      	beq.n	800658c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800655a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655c:	3310      	adds	r3, #16
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	4611      	mov	r1, r2
 8006562:	4618      	mov	r0, r3
 8006564:	f001 f8c8 	bl	80076f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006568:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800656a:	f000 fb7d 	bl	8006c68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800656e:	f000 fef5 	bl	800735c <xTaskResumeAll>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	f47f af7c 	bne.w	8006472 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800657a:	4b0c      	ldr	r3, [pc, #48]	@ (80065ac <xQueueGenericSend+0x200>)
 800657c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	f3bf 8f4f 	dsb	sy
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	e772      	b.n	8006472 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800658c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800658e:	f000 fb6b 	bl	8006c68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006592:	f000 fee3 	bl	800735c <xTaskResumeAll>
 8006596:	e76c      	b.n	8006472 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006598:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800659a:	f000 fb65 	bl	8006c68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800659e:	f000 fedd 	bl	800735c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80065a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3738      	adds	r7, #56	@ 0x38
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	e000ed04 	.word	0xe000ed04

080065b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b090      	sub	sp, #64	@ 0x40
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
 80065bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80065c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10b      	bne.n	80065e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80065c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80065da:	bf00      	nop
 80065dc:	bf00      	nop
 80065de:	e7fd      	b.n	80065dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d103      	bne.n	80065ee <xQueueGenericSendFromISR+0x3e>
 80065e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <xQueueGenericSendFromISR+0x42>
 80065ee:	2301      	movs	r3, #1
 80065f0:	e000      	b.n	80065f4 <xQueueGenericSendFromISR+0x44>
 80065f2:	2300      	movs	r3, #0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10b      	bne.n	8006610 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80065f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800660a:	bf00      	nop
 800660c:	bf00      	nop
 800660e:	e7fd      	b.n	800660c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	2b02      	cmp	r3, #2
 8006614:	d103      	bne.n	800661e <xQueueGenericSendFromISR+0x6e>
 8006616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800661a:	2b01      	cmp	r3, #1
 800661c:	d101      	bne.n	8006622 <xQueueGenericSendFromISR+0x72>
 800661e:	2301      	movs	r3, #1
 8006620:	e000      	b.n	8006624 <xQueueGenericSendFromISR+0x74>
 8006622:	2300      	movs	r3, #0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10b      	bne.n	8006640 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662c:	f383 8811 	msr	BASEPRI, r3
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	623b      	str	r3, [r7, #32]
}
 800663a:	bf00      	nop
 800663c:	bf00      	nop
 800663e:	e7fd      	b.n	800663c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006640:	f002 f9c2 	bl	80089c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006644:	f3ef 8211 	mrs	r2, BASEPRI
 8006648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	61fa      	str	r2, [r7, #28]
 800665a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800665c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800665e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006662:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006668:	429a      	cmp	r2, r3
 800666a:	d302      	bcc.n	8006672 <xQueueGenericSendFromISR+0xc2>
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	2b02      	cmp	r3, #2
 8006670:	d12f      	bne.n	80066d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006674:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006678:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800667c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800667e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006680:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	68b9      	ldr	r1, [r7, #8]
 8006686:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006688:	f000 fa5e 	bl	8006b48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800668c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006694:	d112      	bne.n	80066bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800669a:	2b00      	cmp	r3, #0
 800669c:	d016      	beq.n	80066cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800669e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a0:	3324      	adds	r3, #36	@ 0x24
 80066a2:	4618      	mov	r0, r3
 80066a4:	f001 f87a 	bl	800779c <xTaskRemoveFromEventList>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00e      	beq.n	80066cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00b      	beq.n	80066cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	e007      	b.n	80066cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80066bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80066c0:	3301      	adds	r3, #1
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	b25a      	sxtb	r2, r3
 80066c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80066cc:	2301      	movs	r3, #1
 80066ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80066d0:	e001      	b.n	80066d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80066d2:	2300      	movs	r3, #0
 80066d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80066e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3740      	adds	r7, #64	@ 0x40
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b08c      	sub	sp, #48	@ 0x30
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80066f8:	2300      	movs	r3, #0
 80066fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10b      	bne.n	800671e <xQueueReceive+0x32>
	__asm volatile
 8006706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	623b      	str	r3, [r7, #32]
}
 8006718:	bf00      	nop
 800671a:	bf00      	nop
 800671c:	e7fd      	b.n	800671a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d103      	bne.n	800672c <xQueueReceive+0x40>
 8006724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <xQueueReceive+0x44>
 800672c:	2301      	movs	r3, #1
 800672e:	e000      	b.n	8006732 <xQueueReceive+0x46>
 8006730:	2300      	movs	r3, #0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10b      	bne.n	800674e <xQueueReceive+0x62>
	__asm volatile
 8006736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	61fb      	str	r3, [r7, #28]
}
 8006748:	bf00      	nop
 800674a:	bf00      	nop
 800674c:	e7fd      	b.n	800674a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800674e:	f001 f9eb 	bl	8007b28 <xTaskGetSchedulerState>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d102      	bne.n	800675e <xQueueReceive+0x72>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <xQueueReceive+0x76>
 800675e:	2301      	movs	r3, #1
 8006760:	e000      	b.n	8006764 <xQueueReceive+0x78>
 8006762:	2300      	movs	r3, #0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10b      	bne.n	8006780 <xQueueReceive+0x94>
	__asm volatile
 8006768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676c:	f383 8811 	msr	BASEPRI, r3
 8006770:	f3bf 8f6f 	isb	sy
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	61bb      	str	r3, [r7, #24]
}
 800677a:	bf00      	nop
 800677c:	bf00      	nop
 800677e:	e7fd      	b.n	800677c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006780:	f002 f842 	bl	8008808 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006788:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800678a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678c:	2b00      	cmp	r3, #0
 800678e:	d01f      	beq.n	80067d0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006790:	68b9      	ldr	r1, [r7, #8]
 8006792:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006794:	f000 fa42 	bl	8006c1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679a:	1e5a      	subs	r2, r3, #1
 800679c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800679e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00f      	beq.n	80067c8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067aa:	3310      	adds	r3, #16
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 fff5 	bl	800779c <xTaskRemoveFromEventList>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d007      	beq.n	80067c8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80067b8:	4b3c      	ldr	r3, [pc, #240]	@ (80068ac <xQueueReceive+0x1c0>)
 80067ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80067c8:	f002 f850 	bl	800886c <vPortExitCritical>
				return pdPASS;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e069      	b.n	80068a4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d103      	bne.n	80067de <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067d6:	f002 f849 	bl	800886c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80067da:	2300      	movs	r3, #0
 80067dc:	e062      	b.n	80068a4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d106      	bne.n	80067f2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067e4:	f107 0310 	add.w	r3, r7, #16
 80067e8:	4618      	mov	r0, r3
 80067ea:	f001 f83b 	bl	8007864 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067ee:	2301      	movs	r3, #1
 80067f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067f2:	f002 f83b 	bl	800886c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067f6:	f000 fda3 	bl	8007340 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067fa:	f002 f805 	bl	8008808 <vPortEnterCritical>
 80067fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006800:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006804:	b25b      	sxtb	r3, r3
 8006806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680a:	d103      	bne.n	8006814 <xQueueReceive+0x128>
 800680c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006816:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800681a:	b25b      	sxtb	r3, r3
 800681c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006820:	d103      	bne.n	800682a <xQueueReceive+0x13e>
 8006822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800682a:	f002 f81f 	bl	800886c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800682e:	1d3a      	adds	r2, r7, #4
 8006830:	f107 0310 	add.w	r3, r7, #16
 8006834:	4611      	mov	r1, r2
 8006836:	4618      	mov	r0, r3
 8006838:	f001 f82a 	bl	8007890 <xTaskCheckForTimeOut>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d123      	bne.n	800688a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006842:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006844:	f000 fa62 	bl	8006d0c <prvIsQueueEmpty>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d017      	beq.n	800687e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800684e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006850:	3324      	adds	r3, #36	@ 0x24
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	4611      	mov	r1, r2
 8006856:	4618      	mov	r0, r3
 8006858:	f000 ff4e 	bl	80076f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800685c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800685e:	f000 fa03 	bl	8006c68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006862:	f000 fd7b 	bl	800735c <xTaskResumeAll>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d189      	bne.n	8006780 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800686c:	4b0f      	ldr	r3, [pc, #60]	@ (80068ac <xQueueReceive+0x1c0>)
 800686e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	e780      	b.n	8006780 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800687e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006880:	f000 f9f2 	bl	8006c68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006884:	f000 fd6a 	bl	800735c <xTaskResumeAll>
 8006888:	e77a      	b.n	8006780 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800688a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800688c:	f000 f9ec 	bl	8006c68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006890:	f000 fd64 	bl	800735c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006894:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006896:	f000 fa39 	bl	8006d0c <prvIsQueueEmpty>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	f43f af6f 	beq.w	8006780 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80068a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3730      	adds	r7, #48	@ 0x30
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	e000ed04 	.word	0xe000ed04

080068b0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08e      	sub	sp, #56	@ 0x38
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80068ba:	2300      	movs	r3, #0
 80068bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80068c2:	2300      	movs	r3, #0
 80068c4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80068c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10b      	bne.n	80068e4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80068cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d0:	f383 8811 	msr	BASEPRI, r3
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	623b      	str	r3, [r7, #32]
}
 80068de:	bf00      	nop
 80068e0:	bf00      	nop
 80068e2:	e7fd      	b.n	80068e0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80068e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00b      	beq.n	8006904 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	61fb      	str	r3, [r7, #28]
}
 80068fe:	bf00      	nop
 8006900:	bf00      	nop
 8006902:	e7fd      	b.n	8006900 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006904:	f001 f910 	bl	8007b28 <xTaskGetSchedulerState>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d102      	bne.n	8006914 <xQueueSemaphoreTake+0x64>
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <xQueueSemaphoreTake+0x68>
 8006914:	2301      	movs	r3, #1
 8006916:	e000      	b.n	800691a <xQueueSemaphoreTake+0x6a>
 8006918:	2300      	movs	r3, #0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10b      	bne.n	8006936 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	61bb      	str	r3, [r7, #24]
}
 8006930:	bf00      	nop
 8006932:	bf00      	nop
 8006934:	e7fd      	b.n	8006932 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006936:	f001 ff67 	bl	8008808 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800693a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800693c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800693e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006942:	2b00      	cmp	r3, #0
 8006944:	d024      	beq.n	8006990 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006948:	1e5a      	subs	r2, r3, #1
 800694a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800694c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800694e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d104      	bne.n	8006960 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006956:	f001 fa61 	bl	8007e1c <pvTaskIncrementMutexHeldCount>
 800695a:	4602      	mov	r2, r0
 800695c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800695e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00f      	beq.n	8006988 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800696a:	3310      	adds	r3, #16
 800696c:	4618      	mov	r0, r3
 800696e:	f000 ff15 	bl	800779c <xTaskRemoveFromEventList>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d007      	beq.n	8006988 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006978:	4b54      	ldr	r3, [pc, #336]	@ (8006acc <xQueueSemaphoreTake+0x21c>)
 800697a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800697e:	601a      	str	r2, [r3, #0]
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006988:	f001 ff70 	bl	800886c <vPortExitCritical>
				return pdPASS;
 800698c:	2301      	movs	r3, #1
 800698e:	e098      	b.n	8006ac2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d112      	bne.n	80069bc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00b      	beq.n	80069b4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	617b      	str	r3, [r7, #20]
}
 80069ae:	bf00      	nop
 80069b0:	bf00      	nop
 80069b2:	e7fd      	b.n	80069b0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80069b4:	f001 ff5a 	bl	800886c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80069b8:	2300      	movs	r3, #0
 80069ba:	e082      	b.n	8006ac2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d106      	bne.n	80069d0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069c2:	f107 030c 	add.w	r3, r7, #12
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 ff4c 	bl	8007864 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069cc:	2301      	movs	r3, #1
 80069ce:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069d0:	f001 ff4c 	bl	800886c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069d4:	f000 fcb4 	bl	8007340 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069d8:	f001 ff16 	bl	8008808 <vPortEnterCritical>
 80069dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069e2:	b25b      	sxtb	r3, r3
 80069e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e8:	d103      	bne.n	80069f2 <xQueueSemaphoreTake+0x142>
 80069ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069f8:	b25b      	sxtb	r3, r3
 80069fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fe:	d103      	bne.n	8006a08 <xQueueSemaphoreTake+0x158>
 8006a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a08:	f001 ff30 	bl	800886c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a0c:	463a      	mov	r2, r7
 8006a0e:	f107 030c 	add.w	r3, r7, #12
 8006a12:	4611      	mov	r1, r2
 8006a14:	4618      	mov	r0, r3
 8006a16:	f000 ff3b 	bl	8007890 <xTaskCheckForTimeOut>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d132      	bne.n	8006a86 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a22:	f000 f973 	bl	8006d0c <prvIsQueueEmpty>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d026      	beq.n	8006a7a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d109      	bne.n	8006a48 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006a34:	f001 fee8 	bl	8008808 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f001 f891 	bl	8007b64 <xTaskPriorityInherit>
 8006a42:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006a44:	f001 ff12 	bl	800886c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4a:	3324      	adds	r3, #36	@ 0x24
 8006a4c:	683a      	ldr	r2, [r7, #0]
 8006a4e:	4611      	mov	r1, r2
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 fe51 	bl	80076f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a58:	f000 f906 	bl	8006c68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a5c:	f000 fc7e 	bl	800735c <xTaskResumeAll>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f47f af67 	bne.w	8006936 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006a68:	4b18      	ldr	r3, [pc, #96]	@ (8006acc <xQueueSemaphoreTake+0x21c>)
 8006a6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a6e:	601a      	str	r2, [r3, #0]
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	e75d      	b.n	8006936 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006a7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a7c:	f000 f8f4 	bl	8006c68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a80:	f000 fc6c 	bl	800735c <xTaskResumeAll>
 8006a84:	e757      	b.n	8006936 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006a86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a88:	f000 f8ee 	bl	8006c68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a8c:	f000 fc66 	bl	800735c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a92:	f000 f93b 	bl	8006d0c <prvIsQueueEmpty>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f43f af4c 	beq.w	8006936 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00d      	beq.n	8006ac0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006aa4:	f001 feb0 	bl	8008808 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006aa8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006aaa:	f000 f835 	bl	8006b18 <prvGetDisinheritPriorityAfterTimeout>
 8006aae:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f001 f92c 	bl	8007d14 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006abc:	f001 fed6 	bl	800886c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ac0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3738      	adds	r7, #56	@ 0x38
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	e000ed04 	.word	0xe000ed04

08006ad0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10b      	bne.n	8006afa <vQueueDelete+0x2a>
	__asm volatile
 8006ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	60bb      	str	r3, [r7, #8]
}
 8006af4:	bf00      	nop
 8006af6:	bf00      	nop
 8006af8:	e7fd      	b.n	8006af6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f000 f95e 	bl	8006dbc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d102      	bne.n	8006b10 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f002 f86c 	bl	8008be8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006b10:	bf00      	nop
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d006      	beq.n	8006b36 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006b32:	60fb      	str	r3, [r7, #12]
 8006b34:	e001      	b.n	8006b3a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006b36:	2300      	movs	r3, #0
 8006b38:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
	}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3714      	adds	r7, #20
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006b54:	2300      	movs	r3, #0
 8006b56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10d      	bne.n	8006b82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d14d      	bne.n	8006c0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f001 f85e 	bl	8007c34 <xTaskPriorityDisinherit>
 8006b78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	609a      	str	r2, [r3, #8]
 8006b80:	e043      	b.n	8006c0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d119      	bne.n	8006bbc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6858      	ldr	r0, [r3, #4]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b90:	461a      	mov	r2, r3
 8006b92:	68b9      	ldr	r1, [r7, #8]
 8006b94:	f002 fac8 	bl	8009128 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba0:	441a      	add	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d32b      	bcc.n	8006c0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	605a      	str	r2, [r3, #4]
 8006bba:	e026      	b.n	8006c0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	68d8      	ldr	r0, [r3, #12]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	68b9      	ldr	r1, [r7, #8]
 8006bc8:	f002 faae 	bl	8009128 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd4:	425b      	negs	r3, r3
 8006bd6:	441a      	add	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	68da      	ldr	r2, [r3, #12]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d207      	bcs.n	8006bf8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf0:	425b      	negs	r3, r3
 8006bf2:	441a      	add	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d105      	bne.n	8006c0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	3b01      	subs	r3, #1
 8006c08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006c12:	697b      	ldr	r3, [r7, #20]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3718      	adds	r7, #24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d018      	beq.n	8006c60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68da      	ldr	r2, [r3, #12]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c36:	441a      	add	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68da      	ldr	r2, [r3, #12]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d303      	bcc.n	8006c50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	68d9      	ldr	r1, [r3, #12]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c58:	461a      	mov	r2, r3
 8006c5a:	6838      	ldr	r0, [r7, #0]
 8006c5c:	f002 fa64 	bl	8009128 <memcpy>
	}
}
 8006c60:	bf00      	nop
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c70:	f001 fdca 	bl	8008808 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c7c:	e011      	b.n	8006ca2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d012      	beq.n	8006cac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	3324      	adds	r3, #36	@ 0x24
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 fd86 	bl	800779c <xTaskRemoveFromEventList>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c96:	f000 fe5f 	bl	8007958 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	dce9      	bgt.n	8006c7e <prvUnlockQueue+0x16>
 8006caa:	e000      	b.n	8006cae <prvUnlockQueue+0x46>
					break;
 8006cac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	22ff      	movs	r2, #255	@ 0xff
 8006cb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006cb6:	f001 fdd9 	bl	800886c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006cba:	f001 fda5 	bl	8008808 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006cc4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cc6:	e011      	b.n	8006cec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d012      	beq.n	8006cf6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3310      	adds	r3, #16
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 fd61 	bl	800779c <xTaskRemoveFromEventList>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ce0:	f000 fe3a 	bl	8007958 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	dce9      	bgt.n	8006cc8 <prvUnlockQueue+0x60>
 8006cf4:	e000      	b.n	8006cf8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006cf6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	22ff      	movs	r2, #255	@ 0xff
 8006cfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006d00:	f001 fdb4 	bl	800886c <vPortExitCritical>
}
 8006d04:	bf00      	nop
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d14:	f001 fd78 	bl	8008808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d102      	bne.n	8006d26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d20:	2301      	movs	r3, #1
 8006d22:	60fb      	str	r3, [r7, #12]
 8006d24:	e001      	b.n	8006d2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d26:	2300      	movs	r3, #0
 8006d28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d2a:	f001 fd9f 	bl	800886c <vPortExitCritical>

	return xReturn;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d40:	f001 fd62 	bl	8008808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d102      	bne.n	8006d56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006d50:	2301      	movs	r3, #1
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	e001      	b.n	8006d5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006d56:	2300      	movs	r3, #0
 8006d58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d5a:	f001 fd87 	bl	800886c <vPortExitCritical>

	return xReturn;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d72:	2300      	movs	r3, #0
 8006d74:	60fb      	str	r3, [r7, #12]
 8006d76:	e014      	b.n	8006da2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d78:	4a0f      	ldr	r2, [pc, #60]	@ (8006db8 <vQueueAddToRegistry+0x50>)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10b      	bne.n	8006d9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006d84:	490c      	ldr	r1, [pc, #48]	@ (8006db8 <vQueueAddToRegistry+0x50>)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	683a      	ldr	r2, [r7, #0]
 8006d8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8006db8 <vQueueAddToRegistry+0x50>)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	4413      	add	r3, r2
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006d9a:	e006      	b.n	8006daa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b07      	cmp	r3, #7
 8006da6:	d9e7      	bls.n	8006d78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006da8:	bf00      	nop
 8006daa:	bf00      	nop
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	2000093c 	.word	0x2000093c

08006dbc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	60fb      	str	r3, [r7, #12]
 8006dc8:	e016      	b.n	8006df8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006dca:	4a10      	ldr	r2, [pc, #64]	@ (8006e0c <vQueueUnregisterQueue+0x50>)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	4413      	add	r3, r2
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d10b      	bne.n	8006df2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006dda:	4a0c      	ldr	r2, [pc, #48]	@ (8006e0c <vQueueUnregisterQueue+0x50>)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2100      	movs	r1, #0
 8006de0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006de4:	4a09      	ldr	r2, [pc, #36]	@ (8006e0c <vQueueUnregisterQueue+0x50>)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	00db      	lsls	r3, r3, #3
 8006dea:	4413      	add	r3, r2
 8006dec:	2200      	movs	r2, #0
 8006dee:	605a      	str	r2, [r3, #4]
				break;
 8006df0:	e006      	b.n	8006e00 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3301      	adds	r3, #1
 8006df6:	60fb      	str	r3, [r7, #12]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2b07      	cmp	r3, #7
 8006dfc:	d9e5      	bls.n	8006dca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006dfe:	bf00      	nop
 8006e00:	bf00      	nop
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	2000093c 	.word	0x2000093c

08006e10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006e20:	f001 fcf2 	bl	8008808 <vPortEnterCritical>
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e2a:	b25b      	sxtb	r3, r3
 8006e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e30:	d103      	bne.n	8006e3a <vQueueWaitForMessageRestricted+0x2a>
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e40:	b25b      	sxtb	r3, r3
 8006e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e46:	d103      	bne.n	8006e50 <vQueueWaitForMessageRestricted+0x40>
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e50:	f001 fd0c 	bl	800886c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d106      	bne.n	8006e6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	3324      	adds	r3, #36	@ 0x24
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	68b9      	ldr	r1, [r7, #8]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f000 fc6d 	bl	8007744 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006e6a:	6978      	ldr	r0, [r7, #20]
 8006e6c:	f7ff fefc 	bl	8006c68 <prvUnlockQueue>
	}
 8006e70:	bf00      	nop
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b08e      	sub	sp, #56	@ 0x38
 8006e7c:	af04      	add	r7, sp, #16
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
 8006e84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10b      	bne.n	8006ea4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	623b      	str	r3, [r7, #32]
}
 8006e9e:	bf00      	nop
 8006ea0:	bf00      	nop
 8006ea2:	e7fd      	b.n	8006ea0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10b      	bne.n	8006ec2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	61fb      	str	r3, [r7, #28]
}
 8006ebc:	bf00      	nop
 8006ebe:	bf00      	nop
 8006ec0:	e7fd      	b.n	8006ebe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ec2:	23a8      	movs	r3, #168	@ 0xa8
 8006ec4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	2ba8      	cmp	r3, #168	@ 0xa8
 8006eca:	d00b      	beq.n	8006ee4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed0:	f383 8811 	msr	BASEPRI, r3
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	61bb      	str	r3, [r7, #24]
}
 8006ede:	bf00      	nop
 8006ee0:	bf00      	nop
 8006ee2:	e7fd      	b.n	8006ee0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006ee4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d01e      	beq.n	8006f2a <xTaskCreateStatic+0xb2>
 8006eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d01b      	beq.n	8006f2a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006efa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efe:	2202      	movs	r2, #2
 8006f00:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f04:	2300      	movs	r3, #0
 8006f06:	9303      	str	r3, [sp, #12]
 8006f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0a:	9302      	str	r3, [sp, #8]
 8006f0c:	f107 0314 	add.w	r3, r7, #20
 8006f10:	9301      	str	r3, [sp, #4]
 8006f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	68b9      	ldr	r1, [r7, #8]
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 f851 	bl	8006fc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006f24:	f000 f8f6 	bl	8007114 <prvAddNewTaskToReadyList>
 8006f28:	e001      	b.n	8006f2e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f2e:	697b      	ldr	r3, [r7, #20]
	}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3728      	adds	r7, #40	@ 0x28
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b08c      	sub	sp, #48	@ 0x30
 8006f3c:	af04      	add	r7, sp, #16
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	603b      	str	r3, [r7, #0]
 8006f44:	4613      	mov	r3, r2
 8006f46:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f48:	88fb      	ldrh	r3, [r7, #6]
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f001 fd7d 	bl	8008a4c <pvPortMalloc>
 8006f52:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00e      	beq.n	8006f78 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f5a:	20a8      	movs	r0, #168	@ 0xa8
 8006f5c:	f001 fd76 	bl	8008a4c <pvPortMalloc>
 8006f60:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d003      	beq.n	8006f70 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f6e:	e005      	b.n	8006f7c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f70:	6978      	ldr	r0, [r7, #20]
 8006f72:	f001 fe39 	bl	8008be8 <vPortFree>
 8006f76:	e001      	b.n	8006f7c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d017      	beq.n	8006fb2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f8a:	88fa      	ldrh	r2, [r7, #6]
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	9303      	str	r3, [sp, #12]
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	9302      	str	r3, [sp, #8]
 8006f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f96:	9301      	str	r3, [sp, #4]
 8006f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	68b9      	ldr	r1, [r7, #8]
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f000 f80f 	bl	8006fc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fa6:	69f8      	ldr	r0, [r7, #28]
 8006fa8:	f000 f8b4 	bl	8007114 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006fac:	2301      	movs	r3, #1
 8006fae:	61bb      	str	r3, [r7, #24]
 8006fb0:	e002      	b.n	8006fb8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8006fb6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006fb8:	69bb      	ldr	r3, [r7, #24]
	}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3720      	adds	r7, #32
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
	...

08006fc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b088      	sub	sp, #32
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
 8006fd0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	461a      	mov	r2, r3
 8006fdc:	21a5      	movs	r1, #165	@ 0xa5
 8006fde:	f001 fff9 	bl	8008fd4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006fec:	3b01      	subs	r3, #1
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	f023 0307 	bic.w	r3, r3, #7
 8006ffa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	f003 0307 	and.w	r3, r3, #7
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00b      	beq.n	800701e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800700a:	f383 8811 	msr	BASEPRI, r3
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	f3bf 8f4f 	dsb	sy
 8007016:	617b      	str	r3, [r7, #20]
}
 8007018:	bf00      	nop
 800701a:	bf00      	nop
 800701c:	e7fd      	b.n	800701a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d01f      	beq.n	8007064 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007024:	2300      	movs	r3, #0
 8007026:	61fb      	str	r3, [r7, #28]
 8007028:	e012      	b.n	8007050 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	4413      	add	r3, r2
 8007030:	7819      	ldrb	r1, [r3, #0]
 8007032:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	4413      	add	r3, r2
 8007038:	3334      	adds	r3, #52	@ 0x34
 800703a:	460a      	mov	r2, r1
 800703c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	4413      	add	r3, r2
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d006      	beq.n	8007058 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	3301      	adds	r3, #1
 800704e:	61fb      	str	r3, [r7, #28]
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	2b0f      	cmp	r3, #15
 8007054:	d9e9      	bls.n	800702a <prvInitialiseNewTask+0x66>
 8007056:	e000      	b.n	800705a <prvInitialiseNewTask+0x96>
			{
				break;
 8007058:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800705a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705c:	2200      	movs	r2, #0
 800705e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007062:	e003      	b.n	800706c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800706c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800706e:	2b37      	cmp	r3, #55	@ 0x37
 8007070:	d901      	bls.n	8007076 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007072:	2337      	movs	r3, #55	@ 0x37
 8007074:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007078:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800707a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800707c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007080:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007084:	2200      	movs	r2, #0
 8007086:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708a:	3304      	adds	r3, #4
 800708c:	4618      	mov	r0, r3
 800708e:	f7fe fef9 	bl	8005e84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007094:	3318      	adds	r3, #24
 8007096:	4618      	mov	r0, r3
 8007098:	f7fe fef4 	bl	8005e84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800709c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80070a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80070ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070b0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80070b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b4:	2200      	movs	r2, #0
 80070b6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80070c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c4:	3354      	adds	r3, #84	@ 0x54
 80070c6:	224c      	movs	r2, #76	@ 0x4c
 80070c8:	2100      	movs	r1, #0
 80070ca:	4618      	mov	r0, r3
 80070cc:	f001 ff82 	bl	8008fd4 <memset>
 80070d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d2:	4a0d      	ldr	r2, [pc, #52]	@ (8007108 <prvInitialiseNewTask+0x144>)
 80070d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80070d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d8:	4a0c      	ldr	r2, [pc, #48]	@ (800710c <prvInitialiseNewTask+0x148>)
 80070da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80070dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070de:	4a0c      	ldr	r2, [pc, #48]	@ (8007110 <prvInitialiseNewTask+0x14c>)
 80070e0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	68f9      	ldr	r1, [r7, #12]
 80070e6:	69b8      	ldr	r0, [r7, #24]
 80070e8:	f001 fa5a 	bl	80085a0 <pxPortInitialiseStack>
 80070ec:	4602      	mov	r2, r0
 80070ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80070f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d002      	beq.n	80070fe <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80070f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070fe:	bf00      	nop
 8007100:	3720      	adds	r7, #32
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	20004bd8 	.word	0x20004bd8
 800710c:	20004c40 	.word	0x20004c40
 8007110:	20004ca8 	.word	0x20004ca8

08007114 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800711c:	f001 fb74 	bl	8008808 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007120:	4b2d      	ldr	r3, [pc, #180]	@ (80071d8 <prvAddNewTaskToReadyList+0xc4>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3301      	adds	r3, #1
 8007126:	4a2c      	ldr	r2, [pc, #176]	@ (80071d8 <prvAddNewTaskToReadyList+0xc4>)
 8007128:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800712a:	4b2c      	ldr	r3, [pc, #176]	@ (80071dc <prvAddNewTaskToReadyList+0xc8>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d109      	bne.n	8007146 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007132:	4a2a      	ldr	r2, [pc, #168]	@ (80071dc <prvAddNewTaskToReadyList+0xc8>)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007138:	4b27      	ldr	r3, [pc, #156]	@ (80071d8 <prvAddNewTaskToReadyList+0xc4>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d110      	bne.n	8007162 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007140:	f000 fc2e 	bl	80079a0 <prvInitialiseTaskLists>
 8007144:	e00d      	b.n	8007162 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007146:	4b26      	ldr	r3, [pc, #152]	@ (80071e0 <prvAddNewTaskToReadyList+0xcc>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d109      	bne.n	8007162 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800714e:	4b23      	ldr	r3, [pc, #140]	@ (80071dc <prvAddNewTaskToReadyList+0xc8>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007158:	429a      	cmp	r2, r3
 800715a:	d802      	bhi.n	8007162 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800715c:	4a1f      	ldr	r2, [pc, #124]	@ (80071dc <prvAddNewTaskToReadyList+0xc8>)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007162:	4b20      	ldr	r3, [pc, #128]	@ (80071e4 <prvAddNewTaskToReadyList+0xd0>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3301      	adds	r3, #1
 8007168:	4a1e      	ldr	r2, [pc, #120]	@ (80071e4 <prvAddNewTaskToReadyList+0xd0>)
 800716a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800716c:	4b1d      	ldr	r3, [pc, #116]	@ (80071e4 <prvAddNewTaskToReadyList+0xd0>)
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007178:	4b1b      	ldr	r3, [pc, #108]	@ (80071e8 <prvAddNewTaskToReadyList+0xd4>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	429a      	cmp	r2, r3
 800717e:	d903      	bls.n	8007188 <prvAddNewTaskToReadyList+0x74>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007184:	4a18      	ldr	r2, [pc, #96]	@ (80071e8 <prvAddNewTaskToReadyList+0xd4>)
 8007186:	6013      	str	r3, [r2, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800718c:	4613      	mov	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4a15      	ldr	r2, [pc, #84]	@ (80071ec <prvAddNewTaskToReadyList+0xd8>)
 8007196:	441a      	add	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	3304      	adds	r3, #4
 800719c:	4619      	mov	r1, r3
 800719e:	4610      	mov	r0, r2
 80071a0:	f7fe fe7d 	bl	8005e9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80071a4:	f001 fb62 	bl	800886c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80071a8:	4b0d      	ldr	r3, [pc, #52]	@ (80071e0 <prvAddNewTaskToReadyList+0xcc>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00e      	beq.n	80071ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80071b0:	4b0a      	ldr	r3, [pc, #40]	@ (80071dc <prvAddNewTaskToReadyList+0xc8>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d207      	bcs.n	80071ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80071be:	4b0c      	ldr	r3, [pc, #48]	@ (80071f0 <prvAddNewTaskToReadyList+0xdc>)
 80071c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071c4:	601a      	str	r2, [r3, #0]
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071ce:	bf00      	nop
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20000e50 	.word	0x20000e50
 80071dc:	2000097c 	.word	0x2000097c
 80071e0:	20000e5c 	.word	0x20000e5c
 80071e4:	20000e6c 	.word	0x20000e6c
 80071e8:	20000e58 	.word	0x20000e58
 80071ec:	20000980 	.word	0x20000980
 80071f0:	e000ed04 	.word	0xe000ed04

080071f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80071fc:	2300      	movs	r3, #0
 80071fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d018      	beq.n	8007238 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007206:	4b14      	ldr	r3, [pc, #80]	@ (8007258 <vTaskDelay+0x64>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00b      	beq.n	8007226 <vTaskDelay+0x32>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	60bb      	str	r3, [r7, #8]
}
 8007220:	bf00      	nop
 8007222:	bf00      	nop
 8007224:	e7fd      	b.n	8007222 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007226:	f000 f88b 	bl	8007340 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800722a:	2100      	movs	r1, #0
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fe09 	bl	8007e44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007232:	f000 f893 	bl	800735c <xTaskResumeAll>
 8007236:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d107      	bne.n	800724e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800723e:	4b07      	ldr	r3, [pc, #28]	@ (800725c <vTaskDelay+0x68>)
 8007240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800724e:	bf00      	nop
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	20000e78 	.word	0x20000e78
 800725c:	e000ed04 	.word	0xe000ed04

08007260 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b08a      	sub	sp, #40	@ 0x28
 8007264:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007266:	2300      	movs	r3, #0
 8007268:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800726a:	2300      	movs	r3, #0
 800726c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800726e:	463a      	mov	r2, r7
 8007270:	1d39      	adds	r1, r7, #4
 8007272:	f107 0308 	add.w	r3, r7, #8
 8007276:	4618      	mov	r0, r3
 8007278:	f7fe fdb0 	bl	8005ddc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800727c:	6839      	ldr	r1, [r7, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	9202      	str	r2, [sp, #8]
 8007284:	9301      	str	r3, [sp, #4]
 8007286:	2300      	movs	r3, #0
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	2300      	movs	r3, #0
 800728c:	460a      	mov	r2, r1
 800728e:	4924      	ldr	r1, [pc, #144]	@ (8007320 <vTaskStartScheduler+0xc0>)
 8007290:	4824      	ldr	r0, [pc, #144]	@ (8007324 <vTaskStartScheduler+0xc4>)
 8007292:	f7ff fdf1 	bl	8006e78 <xTaskCreateStatic>
 8007296:	4603      	mov	r3, r0
 8007298:	4a23      	ldr	r2, [pc, #140]	@ (8007328 <vTaskStartScheduler+0xc8>)
 800729a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800729c:	4b22      	ldr	r3, [pc, #136]	@ (8007328 <vTaskStartScheduler+0xc8>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d002      	beq.n	80072aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80072a4:	2301      	movs	r3, #1
 80072a6:	617b      	str	r3, [r7, #20]
 80072a8:	e001      	b.n	80072ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80072aa:	2300      	movs	r3, #0
 80072ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d102      	bne.n	80072ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80072b4:	f000 fe1a 	bl	8007eec <xTimerCreateTimerTask>
 80072b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d11b      	bne.n	80072f8 <vTaskStartScheduler+0x98>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	613b      	str	r3, [r7, #16]
}
 80072d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80072d4:	4b15      	ldr	r3, [pc, #84]	@ (800732c <vTaskStartScheduler+0xcc>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	3354      	adds	r3, #84	@ 0x54
 80072da:	4a15      	ldr	r2, [pc, #84]	@ (8007330 <vTaskStartScheduler+0xd0>)
 80072dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80072de:	4b15      	ldr	r3, [pc, #84]	@ (8007334 <vTaskStartScheduler+0xd4>)
 80072e0:	f04f 32ff 	mov.w	r2, #4294967295
 80072e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80072e6:	4b14      	ldr	r3, [pc, #80]	@ (8007338 <vTaskStartScheduler+0xd8>)
 80072e8:	2201      	movs	r2, #1
 80072ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80072ec:	4b13      	ldr	r3, [pc, #76]	@ (800733c <vTaskStartScheduler+0xdc>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80072f2:	f001 f9e5 	bl	80086c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80072f6:	e00f      	b.n	8007318 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fe:	d10b      	bne.n	8007318 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	60fb      	str	r3, [r7, #12]
}
 8007312:	bf00      	nop
 8007314:	bf00      	nop
 8007316:	e7fd      	b.n	8007314 <vTaskStartScheduler+0xb4>
}
 8007318:	bf00      	nop
 800731a:	3718      	adds	r7, #24
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	08009980 	.word	0x08009980
 8007324:	08007971 	.word	0x08007971
 8007328:	20000e74 	.word	0x20000e74
 800732c:	2000097c 	.word	0x2000097c
 8007330:	20000010 	.word	0x20000010
 8007334:	20000e70 	.word	0x20000e70
 8007338:	20000e5c 	.word	0x20000e5c
 800733c:	20000e54 	.word	0x20000e54

08007340 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007340:	b480      	push	{r7}
 8007342:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007344:	4b04      	ldr	r3, [pc, #16]	@ (8007358 <vTaskSuspendAll+0x18>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3301      	adds	r3, #1
 800734a:	4a03      	ldr	r2, [pc, #12]	@ (8007358 <vTaskSuspendAll+0x18>)
 800734c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800734e:	bf00      	nop
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	20000e78 	.word	0x20000e78

0800735c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007362:	2300      	movs	r3, #0
 8007364:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007366:	2300      	movs	r3, #0
 8007368:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800736a:	4b42      	ldr	r3, [pc, #264]	@ (8007474 <xTaskResumeAll+0x118>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10b      	bne.n	800738a <xTaskResumeAll+0x2e>
	__asm volatile
 8007372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007376:	f383 8811 	msr	BASEPRI, r3
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	603b      	str	r3, [r7, #0]
}
 8007384:	bf00      	nop
 8007386:	bf00      	nop
 8007388:	e7fd      	b.n	8007386 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800738a:	f001 fa3d 	bl	8008808 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800738e:	4b39      	ldr	r3, [pc, #228]	@ (8007474 <xTaskResumeAll+0x118>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3b01      	subs	r3, #1
 8007394:	4a37      	ldr	r2, [pc, #220]	@ (8007474 <xTaskResumeAll+0x118>)
 8007396:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007398:	4b36      	ldr	r3, [pc, #216]	@ (8007474 <xTaskResumeAll+0x118>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d162      	bne.n	8007466 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80073a0:	4b35      	ldr	r3, [pc, #212]	@ (8007478 <xTaskResumeAll+0x11c>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d05e      	beq.n	8007466 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073a8:	e02f      	b.n	800740a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073aa:	4b34      	ldr	r3, [pc, #208]	@ (800747c <xTaskResumeAll+0x120>)
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3318      	adds	r3, #24
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fe fdce 	bl	8005f58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	3304      	adds	r3, #4
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7fe fdc9 	bl	8005f58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073ca:	4b2d      	ldr	r3, [pc, #180]	@ (8007480 <xTaskResumeAll+0x124>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d903      	bls.n	80073da <xTaskResumeAll+0x7e>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d6:	4a2a      	ldr	r2, [pc, #168]	@ (8007480 <xTaskResumeAll+0x124>)
 80073d8:	6013      	str	r3, [r2, #0]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073de:	4613      	mov	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4a27      	ldr	r2, [pc, #156]	@ (8007484 <xTaskResumeAll+0x128>)
 80073e8:	441a      	add	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3304      	adds	r3, #4
 80073ee:	4619      	mov	r1, r3
 80073f0:	4610      	mov	r0, r2
 80073f2:	f7fe fd54 	bl	8005e9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073fa:	4b23      	ldr	r3, [pc, #140]	@ (8007488 <xTaskResumeAll+0x12c>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007400:	429a      	cmp	r2, r3
 8007402:	d302      	bcc.n	800740a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007404:	4b21      	ldr	r3, [pc, #132]	@ (800748c <xTaskResumeAll+0x130>)
 8007406:	2201      	movs	r2, #1
 8007408:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800740a:	4b1c      	ldr	r3, [pc, #112]	@ (800747c <xTaskResumeAll+0x120>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1cb      	bne.n	80073aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d001      	beq.n	800741c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007418:	f000 fb66 	bl	8007ae8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800741c:	4b1c      	ldr	r3, [pc, #112]	@ (8007490 <xTaskResumeAll+0x134>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d010      	beq.n	800744a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007428:	f000 f846 	bl	80074b8 <xTaskIncrementTick>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d002      	beq.n	8007438 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007432:	4b16      	ldr	r3, [pc, #88]	@ (800748c <xTaskResumeAll+0x130>)
 8007434:	2201      	movs	r2, #1
 8007436:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	3b01      	subs	r3, #1
 800743c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1f1      	bne.n	8007428 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007444:	4b12      	ldr	r3, [pc, #72]	@ (8007490 <xTaskResumeAll+0x134>)
 8007446:	2200      	movs	r2, #0
 8007448:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800744a:	4b10      	ldr	r3, [pc, #64]	@ (800748c <xTaskResumeAll+0x130>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d009      	beq.n	8007466 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007452:	2301      	movs	r3, #1
 8007454:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007456:	4b0f      	ldr	r3, [pc, #60]	@ (8007494 <xTaskResumeAll+0x138>)
 8007458:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800745c:	601a      	str	r2, [r3, #0]
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007466:	f001 fa01 	bl	800886c <vPortExitCritical>

	return xAlreadyYielded;
 800746a:	68bb      	ldr	r3, [r7, #8]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3710      	adds	r7, #16
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	20000e78 	.word	0x20000e78
 8007478:	20000e50 	.word	0x20000e50
 800747c:	20000e10 	.word	0x20000e10
 8007480:	20000e58 	.word	0x20000e58
 8007484:	20000980 	.word	0x20000980
 8007488:	2000097c 	.word	0x2000097c
 800748c:	20000e64 	.word	0x20000e64
 8007490:	20000e60 	.word	0x20000e60
 8007494:	e000ed04 	.word	0xe000ed04

08007498 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800749e:	4b05      	ldr	r3, [pc, #20]	@ (80074b4 <xTaskGetTickCount+0x1c>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80074a4:	687b      	ldr	r3, [r7, #4]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	20000e54 	.word	0x20000e54

080074b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80074be:	2300      	movs	r3, #0
 80074c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074c2:	4b4f      	ldr	r3, [pc, #316]	@ (8007600 <xTaskIncrementTick+0x148>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f040 8090 	bne.w	80075ec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80074cc:	4b4d      	ldr	r3, [pc, #308]	@ (8007604 <xTaskIncrementTick+0x14c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3301      	adds	r3, #1
 80074d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80074d4:	4a4b      	ldr	r2, [pc, #300]	@ (8007604 <xTaskIncrementTick+0x14c>)
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d121      	bne.n	8007524 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80074e0:	4b49      	ldr	r3, [pc, #292]	@ (8007608 <xTaskIncrementTick+0x150>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00b      	beq.n	8007502 <xTaskIncrementTick+0x4a>
	__asm volatile
 80074ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ee:	f383 8811 	msr	BASEPRI, r3
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	f3bf 8f4f 	dsb	sy
 80074fa:	603b      	str	r3, [r7, #0]
}
 80074fc:	bf00      	nop
 80074fe:	bf00      	nop
 8007500:	e7fd      	b.n	80074fe <xTaskIncrementTick+0x46>
 8007502:	4b41      	ldr	r3, [pc, #260]	@ (8007608 <xTaskIncrementTick+0x150>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	60fb      	str	r3, [r7, #12]
 8007508:	4b40      	ldr	r3, [pc, #256]	@ (800760c <xTaskIncrementTick+0x154>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a3e      	ldr	r2, [pc, #248]	@ (8007608 <xTaskIncrementTick+0x150>)
 800750e:	6013      	str	r3, [r2, #0]
 8007510:	4a3e      	ldr	r2, [pc, #248]	@ (800760c <xTaskIncrementTick+0x154>)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6013      	str	r3, [r2, #0]
 8007516:	4b3e      	ldr	r3, [pc, #248]	@ (8007610 <xTaskIncrementTick+0x158>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	3301      	adds	r3, #1
 800751c:	4a3c      	ldr	r2, [pc, #240]	@ (8007610 <xTaskIncrementTick+0x158>)
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	f000 fae2 	bl	8007ae8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007524:	4b3b      	ldr	r3, [pc, #236]	@ (8007614 <xTaskIncrementTick+0x15c>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	693a      	ldr	r2, [r7, #16]
 800752a:	429a      	cmp	r2, r3
 800752c:	d349      	bcc.n	80075c2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800752e:	4b36      	ldr	r3, [pc, #216]	@ (8007608 <xTaskIncrementTick+0x150>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d104      	bne.n	8007542 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007538:	4b36      	ldr	r3, [pc, #216]	@ (8007614 <xTaskIncrementTick+0x15c>)
 800753a:	f04f 32ff 	mov.w	r2, #4294967295
 800753e:	601a      	str	r2, [r3, #0]
					break;
 8007540:	e03f      	b.n	80075c2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007542:	4b31      	ldr	r3, [pc, #196]	@ (8007608 <xTaskIncrementTick+0x150>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	429a      	cmp	r2, r3
 8007558:	d203      	bcs.n	8007562 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800755a:	4a2e      	ldr	r2, [pc, #184]	@ (8007614 <xTaskIncrementTick+0x15c>)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007560:	e02f      	b.n	80075c2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	3304      	adds	r3, #4
 8007566:	4618      	mov	r0, r3
 8007568:	f7fe fcf6 	bl	8005f58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007570:	2b00      	cmp	r3, #0
 8007572:	d004      	beq.n	800757e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	3318      	adds	r3, #24
 8007578:	4618      	mov	r0, r3
 800757a:	f7fe fced 	bl	8005f58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007582:	4b25      	ldr	r3, [pc, #148]	@ (8007618 <xTaskIncrementTick+0x160>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	429a      	cmp	r2, r3
 8007588:	d903      	bls.n	8007592 <xTaskIncrementTick+0xda>
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758e:	4a22      	ldr	r2, [pc, #136]	@ (8007618 <xTaskIncrementTick+0x160>)
 8007590:	6013      	str	r3, [r2, #0]
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007596:	4613      	mov	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4413      	add	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4a1f      	ldr	r2, [pc, #124]	@ (800761c <xTaskIncrementTick+0x164>)
 80075a0:	441a      	add	r2, r3
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	3304      	adds	r3, #4
 80075a6:	4619      	mov	r1, r3
 80075a8:	4610      	mov	r0, r2
 80075aa:	f7fe fc78 	bl	8005e9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007620 <xTaskIncrementTick+0x168>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d3b8      	bcc.n	800752e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80075bc:	2301      	movs	r3, #1
 80075be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075c0:	e7b5      	b.n	800752e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80075c2:	4b17      	ldr	r3, [pc, #92]	@ (8007620 <xTaskIncrementTick+0x168>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075c8:	4914      	ldr	r1, [pc, #80]	@ (800761c <xTaskIncrementTick+0x164>)
 80075ca:	4613      	mov	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	440b      	add	r3, r1
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d901      	bls.n	80075de <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80075da:	2301      	movs	r3, #1
 80075dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80075de:	4b11      	ldr	r3, [pc, #68]	@ (8007624 <xTaskIncrementTick+0x16c>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d007      	beq.n	80075f6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80075e6:	2301      	movs	r3, #1
 80075e8:	617b      	str	r3, [r7, #20]
 80075ea:	e004      	b.n	80075f6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80075ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007628 <xTaskIncrementTick+0x170>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	3301      	adds	r3, #1
 80075f2:	4a0d      	ldr	r2, [pc, #52]	@ (8007628 <xTaskIncrementTick+0x170>)
 80075f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80075f6:	697b      	ldr	r3, [r7, #20]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3718      	adds	r7, #24
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	20000e78 	.word	0x20000e78
 8007604:	20000e54 	.word	0x20000e54
 8007608:	20000e08 	.word	0x20000e08
 800760c:	20000e0c 	.word	0x20000e0c
 8007610:	20000e68 	.word	0x20000e68
 8007614:	20000e70 	.word	0x20000e70
 8007618:	20000e58 	.word	0x20000e58
 800761c:	20000980 	.word	0x20000980
 8007620:	2000097c 	.word	0x2000097c
 8007624:	20000e64 	.word	0x20000e64
 8007628:	20000e60 	.word	0x20000e60

0800762c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007632:	4b2b      	ldr	r3, [pc, #172]	@ (80076e0 <vTaskSwitchContext+0xb4>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800763a:	4b2a      	ldr	r3, [pc, #168]	@ (80076e4 <vTaskSwitchContext+0xb8>)
 800763c:	2201      	movs	r2, #1
 800763e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007640:	e047      	b.n	80076d2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007642:	4b28      	ldr	r3, [pc, #160]	@ (80076e4 <vTaskSwitchContext+0xb8>)
 8007644:	2200      	movs	r2, #0
 8007646:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007648:	4b27      	ldr	r3, [pc, #156]	@ (80076e8 <vTaskSwitchContext+0xbc>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	60fb      	str	r3, [r7, #12]
 800764e:	e011      	b.n	8007674 <vTaskSwitchContext+0x48>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10b      	bne.n	800766e <vTaskSwitchContext+0x42>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	607b      	str	r3, [r7, #4]
}
 8007668:	bf00      	nop
 800766a:	bf00      	nop
 800766c:	e7fd      	b.n	800766a <vTaskSwitchContext+0x3e>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	3b01      	subs	r3, #1
 8007672:	60fb      	str	r3, [r7, #12]
 8007674:	491d      	ldr	r1, [pc, #116]	@ (80076ec <vTaskSwitchContext+0xc0>)
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	4613      	mov	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4413      	add	r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	440b      	add	r3, r1
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d0e3      	beq.n	8007650 <vTaskSwitchContext+0x24>
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	4613      	mov	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4a16      	ldr	r2, [pc, #88]	@ (80076ec <vTaskSwitchContext+0xc0>)
 8007694:	4413      	add	r3, r2
 8007696:	60bb      	str	r3, [r7, #8]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	605a      	str	r2, [r3, #4]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	685a      	ldr	r2, [r3, #4]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	3308      	adds	r3, #8
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d104      	bne.n	80076b8 <vTaskSwitchContext+0x8c>
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	605a      	str	r2, [r3, #4]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	4a0c      	ldr	r2, [pc, #48]	@ (80076f0 <vTaskSwitchContext+0xc4>)
 80076c0:	6013      	str	r3, [r2, #0]
 80076c2:	4a09      	ldr	r2, [pc, #36]	@ (80076e8 <vTaskSwitchContext+0xbc>)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80076c8:	4b09      	ldr	r3, [pc, #36]	@ (80076f0 <vTaskSwitchContext+0xc4>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3354      	adds	r3, #84	@ 0x54
 80076ce:	4a09      	ldr	r2, [pc, #36]	@ (80076f4 <vTaskSwitchContext+0xc8>)
 80076d0:	6013      	str	r3, [r2, #0]
}
 80076d2:	bf00      	nop
 80076d4:	3714      	adds	r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	20000e78 	.word	0x20000e78
 80076e4:	20000e64 	.word	0x20000e64
 80076e8:	20000e58 	.word	0x20000e58
 80076ec:	20000980 	.word	0x20000980
 80076f0:	2000097c 	.word	0x2000097c
 80076f4:	20000010 	.word	0x20000010

080076f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d10b      	bne.n	8007720 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770c:	f383 8811 	msr	BASEPRI, r3
 8007710:	f3bf 8f6f 	isb	sy
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	60fb      	str	r3, [r7, #12]
}
 800771a:	bf00      	nop
 800771c:	bf00      	nop
 800771e:	e7fd      	b.n	800771c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007720:	4b07      	ldr	r3, [pc, #28]	@ (8007740 <vTaskPlaceOnEventList+0x48>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3318      	adds	r3, #24
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7fe fbdc 	bl	8005ee6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800772e:	2101      	movs	r1, #1
 8007730:	6838      	ldr	r0, [r7, #0]
 8007732:	f000 fb87 	bl	8007e44 <prvAddCurrentTaskToDelayedList>
}
 8007736:	bf00      	nop
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	2000097c 	.word	0x2000097c

08007744 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10b      	bne.n	800776e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800775a:	f383 8811 	msr	BASEPRI, r3
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	617b      	str	r3, [r7, #20]
}
 8007768:	bf00      	nop
 800776a:	bf00      	nop
 800776c:	e7fd      	b.n	800776a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800776e:	4b0a      	ldr	r3, [pc, #40]	@ (8007798 <vTaskPlaceOnEventListRestricted+0x54>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3318      	adds	r3, #24
 8007774:	4619      	mov	r1, r3
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f7fe fb91 	bl	8005e9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d002      	beq.n	8007788 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007782:	f04f 33ff 	mov.w	r3, #4294967295
 8007786:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007788:	6879      	ldr	r1, [r7, #4]
 800778a:	68b8      	ldr	r0, [r7, #8]
 800778c:	f000 fb5a 	bl	8007e44 <prvAddCurrentTaskToDelayedList>
	}
 8007790:	bf00      	nop
 8007792:	3718      	adds	r7, #24
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	2000097c 	.word	0x2000097c

0800779c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10b      	bne.n	80077ca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	60fb      	str	r3, [r7, #12]
}
 80077c4:	bf00      	nop
 80077c6:	bf00      	nop
 80077c8:	e7fd      	b.n	80077c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	3318      	adds	r3, #24
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fe fbc2 	bl	8005f58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077d4:	4b1d      	ldr	r3, [pc, #116]	@ (800784c <xTaskRemoveFromEventList+0xb0>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d11d      	bne.n	8007818 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	3304      	adds	r3, #4
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7fe fbb9 	bl	8005f58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ea:	4b19      	ldr	r3, [pc, #100]	@ (8007850 <xTaskRemoveFromEventList+0xb4>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d903      	bls.n	80077fa <xTaskRemoveFromEventList+0x5e>
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f6:	4a16      	ldr	r2, [pc, #88]	@ (8007850 <xTaskRemoveFromEventList+0xb4>)
 80077f8:	6013      	str	r3, [r2, #0]
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077fe:	4613      	mov	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4a13      	ldr	r2, [pc, #76]	@ (8007854 <xTaskRemoveFromEventList+0xb8>)
 8007808:	441a      	add	r2, r3
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	3304      	adds	r3, #4
 800780e:	4619      	mov	r1, r3
 8007810:	4610      	mov	r0, r2
 8007812:	f7fe fb44 	bl	8005e9e <vListInsertEnd>
 8007816:	e005      	b.n	8007824 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	3318      	adds	r3, #24
 800781c:	4619      	mov	r1, r3
 800781e:	480e      	ldr	r0, [pc, #56]	@ (8007858 <xTaskRemoveFromEventList+0xbc>)
 8007820:	f7fe fb3d 	bl	8005e9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007828:	4b0c      	ldr	r3, [pc, #48]	@ (800785c <xTaskRemoveFromEventList+0xc0>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782e:	429a      	cmp	r2, r3
 8007830:	d905      	bls.n	800783e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007832:	2301      	movs	r3, #1
 8007834:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007836:	4b0a      	ldr	r3, [pc, #40]	@ (8007860 <xTaskRemoveFromEventList+0xc4>)
 8007838:	2201      	movs	r2, #1
 800783a:	601a      	str	r2, [r3, #0]
 800783c:	e001      	b.n	8007842 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800783e:	2300      	movs	r3, #0
 8007840:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007842:	697b      	ldr	r3, [r7, #20]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3718      	adds	r7, #24
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	20000e78 	.word	0x20000e78
 8007850:	20000e58 	.word	0x20000e58
 8007854:	20000980 	.word	0x20000980
 8007858:	20000e10 	.word	0x20000e10
 800785c:	2000097c 	.word	0x2000097c
 8007860:	20000e64 	.word	0x20000e64

08007864 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800786c:	4b06      	ldr	r3, [pc, #24]	@ (8007888 <vTaskInternalSetTimeOutState+0x24>)
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007874:	4b05      	ldr	r3, [pc, #20]	@ (800788c <vTaskInternalSetTimeOutState+0x28>)
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	605a      	str	r2, [r3, #4]
}
 800787c:	bf00      	nop
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr
 8007888:	20000e68 	.word	0x20000e68
 800788c:	20000e54 	.word	0x20000e54

08007890 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10b      	bne.n	80078b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80078a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	613b      	str	r3, [r7, #16]
}
 80078b2:	bf00      	nop
 80078b4:	bf00      	nop
 80078b6:	e7fd      	b.n	80078b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10b      	bne.n	80078d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80078be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	60fb      	str	r3, [r7, #12]
}
 80078d0:	bf00      	nop
 80078d2:	bf00      	nop
 80078d4:	e7fd      	b.n	80078d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80078d6:	f000 ff97 	bl	8008808 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80078da:	4b1d      	ldr	r3, [pc, #116]	@ (8007950 <xTaskCheckForTimeOut+0xc0>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	69ba      	ldr	r2, [r7, #24]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f2:	d102      	bne.n	80078fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80078f4:	2300      	movs	r3, #0
 80078f6:	61fb      	str	r3, [r7, #28]
 80078f8:	e023      	b.n	8007942 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	4b15      	ldr	r3, [pc, #84]	@ (8007954 <xTaskCheckForTimeOut+0xc4>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	429a      	cmp	r2, r3
 8007904:	d007      	beq.n	8007916 <xTaskCheckForTimeOut+0x86>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	69ba      	ldr	r2, [r7, #24]
 800790c:	429a      	cmp	r2, r3
 800790e:	d302      	bcc.n	8007916 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007910:	2301      	movs	r3, #1
 8007912:	61fb      	str	r3, [r7, #28]
 8007914:	e015      	b.n	8007942 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	429a      	cmp	r2, r3
 800791e:	d20b      	bcs.n	8007938 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	1ad2      	subs	r2, r2, r3
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7ff ff99 	bl	8007864 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007932:	2300      	movs	r3, #0
 8007934:	61fb      	str	r3, [r7, #28]
 8007936:	e004      	b.n	8007942 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	2200      	movs	r2, #0
 800793c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800793e:	2301      	movs	r3, #1
 8007940:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007942:	f000 ff93 	bl	800886c <vPortExitCritical>

	return xReturn;
 8007946:	69fb      	ldr	r3, [r7, #28]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3720      	adds	r7, #32
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	20000e54 	.word	0x20000e54
 8007954:	20000e68 	.word	0x20000e68

08007958 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007958:	b480      	push	{r7}
 800795a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800795c:	4b03      	ldr	r3, [pc, #12]	@ (800796c <vTaskMissedYield+0x14>)
 800795e:	2201      	movs	r2, #1
 8007960:	601a      	str	r2, [r3, #0]
}
 8007962:	bf00      	nop
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	20000e64 	.word	0x20000e64

08007970 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007978:	f000 f852 	bl	8007a20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800797c:	4b06      	ldr	r3, [pc, #24]	@ (8007998 <prvIdleTask+0x28>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d9f9      	bls.n	8007978 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007984:	4b05      	ldr	r3, [pc, #20]	@ (800799c <prvIdleTask+0x2c>)
 8007986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800798a:	601a      	str	r2, [r3, #0]
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007994:	e7f0      	b.n	8007978 <prvIdleTask+0x8>
 8007996:	bf00      	nop
 8007998:	20000980 	.word	0x20000980
 800799c:	e000ed04 	.word	0xe000ed04

080079a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079a6:	2300      	movs	r3, #0
 80079a8:	607b      	str	r3, [r7, #4]
 80079aa:	e00c      	b.n	80079c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	4613      	mov	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4413      	add	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4a12      	ldr	r2, [pc, #72]	@ (8007a00 <prvInitialiseTaskLists+0x60>)
 80079b8:	4413      	add	r3, r2
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fe fa42 	bl	8005e44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	3301      	adds	r3, #1
 80079c4:	607b      	str	r3, [r7, #4]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2b37      	cmp	r3, #55	@ 0x37
 80079ca:	d9ef      	bls.n	80079ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80079cc:	480d      	ldr	r0, [pc, #52]	@ (8007a04 <prvInitialiseTaskLists+0x64>)
 80079ce:	f7fe fa39 	bl	8005e44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80079d2:	480d      	ldr	r0, [pc, #52]	@ (8007a08 <prvInitialiseTaskLists+0x68>)
 80079d4:	f7fe fa36 	bl	8005e44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80079d8:	480c      	ldr	r0, [pc, #48]	@ (8007a0c <prvInitialiseTaskLists+0x6c>)
 80079da:	f7fe fa33 	bl	8005e44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80079de:	480c      	ldr	r0, [pc, #48]	@ (8007a10 <prvInitialiseTaskLists+0x70>)
 80079e0:	f7fe fa30 	bl	8005e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80079e4:	480b      	ldr	r0, [pc, #44]	@ (8007a14 <prvInitialiseTaskLists+0x74>)
 80079e6:	f7fe fa2d 	bl	8005e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80079ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007a18 <prvInitialiseTaskLists+0x78>)
 80079ec:	4a05      	ldr	r2, [pc, #20]	@ (8007a04 <prvInitialiseTaskLists+0x64>)
 80079ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80079f0:	4b0a      	ldr	r3, [pc, #40]	@ (8007a1c <prvInitialiseTaskLists+0x7c>)
 80079f2:	4a05      	ldr	r2, [pc, #20]	@ (8007a08 <prvInitialiseTaskLists+0x68>)
 80079f4:	601a      	str	r2, [r3, #0]
}
 80079f6:	bf00      	nop
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20000980 	.word	0x20000980
 8007a04:	20000de0 	.word	0x20000de0
 8007a08:	20000df4 	.word	0x20000df4
 8007a0c:	20000e10 	.word	0x20000e10
 8007a10:	20000e24 	.word	0x20000e24
 8007a14:	20000e3c 	.word	0x20000e3c
 8007a18:	20000e08 	.word	0x20000e08
 8007a1c:	20000e0c 	.word	0x20000e0c

08007a20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a26:	e019      	b.n	8007a5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007a28:	f000 feee 	bl	8008808 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a2c:	4b10      	ldr	r3, [pc, #64]	@ (8007a70 <prvCheckTasksWaitingTermination+0x50>)
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	3304      	adds	r3, #4
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fe fa8d 	bl	8005f58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a74 <prvCheckTasksWaitingTermination+0x54>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	3b01      	subs	r3, #1
 8007a44:	4a0b      	ldr	r2, [pc, #44]	@ (8007a74 <prvCheckTasksWaitingTermination+0x54>)
 8007a46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a48:	4b0b      	ldr	r3, [pc, #44]	@ (8007a78 <prvCheckTasksWaitingTermination+0x58>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8007a78 <prvCheckTasksWaitingTermination+0x58>)
 8007a50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a52:	f000 ff0b 	bl	800886c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f810 	bl	8007a7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a5c:	4b06      	ldr	r3, [pc, #24]	@ (8007a78 <prvCheckTasksWaitingTermination+0x58>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1e1      	bne.n	8007a28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a64:	bf00      	nop
 8007a66:	bf00      	nop
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	20000e24 	.word	0x20000e24
 8007a74:	20000e50 	.word	0x20000e50
 8007a78:	20000e38 	.word	0x20000e38

08007a7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	3354      	adds	r3, #84	@ 0x54
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f001 fabb 	bl	8009004 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d108      	bne.n	8007aaa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f001 f8a3 	bl	8008be8 <vPortFree>
				vPortFree( pxTCB );
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f001 f8a0 	bl	8008be8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007aa8:	e019      	b.n	8007ade <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d103      	bne.n	8007abc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f001 f897 	bl	8008be8 <vPortFree>
	}
 8007aba:	e010      	b.n	8007ade <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d00b      	beq.n	8007ade <prvDeleteTCB+0x62>
	__asm volatile
 8007ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aca:	f383 8811 	msr	BASEPRI, r3
 8007ace:	f3bf 8f6f 	isb	sy
 8007ad2:	f3bf 8f4f 	dsb	sy
 8007ad6:	60fb      	str	r3, [r7, #12]
}
 8007ad8:	bf00      	nop
 8007ada:	bf00      	nop
 8007adc:	e7fd      	b.n	8007ada <prvDeleteTCB+0x5e>
	}
 8007ade:	bf00      	nop
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
	...

08007ae8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007aee:	4b0c      	ldr	r3, [pc, #48]	@ (8007b20 <prvResetNextTaskUnblockTime+0x38>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d104      	bne.n	8007b02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007af8:	4b0a      	ldr	r3, [pc, #40]	@ (8007b24 <prvResetNextTaskUnblockTime+0x3c>)
 8007afa:	f04f 32ff 	mov.w	r2, #4294967295
 8007afe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b00:	e008      	b.n	8007b14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b02:	4b07      	ldr	r3, [pc, #28]	@ (8007b20 <prvResetNextTaskUnblockTime+0x38>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	4a04      	ldr	r2, [pc, #16]	@ (8007b24 <prvResetNextTaskUnblockTime+0x3c>)
 8007b12:	6013      	str	r3, [r2, #0]
}
 8007b14:	bf00      	nop
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr
 8007b20:	20000e08 	.word	0x20000e08
 8007b24:	20000e70 	.word	0x20000e70

08007b28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b5c <xTaskGetSchedulerState+0x34>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d102      	bne.n	8007b3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007b36:	2301      	movs	r3, #1
 8007b38:	607b      	str	r3, [r7, #4]
 8007b3a:	e008      	b.n	8007b4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b3c:	4b08      	ldr	r3, [pc, #32]	@ (8007b60 <xTaskGetSchedulerState+0x38>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d102      	bne.n	8007b4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007b44:	2302      	movs	r3, #2
 8007b46:	607b      	str	r3, [r7, #4]
 8007b48:	e001      	b.n	8007b4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007b4e:	687b      	ldr	r3, [r7, #4]
	}
 8007b50:	4618      	mov	r0, r3
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr
 8007b5c:	20000e5c 	.word	0x20000e5c
 8007b60:	20000e78 	.word	0x20000e78

08007b64 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007b70:	2300      	movs	r3, #0
 8007b72:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d051      	beq.n	8007c1e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8007c28 <xTaskPriorityInherit+0xc4>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d241      	bcs.n	8007c0c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	db06      	blt.n	8007b9e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b90:	4b25      	ldr	r3, [pc, #148]	@ (8007c28 <xTaskPriorityInherit+0xc4>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b96:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	6959      	ldr	r1, [r3, #20]
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4a1f      	ldr	r2, [pc, #124]	@ (8007c2c <xTaskPriorityInherit+0xc8>)
 8007bb0:	4413      	add	r3, r2
 8007bb2:	4299      	cmp	r1, r3
 8007bb4:	d122      	bne.n	8007bfc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	3304      	adds	r3, #4
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fe f9cc 	bl	8005f58 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007bc0:	4b19      	ldr	r3, [pc, #100]	@ (8007c28 <xTaskPriorityInherit+0xc4>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bce:	4b18      	ldr	r3, [pc, #96]	@ (8007c30 <xTaskPriorityInherit+0xcc>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d903      	bls.n	8007bde <xTaskPriorityInherit+0x7a>
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bda:	4a15      	ldr	r2, [pc, #84]	@ (8007c30 <xTaskPriorityInherit+0xcc>)
 8007bdc:	6013      	str	r3, [r2, #0]
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007be2:	4613      	mov	r3, r2
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	4413      	add	r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	4a10      	ldr	r2, [pc, #64]	@ (8007c2c <xTaskPriorityInherit+0xc8>)
 8007bec:	441a      	add	r2, r3
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	3304      	adds	r3, #4
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	f7fe f952 	bl	8005e9e <vListInsertEnd>
 8007bfa:	e004      	b.n	8007c06 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8007c28 <xTaskPriorityInherit+0xc4>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007c06:	2301      	movs	r3, #1
 8007c08:	60fb      	str	r3, [r7, #12]
 8007c0a:	e008      	b.n	8007c1e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c10:	4b05      	ldr	r3, [pc, #20]	@ (8007c28 <xTaskPriorityInherit+0xc4>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d201      	bcs.n	8007c1e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
	}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	2000097c 	.word	0x2000097c
 8007c2c:	20000980 	.word	0x20000980
 8007c30:	20000e58 	.word	0x20000e58

08007c34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c40:	2300      	movs	r3, #0
 8007c42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d058      	beq.n	8007cfc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8007d08 <xTaskPriorityDisinherit+0xd4>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d00b      	beq.n	8007c6c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	60fb      	str	r3, [r7, #12]
}
 8007c66:	bf00      	nop
 8007c68:	bf00      	nop
 8007c6a:	e7fd      	b.n	8007c68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10b      	bne.n	8007c8c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c78:	f383 8811 	msr	BASEPRI, r3
 8007c7c:	f3bf 8f6f 	isb	sy
 8007c80:	f3bf 8f4f 	dsb	sy
 8007c84:	60bb      	str	r3, [r7, #8]
}
 8007c86:	bf00      	nop
 8007c88:	bf00      	nop
 8007c8a:	e7fd      	b.n	8007c88 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c90:	1e5a      	subs	r2, r3, #1
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d02c      	beq.n	8007cfc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d128      	bne.n	8007cfc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	3304      	adds	r3, #4
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fe f952 	bl	8005f58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8007d0c <xTaskPriorityDisinherit+0xd8>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d903      	bls.n	8007cdc <xTaskPriorityDisinherit+0xa8>
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8007d0c <xTaskPriorityDisinherit+0xd8>)
 8007cda:	6013      	str	r3, [r2, #0]
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4413      	add	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4a09      	ldr	r2, [pc, #36]	@ (8007d10 <xTaskPriorityDisinherit+0xdc>)
 8007cea:	441a      	add	r2, r3
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	3304      	adds	r3, #4
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	4610      	mov	r0, r2
 8007cf4:	f7fe f8d3 	bl	8005e9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007cfc:	697b      	ldr	r3, [r7, #20]
	}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3718      	adds	r7, #24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	2000097c 	.word	0x2000097c
 8007d0c:	20000e58 	.word	0x20000e58
 8007d10:	20000980 	.word	0x20000980

08007d14 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b088      	sub	sp, #32
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007d22:	2301      	movs	r3, #1
 8007d24:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d06c      	beq.n	8007e06 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10b      	bne.n	8007d4c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d38:	f383 8811 	msr	BASEPRI, r3
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	60fb      	str	r3, [r7, #12]
}
 8007d46:	bf00      	nop
 8007d48:	bf00      	nop
 8007d4a:	e7fd      	b.n	8007d48 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d902      	bls.n	8007d5c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	61fb      	str	r3, [r7, #28]
 8007d5a:	e002      	b.n	8007d62 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d60:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d66:	69fa      	ldr	r2, [r7, #28]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d04c      	beq.n	8007e06 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d147      	bne.n	8007e06 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007d76:	4b26      	ldr	r3, [pc, #152]	@ (8007e10 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	69ba      	ldr	r2, [r7, #24]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d10b      	bne.n	8007d98 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d84:	f383 8811 	msr	BASEPRI, r3
 8007d88:	f3bf 8f6f 	isb	sy
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	60bb      	str	r3, [r7, #8]
}
 8007d92:	bf00      	nop
 8007d94:	bf00      	nop
 8007d96:	e7fd      	b.n	8007d94 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d9c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	69fa      	ldr	r2, [r7, #28]
 8007da2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	db04      	blt.n	8007db6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	6959      	ldr	r1, [r3, #20]
 8007dba:	693a      	ldr	r2, [r7, #16]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4a13      	ldr	r2, [pc, #76]	@ (8007e14 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007dc6:	4413      	add	r3, r2
 8007dc8:	4299      	cmp	r1, r3
 8007dca:	d11c      	bne.n	8007e06 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	3304      	adds	r3, #4
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7fe f8c1 	bl	8005f58 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dda:	4b0f      	ldr	r3, [pc, #60]	@ (8007e18 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d903      	bls.n	8007dea <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de6:	4a0c      	ldr	r2, [pc, #48]	@ (8007e18 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007de8:	6013      	str	r3, [r2, #0]
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dee:	4613      	mov	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4413      	add	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4a07      	ldr	r2, [pc, #28]	@ (8007e14 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007df8:	441a      	add	r2, r3
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	3304      	adds	r3, #4
 8007dfe:	4619      	mov	r1, r3
 8007e00:	4610      	mov	r0, r2
 8007e02:	f7fe f84c 	bl	8005e9e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e06:	bf00      	nop
 8007e08:	3720      	adds	r7, #32
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	2000097c 	.word	0x2000097c
 8007e14:	20000980 	.word	0x20000980
 8007e18:	20000e58 	.word	0x20000e58

08007e1c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007e1c:	b480      	push	{r7}
 8007e1e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007e20:	4b07      	ldr	r3, [pc, #28]	@ (8007e40 <pvTaskIncrementMutexHeldCount+0x24>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d004      	beq.n	8007e32 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007e28:	4b05      	ldr	r3, [pc, #20]	@ (8007e40 <pvTaskIncrementMutexHeldCount+0x24>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e2e:	3201      	adds	r2, #1
 8007e30:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007e32:	4b03      	ldr	r3, [pc, #12]	@ (8007e40 <pvTaskIncrementMutexHeldCount+0x24>)
 8007e34:	681b      	ldr	r3, [r3, #0]
	}
 8007e36:	4618      	mov	r0, r3
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	2000097c 	.word	0x2000097c

08007e44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e4e:	4b21      	ldr	r3, [pc, #132]	@ (8007ed4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e54:	4b20      	ldr	r3, [pc, #128]	@ (8007ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3304      	adds	r3, #4
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fe f87c 	bl	8005f58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e66:	d10a      	bne.n	8007e7e <prvAddCurrentTaskToDelayedList+0x3a>
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d007      	beq.n	8007e7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8007ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	3304      	adds	r3, #4
 8007e74:	4619      	mov	r1, r3
 8007e76:	4819      	ldr	r0, [pc, #100]	@ (8007edc <prvAddCurrentTaskToDelayedList+0x98>)
 8007e78:	f7fe f811 	bl	8005e9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e7c:	e026      	b.n	8007ecc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4413      	add	r3, r2
 8007e84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e86:	4b14      	ldr	r3, [pc, #80]	@ (8007ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d209      	bcs.n	8007eaa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e96:	4b12      	ldr	r3, [pc, #72]	@ (8007ee0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8007ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	3304      	adds	r3, #4
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	4610      	mov	r0, r2
 8007ea4:	f7fe f81f 	bl	8005ee6 <vListInsert>
}
 8007ea8:	e010      	b.n	8007ecc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8007ee4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	4b0a      	ldr	r3, [pc, #40]	@ (8007ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	f7fe f815 	bl	8005ee6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8007ee8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d202      	bcs.n	8007ecc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007ec6:	4a08      	ldr	r2, [pc, #32]	@ (8007ee8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	6013      	str	r3, [r2, #0]
}
 8007ecc:	bf00      	nop
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	20000e54 	.word	0x20000e54
 8007ed8:	2000097c 	.word	0x2000097c
 8007edc:	20000e3c 	.word	0x20000e3c
 8007ee0:	20000e0c 	.word	0x20000e0c
 8007ee4:	20000e08 	.word	0x20000e08
 8007ee8:	20000e70 	.word	0x20000e70

08007eec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08a      	sub	sp, #40	@ 0x28
 8007ef0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007ef6:	f000 fb13 	bl	8008520 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007efa:	4b1d      	ldr	r3, [pc, #116]	@ (8007f70 <xTimerCreateTimerTask+0x84>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d021      	beq.n	8007f46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007f02:	2300      	movs	r3, #0
 8007f04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007f06:	2300      	movs	r3, #0
 8007f08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007f0a:	1d3a      	adds	r2, r7, #4
 8007f0c:	f107 0108 	add.w	r1, r7, #8
 8007f10:	f107 030c 	add.w	r3, r7, #12
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7fd ff7b 	bl	8005e10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007f1a:	6879      	ldr	r1, [r7, #4]
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	9202      	str	r2, [sp, #8]
 8007f22:	9301      	str	r3, [sp, #4]
 8007f24:	2302      	movs	r3, #2
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	2300      	movs	r3, #0
 8007f2a:	460a      	mov	r2, r1
 8007f2c:	4911      	ldr	r1, [pc, #68]	@ (8007f74 <xTimerCreateTimerTask+0x88>)
 8007f2e:	4812      	ldr	r0, [pc, #72]	@ (8007f78 <xTimerCreateTimerTask+0x8c>)
 8007f30:	f7fe ffa2 	bl	8006e78 <xTaskCreateStatic>
 8007f34:	4603      	mov	r3, r0
 8007f36:	4a11      	ldr	r2, [pc, #68]	@ (8007f7c <xTimerCreateTimerTask+0x90>)
 8007f38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007f3a:	4b10      	ldr	r3, [pc, #64]	@ (8007f7c <xTimerCreateTimerTask+0x90>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007f42:	2301      	movs	r3, #1
 8007f44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10b      	bne.n	8007f64 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f50:	f383 8811 	msr	BASEPRI, r3
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	613b      	str	r3, [r7, #16]
}
 8007f5e:	bf00      	nop
 8007f60:	bf00      	nop
 8007f62:	e7fd      	b.n	8007f60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007f64:	697b      	ldr	r3, [r7, #20]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3718      	adds	r7, #24
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	20000eac 	.word	0x20000eac
 8007f74:	08009988 	.word	0x08009988
 8007f78:	080080b9 	.word	0x080080b9
 8007f7c:	20000eb0 	.word	0x20000eb0

08007f80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b08a      	sub	sp, #40	@ 0x28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
 8007f8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10b      	bne.n	8007fb0 <xTimerGenericCommand+0x30>
	__asm volatile
 8007f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f9c:	f383 8811 	msr	BASEPRI, r3
 8007fa0:	f3bf 8f6f 	isb	sy
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	623b      	str	r3, [r7, #32]
}
 8007faa:	bf00      	nop
 8007fac:	bf00      	nop
 8007fae:	e7fd      	b.n	8007fac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007fb0:	4b19      	ldr	r3, [pc, #100]	@ (8008018 <xTimerGenericCommand+0x98>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d02a      	beq.n	800800e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2b05      	cmp	r3, #5
 8007fc8:	dc18      	bgt.n	8007ffc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007fca:	f7ff fdad 	bl	8007b28 <xTaskGetSchedulerState>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d109      	bne.n	8007fe8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007fd4:	4b10      	ldr	r3, [pc, #64]	@ (8008018 <xTimerGenericCommand+0x98>)
 8007fd6:	6818      	ldr	r0, [r3, #0]
 8007fd8:	f107 0110 	add.w	r1, r7, #16
 8007fdc:	2300      	movs	r3, #0
 8007fde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fe0:	f7fe f9e4 	bl	80063ac <xQueueGenericSend>
 8007fe4:	6278      	str	r0, [r7, #36]	@ 0x24
 8007fe6:	e012      	b.n	800800e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8008018 <xTimerGenericCommand+0x98>)
 8007fea:	6818      	ldr	r0, [r3, #0]
 8007fec:	f107 0110 	add.w	r1, r7, #16
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f7fe f9da 	bl	80063ac <xQueueGenericSend>
 8007ff8:	6278      	str	r0, [r7, #36]	@ 0x24
 8007ffa:	e008      	b.n	800800e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ffc:	4b06      	ldr	r3, [pc, #24]	@ (8008018 <xTimerGenericCommand+0x98>)
 8007ffe:	6818      	ldr	r0, [r3, #0]
 8008000:	f107 0110 	add.w	r1, r7, #16
 8008004:	2300      	movs	r3, #0
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	f7fe fad2 	bl	80065b0 <xQueueGenericSendFromISR>
 800800c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800800e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008010:	4618      	mov	r0, r3
 8008012:	3728      	adds	r7, #40	@ 0x28
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	20000eac 	.word	0x20000eac

0800801c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b088      	sub	sp, #32
 8008020:	af02      	add	r7, sp, #8
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008026:	4b23      	ldr	r3, [pc, #140]	@ (80080b4 <prvProcessExpiredTimer+0x98>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	3304      	adds	r3, #4
 8008034:	4618      	mov	r0, r3
 8008036:	f7fd ff8f 	bl	8005f58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008040:	f003 0304 	and.w	r3, r3, #4
 8008044:	2b00      	cmp	r3, #0
 8008046:	d023      	beq.n	8008090 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	699a      	ldr	r2, [r3, #24]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	18d1      	adds	r1, r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	6978      	ldr	r0, [r7, #20]
 8008056:	f000 f8d5 	bl	8008204 <prvInsertTimerInActiveList>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d020      	beq.n	80080a2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008060:	2300      	movs	r3, #0
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	2300      	movs	r3, #0
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	2100      	movs	r1, #0
 800806a:	6978      	ldr	r0, [r7, #20]
 800806c:	f7ff ff88 	bl	8007f80 <xTimerGenericCommand>
 8008070:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d114      	bne.n	80080a2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	60fb      	str	r3, [r7, #12]
}
 800808a:	bf00      	nop
 800808c:	bf00      	nop
 800808e:	e7fd      	b.n	800808c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008096:	f023 0301 	bic.w	r3, r3, #1
 800809a:	b2da      	uxtb	r2, r3
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	6978      	ldr	r0, [r7, #20]
 80080a8:	4798      	blx	r3
}
 80080aa:	bf00      	nop
 80080ac:	3718      	adds	r7, #24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	20000ea4 	.word	0x20000ea4

080080b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080c0:	f107 0308 	add.w	r3, r7, #8
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 f859 	bl	800817c <prvGetNextExpireTime>
 80080ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	4619      	mov	r1, r3
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 f805 	bl	80080e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80080d6:	f000 f8d7 	bl	8008288 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080da:	bf00      	nop
 80080dc:	e7f0      	b.n	80080c0 <prvTimerTask+0x8>
	...

080080e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80080ea:	f7ff f929 	bl	8007340 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080ee:	f107 0308 	add.w	r3, r7, #8
 80080f2:	4618      	mov	r0, r3
 80080f4:	f000 f866 	bl	80081c4 <prvSampleTimeNow>
 80080f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d130      	bne.n	8008162 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10a      	bne.n	800811c <prvProcessTimerOrBlockTask+0x3c>
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	429a      	cmp	r2, r3
 800810c:	d806      	bhi.n	800811c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800810e:	f7ff f925 	bl	800735c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008112:	68f9      	ldr	r1, [r7, #12]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f7ff ff81 	bl	800801c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800811a:	e024      	b.n	8008166 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d008      	beq.n	8008134 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008122:	4b13      	ldr	r3, [pc, #76]	@ (8008170 <prvProcessTimerOrBlockTask+0x90>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <prvProcessTimerOrBlockTask+0x50>
 800812c:	2301      	movs	r3, #1
 800812e:	e000      	b.n	8008132 <prvProcessTimerOrBlockTask+0x52>
 8008130:	2300      	movs	r3, #0
 8008132:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008134:	4b0f      	ldr	r3, [pc, #60]	@ (8008174 <prvProcessTimerOrBlockTask+0x94>)
 8008136:	6818      	ldr	r0, [r3, #0]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	4619      	mov	r1, r3
 8008142:	f7fe fe65 	bl	8006e10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008146:	f7ff f909 	bl	800735c <xTaskResumeAll>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d10a      	bne.n	8008166 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008150:	4b09      	ldr	r3, [pc, #36]	@ (8008178 <prvProcessTimerOrBlockTask+0x98>)
 8008152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008156:	601a      	str	r2, [r3, #0]
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	f3bf 8f6f 	isb	sy
}
 8008160:	e001      	b.n	8008166 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008162:	f7ff f8fb 	bl	800735c <xTaskResumeAll>
}
 8008166:	bf00      	nop
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	20000ea8 	.word	0x20000ea8
 8008174:	20000eac 	.word	0x20000eac
 8008178:	e000ed04 	.word	0xe000ed04

0800817c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008184:	4b0e      	ldr	r3, [pc, #56]	@ (80081c0 <prvGetNextExpireTime+0x44>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d101      	bne.n	8008192 <prvGetNextExpireTime+0x16>
 800818e:	2201      	movs	r2, #1
 8008190:	e000      	b.n	8008194 <prvGetNextExpireTime+0x18>
 8008192:	2200      	movs	r2, #0
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d105      	bne.n	80081ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081a0:	4b07      	ldr	r3, [pc, #28]	@ (80081c0 <prvGetNextExpireTime+0x44>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	60fb      	str	r3, [r7, #12]
 80081aa:	e001      	b.n	80081b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80081b0:	68fb      	ldr	r3, [r7, #12]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	20000ea4 	.word	0x20000ea4

080081c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80081cc:	f7ff f964 	bl	8007498 <xTaskGetTickCount>
 80081d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80081d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008200 <prvSampleTimeNow+0x3c>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d205      	bcs.n	80081e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80081dc:	f000 f93a 	bl	8008454 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	e002      	b.n	80081ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80081ee:	4a04      	ldr	r2, [pc, #16]	@ (8008200 <prvSampleTimeNow+0x3c>)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80081f4:	68fb      	ldr	r3, [r7, #12]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	20000eb4 	.word	0x20000eb4

08008204 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
 8008210:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008212:	2300      	movs	r3, #0
 8008214:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	429a      	cmp	r2, r3
 8008228:	d812      	bhi.n	8008250 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	1ad2      	subs	r2, r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	429a      	cmp	r2, r3
 8008236:	d302      	bcc.n	800823e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008238:	2301      	movs	r3, #1
 800823a:	617b      	str	r3, [r7, #20]
 800823c:	e01b      	b.n	8008276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800823e:	4b10      	ldr	r3, [pc, #64]	@ (8008280 <prvInsertTimerInActiveList+0x7c>)
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	3304      	adds	r3, #4
 8008246:	4619      	mov	r1, r3
 8008248:	4610      	mov	r0, r2
 800824a:	f7fd fe4c 	bl	8005ee6 <vListInsert>
 800824e:	e012      	b.n	8008276 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	429a      	cmp	r2, r3
 8008256:	d206      	bcs.n	8008266 <prvInsertTimerInActiveList+0x62>
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	429a      	cmp	r2, r3
 800825e:	d302      	bcc.n	8008266 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008260:	2301      	movs	r3, #1
 8008262:	617b      	str	r3, [r7, #20]
 8008264:	e007      	b.n	8008276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008266:	4b07      	ldr	r3, [pc, #28]	@ (8008284 <prvInsertTimerInActiveList+0x80>)
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	3304      	adds	r3, #4
 800826e:	4619      	mov	r1, r3
 8008270:	4610      	mov	r0, r2
 8008272:	f7fd fe38 	bl	8005ee6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008276:	697b      	ldr	r3, [r7, #20]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3718      	adds	r7, #24
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	20000ea8 	.word	0x20000ea8
 8008284:	20000ea4 	.word	0x20000ea4

08008288 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b08e      	sub	sp, #56	@ 0x38
 800828c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800828e:	e0ce      	b.n	800842e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	da19      	bge.n	80082ca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008296:	1d3b      	adds	r3, r7, #4
 8008298:	3304      	adds	r3, #4
 800829a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800829c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10b      	bne.n	80082ba <prvProcessReceivedCommands+0x32>
	__asm volatile
 80082a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	61fb      	str	r3, [r7, #28]
}
 80082b4:	bf00      	nop
 80082b6:	bf00      	nop
 80082b8:	e7fd      	b.n	80082b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80082ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082c0:	6850      	ldr	r0, [r2, #4]
 80082c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082c4:	6892      	ldr	r2, [r2, #8]
 80082c6:	4611      	mov	r1, r2
 80082c8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f2c0 80ae 	blt.w	800842e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80082d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d004      	beq.n	80082e8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e0:	3304      	adds	r3, #4
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fd fe38 	bl	8005f58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082e8:	463b      	mov	r3, r7
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7ff ff6a 	bl	80081c4 <prvSampleTimeNow>
 80082f0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2b09      	cmp	r3, #9
 80082f6:	f200 8097 	bhi.w	8008428 <prvProcessReceivedCommands+0x1a0>
 80082fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008300 <prvProcessReceivedCommands+0x78>)
 80082fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008300:	08008329 	.word	0x08008329
 8008304:	08008329 	.word	0x08008329
 8008308:	08008329 	.word	0x08008329
 800830c:	0800839f 	.word	0x0800839f
 8008310:	080083b3 	.word	0x080083b3
 8008314:	080083ff 	.word	0x080083ff
 8008318:	08008329 	.word	0x08008329
 800831c:	08008329 	.word	0x08008329
 8008320:	0800839f 	.word	0x0800839f
 8008324:	080083b3 	.word	0x080083b3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800832e:	f043 0301 	orr.w	r3, r3, #1
 8008332:	b2da      	uxtb	r2, r3
 8008334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008336:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	18d1      	adds	r1, r2, r3
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008346:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008348:	f7ff ff5c 	bl	8008204 <prvInsertTimerInActiveList>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d06c      	beq.n	800842c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008358:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800835a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008360:	f003 0304 	and.w	r3, r3, #4
 8008364:	2b00      	cmp	r3, #0
 8008366:	d061      	beq.n	800842c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008368:	68ba      	ldr	r2, [r7, #8]
 800836a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	441a      	add	r2, r3
 8008370:	2300      	movs	r3, #0
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	2300      	movs	r3, #0
 8008376:	2100      	movs	r1, #0
 8008378:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800837a:	f7ff fe01 	bl	8007f80 <xTimerGenericCommand>
 800837e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008380:	6a3b      	ldr	r3, [r7, #32]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d152      	bne.n	800842c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	61bb      	str	r3, [r7, #24]
}
 8008398:	bf00      	nop
 800839a:	bf00      	nop
 800839c:	e7fd      	b.n	800839a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800839e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083a4:	f023 0301 	bic.w	r3, r3, #1
 80083a8:	b2da      	uxtb	r2, r3
 80083aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80083b0:	e03d      	b.n	800842e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80083b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083b8:	f043 0301 	orr.w	r3, r3, #1
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80083ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d10b      	bne.n	80083ea <prvProcessReceivedCommands+0x162>
	__asm volatile
 80083d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d6:	f383 8811 	msr	BASEPRI, r3
 80083da:	f3bf 8f6f 	isb	sy
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	617b      	str	r3, [r7, #20]
}
 80083e4:	bf00      	nop
 80083e6:	bf00      	nop
 80083e8:	e7fd      	b.n	80083e6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80083ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ec:	699a      	ldr	r2, [r3, #24]
 80083ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f0:	18d1      	adds	r1, r2, r3
 80083f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083f8:	f7ff ff04 	bl	8008204 <prvInsertTimerInActiveList>
					break;
 80083fc:	e017      	b.n	800842e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80083fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008400:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008404:	f003 0302 	and.w	r3, r3, #2
 8008408:	2b00      	cmp	r3, #0
 800840a:	d103      	bne.n	8008414 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800840c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800840e:	f000 fbeb 	bl	8008be8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008412:	e00c      	b.n	800842e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008416:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800841a:	f023 0301 	bic.w	r3, r3, #1
 800841e:	b2da      	uxtb	r2, r3
 8008420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008422:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008426:	e002      	b.n	800842e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008428:	bf00      	nop
 800842a:	e000      	b.n	800842e <prvProcessReceivedCommands+0x1a6>
					break;
 800842c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800842e:	4b08      	ldr	r3, [pc, #32]	@ (8008450 <prvProcessReceivedCommands+0x1c8>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	1d39      	adds	r1, r7, #4
 8008434:	2200      	movs	r2, #0
 8008436:	4618      	mov	r0, r3
 8008438:	f7fe f958 	bl	80066ec <xQueueReceive>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	f47f af26 	bne.w	8008290 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008444:	bf00      	nop
 8008446:	bf00      	nop
 8008448:	3730      	adds	r7, #48	@ 0x30
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	20000eac 	.word	0x20000eac

08008454 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b088      	sub	sp, #32
 8008458:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800845a:	e049      	b.n	80084f0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800845c:	4b2e      	ldr	r3, [pc, #184]	@ (8008518 <prvSwitchTimerLists+0xc4>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008466:	4b2c      	ldr	r3, [pc, #176]	@ (8008518 <prvSwitchTimerLists+0xc4>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	3304      	adds	r3, #4
 8008474:	4618      	mov	r0, r3
 8008476:	f7fd fd6f 	bl	8005f58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6a1b      	ldr	r3, [r3, #32]
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008488:	f003 0304 	and.w	r3, r3, #4
 800848c:	2b00      	cmp	r3, #0
 800848e:	d02f      	beq.n	80084f0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	699b      	ldr	r3, [r3, #24]
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	4413      	add	r3, r2
 8008498:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d90e      	bls.n	80084c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084ae:	4b1a      	ldr	r3, [pc, #104]	@ (8008518 <prvSwitchTimerLists+0xc4>)
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	3304      	adds	r3, #4
 80084b6:	4619      	mov	r1, r3
 80084b8:	4610      	mov	r0, r2
 80084ba:	f7fd fd14 	bl	8005ee6 <vListInsert>
 80084be:	e017      	b.n	80084f0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084c0:	2300      	movs	r3, #0
 80084c2:	9300      	str	r3, [sp, #0]
 80084c4:	2300      	movs	r3, #0
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	2100      	movs	r1, #0
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f7ff fd58 	bl	8007f80 <xTimerGenericCommand>
 80084d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10b      	bne.n	80084f0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80084d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084dc:	f383 8811 	msr	BASEPRI, r3
 80084e0:	f3bf 8f6f 	isb	sy
 80084e4:	f3bf 8f4f 	dsb	sy
 80084e8:	603b      	str	r3, [r7, #0]
}
 80084ea:	bf00      	nop
 80084ec:	bf00      	nop
 80084ee:	e7fd      	b.n	80084ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084f0:	4b09      	ldr	r3, [pc, #36]	@ (8008518 <prvSwitchTimerLists+0xc4>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1b0      	bne.n	800845c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80084fa:	4b07      	ldr	r3, [pc, #28]	@ (8008518 <prvSwitchTimerLists+0xc4>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008500:	4b06      	ldr	r3, [pc, #24]	@ (800851c <prvSwitchTimerLists+0xc8>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a04      	ldr	r2, [pc, #16]	@ (8008518 <prvSwitchTimerLists+0xc4>)
 8008506:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008508:	4a04      	ldr	r2, [pc, #16]	@ (800851c <prvSwitchTimerLists+0xc8>)
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	6013      	str	r3, [r2, #0]
}
 800850e:	bf00      	nop
 8008510:	3718      	adds	r7, #24
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	20000ea4 	.word	0x20000ea4
 800851c:	20000ea8 	.word	0x20000ea8

08008520 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008526:	f000 f96f 	bl	8008808 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800852a:	4b15      	ldr	r3, [pc, #84]	@ (8008580 <prvCheckForValidListAndQueue+0x60>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d120      	bne.n	8008574 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008532:	4814      	ldr	r0, [pc, #80]	@ (8008584 <prvCheckForValidListAndQueue+0x64>)
 8008534:	f7fd fc86 	bl	8005e44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008538:	4813      	ldr	r0, [pc, #76]	@ (8008588 <prvCheckForValidListAndQueue+0x68>)
 800853a:	f7fd fc83 	bl	8005e44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800853e:	4b13      	ldr	r3, [pc, #76]	@ (800858c <prvCheckForValidListAndQueue+0x6c>)
 8008540:	4a10      	ldr	r2, [pc, #64]	@ (8008584 <prvCheckForValidListAndQueue+0x64>)
 8008542:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008544:	4b12      	ldr	r3, [pc, #72]	@ (8008590 <prvCheckForValidListAndQueue+0x70>)
 8008546:	4a10      	ldr	r2, [pc, #64]	@ (8008588 <prvCheckForValidListAndQueue+0x68>)
 8008548:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800854a:	2300      	movs	r3, #0
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	4b11      	ldr	r3, [pc, #68]	@ (8008594 <prvCheckForValidListAndQueue+0x74>)
 8008550:	4a11      	ldr	r2, [pc, #68]	@ (8008598 <prvCheckForValidListAndQueue+0x78>)
 8008552:	2110      	movs	r1, #16
 8008554:	200a      	movs	r0, #10
 8008556:	f7fd fd93 	bl	8006080 <xQueueGenericCreateStatic>
 800855a:	4603      	mov	r3, r0
 800855c:	4a08      	ldr	r2, [pc, #32]	@ (8008580 <prvCheckForValidListAndQueue+0x60>)
 800855e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008560:	4b07      	ldr	r3, [pc, #28]	@ (8008580 <prvCheckForValidListAndQueue+0x60>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d005      	beq.n	8008574 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008568:	4b05      	ldr	r3, [pc, #20]	@ (8008580 <prvCheckForValidListAndQueue+0x60>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	490b      	ldr	r1, [pc, #44]	@ (800859c <prvCheckForValidListAndQueue+0x7c>)
 800856e:	4618      	mov	r0, r3
 8008570:	f7fe fbfa 	bl	8006d68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008574:	f000 f97a 	bl	800886c <vPortExitCritical>
}
 8008578:	bf00      	nop
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	20000eac 	.word	0x20000eac
 8008584:	20000e7c 	.word	0x20000e7c
 8008588:	20000e90 	.word	0x20000e90
 800858c:	20000ea4 	.word	0x20000ea4
 8008590:	20000ea8 	.word	0x20000ea8
 8008594:	20000f58 	.word	0x20000f58
 8008598:	20000eb8 	.word	0x20000eb8
 800859c:	08009990 	.word	0x08009990

080085a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	3b04      	subs	r3, #4
 80085b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80085b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	3b04      	subs	r3, #4
 80085be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	f023 0201 	bic.w	r2, r3, #1
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	3b04      	subs	r3, #4
 80085ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80085d0:	4a0c      	ldr	r2, [pc, #48]	@ (8008604 <pxPortInitialiseStack+0x64>)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	3b14      	subs	r3, #20
 80085da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	3b04      	subs	r3, #4
 80085e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f06f 0202 	mvn.w	r2, #2
 80085ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	3b20      	subs	r3, #32
 80085f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085f6:	68fb      	ldr	r3, [r7, #12]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3714      	adds	r7, #20
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr
 8008604:	08008609 	.word	0x08008609

08008608 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800860e:	2300      	movs	r3, #0
 8008610:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008612:	4b13      	ldr	r3, [pc, #76]	@ (8008660 <prvTaskExitError+0x58>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800861a:	d00b      	beq.n	8008634 <prvTaskExitError+0x2c>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	60fb      	str	r3, [r7, #12]
}
 800862e:	bf00      	nop
 8008630:	bf00      	nop
 8008632:	e7fd      	b.n	8008630 <prvTaskExitError+0x28>
	__asm volatile
 8008634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008638:	f383 8811 	msr	BASEPRI, r3
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	60bb      	str	r3, [r7, #8]
}
 8008646:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008648:	bf00      	nop
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d0fc      	beq.n	800864a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008650:	bf00      	nop
 8008652:	bf00      	nop
 8008654:	3714      	adds	r7, #20
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	2000000c 	.word	0x2000000c
	...

08008670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008670:	4b07      	ldr	r3, [pc, #28]	@ (8008690 <pxCurrentTCBConst2>)
 8008672:	6819      	ldr	r1, [r3, #0]
 8008674:	6808      	ldr	r0, [r1, #0]
 8008676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800867a:	f380 8809 	msr	PSP, r0
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	f04f 0000 	mov.w	r0, #0
 8008686:	f380 8811 	msr	BASEPRI, r0
 800868a:	4770      	bx	lr
 800868c:	f3af 8000 	nop.w

08008690 <pxCurrentTCBConst2>:
 8008690:	2000097c 	.word	0x2000097c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008694:	bf00      	nop
 8008696:	bf00      	nop

08008698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008698:	4808      	ldr	r0, [pc, #32]	@ (80086bc <prvPortStartFirstTask+0x24>)
 800869a:	6800      	ldr	r0, [r0, #0]
 800869c:	6800      	ldr	r0, [r0, #0]
 800869e:	f380 8808 	msr	MSP, r0
 80086a2:	f04f 0000 	mov.w	r0, #0
 80086a6:	f380 8814 	msr	CONTROL, r0
 80086aa:	b662      	cpsie	i
 80086ac:	b661      	cpsie	f
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	df00      	svc	0
 80086b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80086ba:	bf00      	nop
 80086bc:	e000ed08 	.word	0xe000ed08

080086c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80086c6:	4b47      	ldr	r3, [pc, #284]	@ (80087e4 <xPortStartScheduler+0x124>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a47      	ldr	r2, [pc, #284]	@ (80087e8 <xPortStartScheduler+0x128>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d10b      	bne.n	80086e8 <xPortStartScheduler+0x28>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	613b      	str	r3, [r7, #16]
}
 80086e2:	bf00      	nop
 80086e4:	bf00      	nop
 80086e6:	e7fd      	b.n	80086e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80086e8:	4b3e      	ldr	r3, [pc, #248]	@ (80087e4 <xPortStartScheduler+0x124>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a3f      	ldr	r2, [pc, #252]	@ (80087ec <xPortStartScheduler+0x12c>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d10b      	bne.n	800870a <xPortStartScheduler+0x4a>
	__asm volatile
 80086f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	60fb      	str	r3, [r7, #12]
}
 8008704:	bf00      	nop
 8008706:	bf00      	nop
 8008708:	e7fd      	b.n	8008706 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800870a:	4b39      	ldr	r3, [pc, #228]	@ (80087f0 <xPortStartScheduler+0x130>)
 800870c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	b2db      	uxtb	r3, r3
 8008714:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	22ff      	movs	r2, #255	@ 0xff
 800871a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	b2db      	uxtb	r3, r3
 8008722:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008724:	78fb      	ldrb	r3, [r7, #3]
 8008726:	b2db      	uxtb	r3, r3
 8008728:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800872c:	b2da      	uxtb	r2, r3
 800872e:	4b31      	ldr	r3, [pc, #196]	@ (80087f4 <xPortStartScheduler+0x134>)
 8008730:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008732:	4b31      	ldr	r3, [pc, #196]	@ (80087f8 <xPortStartScheduler+0x138>)
 8008734:	2207      	movs	r2, #7
 8008736:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008738:	e009      	b.n	800874e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800873a:	4b2f      	ldr	r3, [pc, #188]	@ (80087f8 <xPortStartScheduler+0x138>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3b01      	subs	r3, #1
 8008740:	4a2d      	ldr	r2, [pc, #180]	@ (80087f8 <xPortStartScheduler+0x138>)
 8008742:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008744:	78fb      	ldrb	r3, [r7, #3]
 8008746:	b2db      	uxtb	r3, r3
 8008748:	005b      	lsls	r3, r3, #1
 800874a:	b2db      	uxtb	r3, r3
 800874c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800874e:	78fb      	ldrb	r3, [r7, #3]
 8008750:	b2db      	uxtb	r3, r3
 8008752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008756:	2b80      	cmp	r3, #128	@ 0x80
 8008758:	d0ef      	beq.n	800873a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800875a:	4b27      	ldr	r3, [pc, #156]	@ (80087f8 <xPortStartScheduler+0x138>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f1c3 0307 	rsb	r3, r3, #7
 8008762:	2b04      	cmp	r3, #4
 8008764:	d00b      	beq.n	800877e <xPortStartScheduler+0xbe>
	__asm volatile
 8008766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876a:	f383 8811 	msr	BASEPRI, r3
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	60bb      	str	r3, [r7, #8]
}
 8008778:	bf00      	nop
 800877a:	bf00      	nop
 800877c:	e7fd      	b.n	800877a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800877e:	4b1e      	ldr	r3, [pc, #120]	@ (80087f8 <xPortStartScheduler+0x138>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	021b      	lsls	r3, r3, #8
 8008784:	4a1c      	ldr	r2, [pc, #112]	@ (80087f8 <xPortStartScheduler+0x138>)
 8008786:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008788:	4b1b      	ldr	r3, [pc, #108]	@ (80087f8 <xPortStartScheduler+0x138>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008790:	4a19      	ldr	r2, [pc, #100]	@ (80087f8 <xPortStartScheduler+0x138>)
 8008792:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	b2da      	uxtb	r2, r3
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800879c:	4b17      	ldr	r3, [pc, #92]	@ (80087fc <xPortStartScheduler+0x13c>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a16      	ldr	r2, [pc, #88]	@ (80087fc <xPortStartScheduler+0x13c>)
 80087a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80087a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80087a8:	4b14      	ldr	r3, [pc, #80]	@ (80087fc <xPortStartScheduler+0x13c>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a13      	ldr	r2, [pc, #76]	@ (80087fc <xPortStartScheduler+0x13c>)
 80087ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80087b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80087b4:	f000 f8da 	bl	800896c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80087b8:	4b11      	ldr	r3, [pc, #68]	@ (8008800 <xPortStartScheduler+0x140>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80087be:	f000 f8f9 	bl	80089b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80087c2:	4b10      	ldr	r3, [pc, #64]	@ (8008804 <xPortStartScheduler+0x144>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a0f      	ldr	r2, [pc, #60]	@ (8008804 <xPortStartScheduler+0x144>)
 80087c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80087cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80087ce:	f7ff ff63 	bl	8008698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80087d2:	f7fe ff2b 	bl	800762c <vTaskSwitchContext>
	prvTaskExitError();
 80087d6:	f7ff ff17 	bl	8008608 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3718      	adds	r7, #24
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	e000ed00 	.word	0xe000ed00
 80087e8:	410fc271 	.word	0x410fc271
 80087ec:	410fc270 	.word	0x410fc270
 80087f0:	e000e400 	.word	0xe000e400
 80087f4:	20000fa8 	.word	0x20000fa8
 80087f8:	20000fac 	.word	0x20000fac
 80087fc:	e000ed20 	.word	0xe000ed20
 8008800:	2000000c 	.word	0x2000000c
 8008804:	e000ef34 	.word	0xe000ef34

08008808 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
	__asm volatile
 800880e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	607b      	str	r3, [r7, #4]
}
 8008820:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008822:	4b10      	ldr	r3, [pc, #64]	@ (8008864 <vPortEnterCritical+0x5c>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3301      	adds	r3, #1
 8008828:	4a0e      	ldr	r2, [pc, #56]	@ (8008864 <vPortEnterCritical+0x5c>)
 800882a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800882c:	4b0d      	ldr	r3, [pc, #52]	@ (8008864 <vPortEnterCritical+0x5c>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d110      	bne.n	8008856 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008834:	4b0c      	ldr	r3, [pc, #48]	@ (8008868 <vPortEnterCritical+0x60>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00b      	beq.n	8008856 <vPortEnterCritical+0x4e>
	__asm volatile
 800883e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	603b      	str	r3, [r7, #0]
}
 8008850:	bf00      	nop
 8008852:	bf00      	nop
 8008854:	e7fd      	b.n	8008852 <vPortEnterCritical+0x4a>
	}
}
 8008856:	bf00      	nop
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	2000000c 	.word	0x2000000c
 8008868:	e000ed04 	.word	0xe000ed04

0800886c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008872:	4b12      	ldr	r3, [pc, #72]	@ (80088bc <vPortExitCritical+0x50>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10b      	bne.n	8008892 <vPortExitCritical+0x26>
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	607b      	str	r3, [r7, #4]
}
 800888c:	bf00      	nop
 800888e:	bf00      	nop
 8008890:	e7fd      	b.n	800888e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008892:	4b0a      	ldr	r3, [pc, #40]	@ (80088bc <vPortExitCritical+0x50>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	3b01      	subs	r3, #1
 8008898:	4a08      	ldr	r2, [pc, #32]	@ (80088bc <vPortExitCritical+0x50>)
 800889a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800889c:	4b07      	ldr	r3, [pc, #28]	@ (80088bc <vPortExitCritical+0x50>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d105      	bne.n	80088b0 <vPortExitCritical+0x44>
 80088a4:	2300      	movs	r3, #0
 80088a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	f383 8811 	msr	BASEPRI, r3
}
 80088ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr
 80088bc:	2000000c 	.word	0x2000000c

080088c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80088c0:	f3ef 8009 	mrs	r0, PSP
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	4b15      	ldr	r3, [pc, #84]	@ (8008920 <pxCurrentTCBConst>)
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	f01e 0f10 	tst.w	lr, #16
 80088d0:	bf08      	it	eq
 80088d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80088d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088da:	6010      	str	r0, [r2, #0]
 80088dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80088e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80088e4:	f380 8811 	msr	BASEPRI, r0
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	f7fe fe9c 	bl	800762c <vTaskSwitchContext>
 80088f4:	f04f 0000 	mov.w	r0, #0
 80088f8:	f380 8811 	msr	BASEPRI, r0
 80088fc:	bc09      	pop	{r0, r3}
 80088fe:	6819      	ldr	r1, [r3, #0]
 8008900:	6808      	ldr	r0, [r1, #0]
 8008902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008906:	f01e 0f10 	tst.w	lr, #16
 800890a:	bf08      	it	eq
 800890c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008910:	f380 8809 	msr	PSP, r0
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	f3af 8000 	nop.w

08008920 <pxCurrentTCBConst>:
 8008920:	2000097c 	.word	0x2000097c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008924:	bf00      	nop
 8008926:	bf00      	nop

08008928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
	__asm volatile
 800892e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	607b      	str	r3, [r7, #4]
}
 8008940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008942:	f7fe fdb9 	bl	80074b8 <xTaskIncrementTick>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d003      	beq.n	8008954 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800894c:	4b06      	ldr	r3, [pc, #24]	@ (8008968 <xPortSysTickHandler+0x40>)
 800894e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008952:	601a      	str	r2, [r3, #0]
 8008954:	2300      	movs	r3, #0
 8008956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	f383 8811 	msr	BASEPRI, r3
}
 800895e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008960:	bf00      	nop
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	e000ed04 	.word	0xe000ed04

0800896c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800896c:	b480      	push	{r7}
 800896e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008970:	4b0b      	ldr	r3, [pc, #44]	@ (80089a0 <vPortSetupTimerInterrupt+0x34>)
 8008972:	2200      	movs	r2, #0
 8008974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008976:	4b0b      	ldr	r3, [pc, #44]	@ (80089a4 <vPortSetupTimerInterrupt+0x38>)
 8008978:	2200      	movs	r2, #0
 800897a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800897c:	4b0a      	ldr	r3, [pc, #40]	@ (80089a8 <vPortSetupTimerInterrupt+0x3c>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a0a      	ldr	r2, [pc, #40]	@ (80089ac <vPortSetupTimerInterrupt+0x40>)
 8008982:	fba2 2303 	umull	r2, r3, r2, r3
 8008986:	099b      	lsrs	r3, r3, #6
 8008988:	4a09      	ldr	r2, [pc, #36]	@ (80089b0 <vPortSetupTimerInterrupt+0x44>)
 800898a:	3b01      	subs	r3, #1
 800898c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800898e:	4b04      	ldr	r3, [pc, #16]	@ (80089a0 <vPortSetupTimerInterrupt+0x34>)
 8008990:	2207      	movs	r2, #7
 8008992:	601a      	str	r2, [r3, #0]
}
 8008994:	bf00      	nop
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	e000e010 	.word	0xe000e010
 80089a4:	e000e018 	.word	0xe000e018
 80089a8:	20000000 	.word	0x20000000
 80089ac:	10624dd3 	.word	0x10624dd3
 80089b0:	e000e014 	.word	0xe000e014

080089b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80089b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80089c4 <vPortEnableVFP+0x10>
 80089b8:	6801      	ldr	r1, [r0, #0]
 80089ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80089be:	6001      	str	r1, [r0, #0]
 80089c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80089c2:	bf00      	nop
 80089c4:	e000ed88 	.word	0xe000ed88

080089c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80089ce:	f3ef 8305 	mrs	r3, IPSR
 80089d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2b0f      	cmp	r3, #15
 80089d8:	d915      	bls.n	8008a06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80089da:	4a18      	ldr	r2, [pc, #96]	@ (8008a3c <vPortValidateInterruptPriority+0x74>)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	4413      	add	r3, r2
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80089e4:	4b16      	ldr	r3, [pc, #88]	@ (8008a40 <vPortValidateInterruptPriority+0x78>)
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	7afa      	ldrb	r2, [r7, #11]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d20b      	bcs.n	8008a06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	607b      	str	r3, [r7, #4]
}
 8008a00:	bf00      	nop
 8008a02:	bf00      	nop
 8008a04:	e7fd      	b.n	8008a02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a06:	4b0f      	ldr	r3, [pc, #60]	@ (8008a44 <vPortValidateInterruptPriority+0x7c>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8008a48 <vPortValidateInterruptPriority+0x80>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d90b      	bls.n	8008a2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a1a:	f383 8811 	msr	BASEPRI, r3
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	603b      	str	r3, [r7, #0]
}
 8008a28:	bf00      	nop
 8008a2a:	bf00      	nop
 8008a2c:	e7fd      	b.n	8008a2a <vPortValidateInterruptPriority+0x62>
	}
 8008a2e:	bf00      	nop
 8008a30:	3714      	adds	r7, #20
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop
 8008a3c:	e000e3f0 	.word	0xe000e3f0
 8008a40:	20000fa8 	.word	0x20000fa8
 8008a44:	e000ed0c 	.word	0xe000ed0c
 8008a48:	20000fac 	.word	0x20000fac

08008a4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b08a      	sub	sp, #40	@ 0x28
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a54:	2300      	movs	r3, #0
 8008a56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a58:	f7fe fc72 	bl	8007340 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a5c:	4b5c      	ldr	r3, [pc, #368]	@ (8008bd0 <pvPortMalloc+0x184>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d101      	bne.n	8008a68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a64:	f000 f924 	bl	8008cb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a68:	4b5a      	ldr	r3, [pc, #360]	@ (8008bd4 <pvPortMalloc+0x188>)
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4013      	ands	r3, r2
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f040 8095 	bne.w	8008ba0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d01e      	beq.n	8008aba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008a7c:	2208      	movs	r2, #8
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4413      	add	r3, r2
 8008a82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f003 0307 	and.w	r3, r3, #7
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d015      	beq.n	8008aba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f023 0307 	bic.w	r3, r3, #7
 8008a94:	3308      	adds	r3, #8
 8008a96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f003 0307 	and.w	r3, r3, #7
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00b      	beq.n	8008aba <pvPortMalloc+0x6e>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	617b      	str	r3, [r7, #20]
}
 8008ab4:	bf00      	nop
 8008ab6:	bf00      	nop
 8008ab8:	e7fd      	b.n	8008ab6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d06f      	beq.n	8008ba0 <pvPortMalloc+0x154>
 8008ac0:	4b45      	ldr	r3, [pc, #276]	@ (8008bd8 <pvPortMalloc+0x18c>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d86a      	bhi.n	8008ba0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008aca:	4b44      	ldr	r3, [pc, #272]	@ (8008bdc <pvPortMalloc+0x190>)
 8008acc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ace:	4b43      	ldr	r3, [pc, #268]	@ (8008bdc <pvPortMalloc+0x190>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ad4:	e004      	b.n	8008ae0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d903      	bls.n	8008af2 <pvPortMalloc+0xa6>
 8008aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1f1      	bne.n	8008ad6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008af2:	4b37      	ldr	r3, [pc, #220]	@ (8008bd0 <pvPortMalloc+0x184>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d051      	beq.n	8008ba0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2208      	movs	r2, #8
 8008b02:	4413      	add	r3, r2
 8008b04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	6a3b      	ldr	r3, [r7, #32]
 8008b0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	1ad2      	subs	r2, r2, r3
 8008b16:	2308      	movs	r3, #8
 8008b18:	005b      	lsls	r3, r3, #1
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d920      	bls.n	8008b60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4413      	add	r3, r2
 8008b24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	f003 0307 	and.w	r3, r3, #7
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00b      	beq.n	8008b48 <pvPortMalloc+0xfc>
	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	613b      	str	r3, [r7, #16]
}
 8008b42:	bf00      	nop
 8008b44:	bf00      	nop
 8008b46:	e7fd      	b.n	8008b44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4a:	685a      	ldr	r2, [r3, #4]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	1ad2      	subs	r2, r2, r3
 8008b50:	69bb      	ldr	r3, [r7, #24]
 8008b52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b5a:	69b8      	ldr	r0, [r7, #24]
 8008b5c:	f000 f90a 	bl	8008d74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b60:	4b1d      	ldr	r3, [pc, #116]	@ (8008bd8 <pvPortMalloc+0x18c>)
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8008bd8 <pvPortMalloc+0x18c>)
 8008b6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8008bd8 <pvPortMalloc+0x18c>)
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	4b1b      	ldr	r3, [pc, #108]	@ (8008be0 <pvPortMalloc+0x194>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d203      	bcs.n	8008b82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b7a:	4b17      	ldr	r3, [pc, #92]	@ (8008bd8 <pvPortMalloc+0x18c>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a18      	ldr	r2, [pc, #96]	@ (8008be0 <pvPortMalloc+0x194>)
 8008b80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b84:	685a      	ldr	r2, [r3, #4]
 8008b86:	4b13      	ldr	r3, [pc, #76]	@ (8008bd4 <pvPortMalloc+0x188>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	431a      	orrs	r2, r3
 8008b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b92:	2200      	movs	r2, #0
 8008b94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008b96:	4b13      	ldr	r3, [pc, #76]	@ (8008be4 <pvPortMalloc+0x198>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	4a11      	ldr	r2, [pc, #68]	@ (8008be4 <pvPortMalloc+0x198>)
 8008b9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ba0:	f7fe fbdc 	bl	800735c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	f003 0307 	and.w	r3, r3, #7
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00b      	beq.n	8008bc6 <pvPortMalloc+0x17a>
	__asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	60fb      	str	r3, [r7, #12]
}
 8008bc0:	bf00      	nop
 8008bc2:	bf00      	nop
 8008bc4:	e7fd      	b.n	8008bc2 <pvPortMalloc+0x176>
	return pvReturn;
 8008bc6:	69fb      	ldr	r3, [r7, #28]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3728      	adds	r7, #40	@ 0x28
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	20004bb8 	.word	0x20004bb8
 8008bd4:	20004bcc 	.word	0x20004bcc
 8008bd8:	20004bbc 	.word	0x20004bbc
 8008bdc:	20004bb0 	.word	0x20004bb0
 8008be0:	20004bc0 	.word	0x20004bc0
 8008be4:	20004bc4 	.word	0x20004bc4

08008be8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d04f      	beq.n	8008c9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008bfa:	2308      	movs	r3, #8
 8008bfc:	425b      	negs	r3, r3
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	4413      	add	r3, r2
 8008c02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	4b25      	ldr	r3, [pc, #148]	@ (8008ca4 <vPortFree+0xbc>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4013      	ands	r3, r2
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10b      	bne.n	8008c2e <vPortFree+0x46>
	__asm volatile
 8008c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1a:	f383 8811 	msr	BASEPRI, r3
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	60fb      	str	r3, [r7, #12]
}
 8008c28:	bf00      	nop
 8008c2a:	bf00      	nop
 8008c2c:	e7fd      	b.n	8008c2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00b      	beq.n	8008c4e <vPortFree+0x66>
	__asm volatile
 8008c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c3a:	f383 8811 	msr	BASEPRI, r3
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	60bb      	str	r3, [r7, #8]
}
 8008c48:	bf00      	nop
 8008c4a:	bf00      	nop
 8008c4c:	e7fd      	b.n	8008c4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	4b14      	ldr	r3, [pc, #80]	@ (8008ca4 <vPortFree+0xbc>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4013      	ands	r3, r2
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d01e      	beq.n	8008c9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d11a      	bne.n	8008c9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	4b0e      	ldr	r3, [pc, #56]	@ (8008ca4 <vPortFree+0xbc>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	43db      	mvns	r3, r3
 8008c6e:	401a      	ands	r2, r3
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c74:	f7fe fb64 	bl	8007340 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	685a      	ldr	r2, [r3, #4]
 8008c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008ca8 <vPortFree+0xc0>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4413      	add	r3, r2
 8008c82:	4a09      	ldr	r2, [pc, #36]	@ (8008ca8 <vPortFree+0xc0>)
 8008c84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c86:	6938      	ldr	r0, [r7, #16]
 8008c88:	f000 f874 	bl	8008d74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008c8c:	4b07      	ldr	r3, [pc, #28]	@ (8008cac <vPortFree+0xc4>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	3301      	adds	r3, #1
 8008c92:	4a06      	ldr	r2, [pc, #24]	@ (8008cac <vPortFree+0xc4>)
 8008c94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008c96:	f7fe fb61 	bl	800735c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c9a:	bf00      	nop
 8008c9c:	3718      	adds	r7, #24
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	20004bcc 	.word	0x20004bcc
 8008ca8:	20004bbc 	.word	0x20004bbc
 8008cac:	20004bc8 	.word	0x20004bc8

08008cb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008cb6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008cba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008cbc:	4b27      	ldr	r3, [pc, #156]	@ (8008d5c <prvHeapInit+0xac>)
 8008cbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f003 0307 	and.w	r3, r3, #7
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00c      	beq.n	8008ce4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3307      	adds	r3, #7
 8008cce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f023 0307 	bic.w	r3, r3, #7
 8008cd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	4a1f      	ldr	r2, [pc, #124]	@ (8008d5c <prvHeapInit+0xac>)
 8008ce0:	4413      	add	r3, r2
 8008ce2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8008d60 <prvHeapInit+0xb0>)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008cee:	4b1c      	ldr	r3, [pc, #112]	@ (8008d60 <prvHeapInit+0xb0>)
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008cfc:	2208      	movs	r2, #8
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	1a9b      	subs	r3, r3, r2
 8008d02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f023 0307 	bic.w	r3, r3, #7
 8008d0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	4a15      	ldr	r2, [pc, #84]	@ (8008d64 <prvHeapInit+0xb4>)
 8008d10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d12:	4b14      	ldr	r3, [pc, #80]	@ (8008d64 <prvHeapInit+0xb4>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2200      	movs	r2, #0
 8008d18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d1a:	4b12      	ldr	r3, [pc, #72]	@ (8008d64 <prvHeapInit+0xb4>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	1ad2      	subs	r2, r2, r3
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d30:	4b0c      	ldr	r3, [pc, #48]	@ (8008d64 <prvHeapInit+0xb4>)
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8008d68 <prvHeapInit+0xb8>)
 8008d3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	4a09      	ldr	r2, [pc, #36]	@ (8008d6c <prvHeapInit+0xbc>)
 8008d46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d48:	4b09      	ldr	r3, [pc, #36]	@ (8008d70 <prvHeapInit+0xc0>)
 8008d4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008d4e:	601a      	str	r2, [r3, #0]
}
 8008d50:	bf00      	nop
 8008d52:	3714      	adds	r7, #20
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr
 8008d5c:	20000fb0 	.word	0x20000fb0
 8008d60:	20004bb0 	.word	0x20004bb0
 8008d64:	20004bb8 	.word	0x20004bb8
 8008d68:	20004bc0 	.word	0x20004bc0
 8008d6c:	20004bbc 	.word	0x20004bbc
 8008d70:	20004bcc 	.word	0x20004bcc

08008d74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d7c:	4b28      	ldr	r3, [pc, #160]	@ (8008e20 <prvInsertBlockIntoFreeList+0xac>)
 8008d7e:	60fb      	str	r3, [r7, #12]
 8008d80:	e002      	b.n	8008d88 <prvInsertBlockIntoFreeList+0x14>
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	60fb      	str	r3, [r7, #12]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d8f7      	bhi.n	8008d82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d108      	bne.n	8008db6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	685a      	ldr	r2, [r3, #4]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	441a      	add	r2, r3
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	441a      	add	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d118      	bne.n	8008dfc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	4b15      	ldr	r3, [pc, #84]	@ (8008e24 <prvInsertBlockIntoFreeList+0xb0>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d00d      	beq.n	8008df2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	685a      	ldr	r2, [r3, #4]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	441a      	add	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	601a      	str	r2, [r3, #0]
 8008df0:	e008      	b.n	8008e04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008df2:	4b0c      	ldr	r3, [pc, #48]	@ (8008e24 <prvInsertBlockIntoFreeList+0xb0>)
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	601a      	str	r2, [r3, #0]
 8008dfa:	e003      	b.n	8008e04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d002      	beq.n	8008e12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e12:	bf00      	nop
 8008e14:	3714      	adds	r7, #20
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	20004bb0 	.word	0x20004bb0
 8008e24:	20004bb8 	.word	0x20004bb8

08008e28 <malloc>:
 8008e28:	4b02      	ldr	r3, [pc, #8]	@ (8008e34 <malloc+0xc>)
 8008e2a:	4601      	mov	r1, r0
 8008e2c:	6818      	ldr	r0, [r3, #0]
 8008e2e:	f000 b825 	b.w	8008e7c <_malloc_r>
 8008e32:	bf00      	nop
 8008e34:	20000010 	.word	0x20000010

08008e38 <sbrk_aligned>:
 8008e38:	b570      	push	{r4, r5, r6, lr}
 8008e3a:	4e0f      	ldr	r6, [pc, #60]	@ (8008e78 <sbrk_aligned+0x40>)
 8008e3c:	460c      	mov	r4, r1
 8008e3e:	6831      	ldr	r1, [r6, #0]
 8008e40:	4605      	mov	r5, r0
 8008e42:	b911      	cbnz	r1, 8008e4a <sbrk_aligned+0x12>
 8008e44:	f000 f934 	bl	80090b0 <_sbrk_r>
 8008e48:	6030      	str	r0, [r6, #0]
 8008e4a:	4621      	mov	r1, r4
 8008e4c:	4628      	mov	r0, r5
 8008e4e:	f000 f92f 	bl	80090b0 <_sbrk_r>
 8008e52:	1c43      	adds	r3, r0, #1
 8008e54:	d103      	bne.n	8008e5e <sbrk_aligned+0x26>
 8008e56:	f04f 34ff 	mov.w	r4, #4294967295
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	bd70      	pop	{r4, r5, r6, pc}
 8008e5e:	1cc4      	adds	r4, r0, #3
 8008e60:	f024 0403 	bic.w	r4, r4, #3
 8008e64:	42a0      	cmp	r0, r4
 8008e66:	d0f8      	beq.n	8008e5a <sbrk_aligned+0x22>
 8008e68:	1a21      	subs	r1, r4, r0
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	f000 f920 	bl	80090b0 <_sbrk_r>
 8008e70:	3001      	adds	r0, #1
 8008e72:	d1f2      	bne.n	8008e5a <sbrk_aligned+0x22>
 8008e74:	e7ef      	b.n	8008e56 <sbrk_aligned+0x1e>
 8008e76:	bf00      	nop
 8008e78:	20004bd0 	.word	0x20004bd0

08008e7c <_malloc_r>:
 8008e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e80:	1ccd      	adds	r5, r1, #3
 8008e82:	f025 0503 	bic.w	r5, r5, #3
 8008e86:	3508      	adds	r5, #8
 8008e88:	2d0c      	cmp	r5, #12
 8008e8a:	bf38      	it	cc
 8008e8c:	250c      	movcc	r5, #12
 8008e8e:	2d00      	cmp	r5, #0
 8008e90:	4606      	mov	r6, r0
 8008e92:	db01      	blt.n	8008e98 <_malloc_r+0x1c>
 8008e94:	42a9      	cmp	r1, r5
 8008e96:	d904      	bls.n	8008ea2 <_malloc_r+0x26>
 8008e98:	230c      	movs	r3, #12
 8008e9a:	6033      	str	r3, [r6, #0]
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ea2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f78 <_malloc_r+0xfc>
 8008ea6:	f000 f869 	bl	8008f7c <__malloc_lock>
 8008eaa:	f8d8 3000 	ldr.w	r3, [r8]
 8008eae:	461c      	mov	r4, r3
 8008eb0:	bb44      	cbnz	r4, 8008f04 <_malloc_r+0x88>
 8008eb2:	4629      	mov	r1, r5
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	f7ff ffbf 	bl	8008e38 <sbrk_aligned>
 8008eba:	1c43      	adds	r3, r0, #1
 8008ebc:	4604      	mov	r4, r0
 8008ebe:	d158      	bne.n	8008f72 <_malloc_r+0xf6>
 8008ec0:	f8d8 4000 	ldr.w	r4, [r8]
 8008ec4:	4627      	mov	r7, r4
 8008ec6:	2f00      	cmp	r7, #0
 8008ec8:	d143      	bne.n	8008f52 <_malloc_r+0xd6>
 8008eca:	2c00      	cmp	r4, #0
 8008ecc:	d04b      	beq.n	8008f66 <_malloc_r+0xea>
 8008ece:	6823      	ldr	r3, [r4, #0]
 8008ed0:	4639      	mov	r1, r7
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	eb04 0903 	add.w	r9, r4, r3
 8008ed8:	f000 f8ea 	bl	80090b0 <_sbrk_r>
 8008edc:	4581      	cmp	r9, r0
 8008ede:	d142      	bne.n	8008f66 <_malloc_r+0xea>
 8008ee0:	6821      	ldr	r1, [r4, #0]
 8008ee2:	1a6d      	subs	r5, r5, r1
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	f7ff ffa6 	bl	8008e38 <sbrk_aligned>
 8008eec:	3001      	adds	r0, #1
 8008eee:	d03a      	beq.n	8008f66 <_malloc_r+0xea>
 8008ef0:	6823      	ldr	r3, [r4, #0]
 8008ef2:	442b      	add	r3, r5
 8008ef4:	6023      	str	r3, [r4, #0]
 8008ef6:	f8d8 3000 	ldr.w	r3, [r8]
 8008efa:	685a      	ldr	r2, [r3, #4]
 8008efc:	bb62      	cbnz	r2, 8008f58 <_malloc_r+0xdc>
 8008efe:	f8c8 7000 	str.w	r7, [r8]
 8008f02:	e00f      	b.n	8008f24 <_malloc_r+0xa8>
 8008f04:	6822      	ldr	r2, [r4, #0]
 8008f06:	1b52      	subs	r2, r2, r5
 8008f08:	d420      	bmi.n	8008f4c <_malloc_r+0xd0>
 8008f0a:	2a0b      	cmp	r2, #11
 8008f0c:	d917      	bls.n	8008f3e <_malloc_r+0xc2>
 8008f0e:	1961      	adds	r1, r4, r5
 8008f10:	42a3      	cmp	r3, r4
 8008f12:	6025      	str	r5, [r4, #0]
 8008f14:	bf18      	it	ne
 8008f16:	6059      	strne	r1, [r3, #4]
 8008f18:	6863      	ldr	r3, [r4, #4]
 8008f1a:	bf08      	it	eq
 8008f1c:	f8c8 1000 	streq.w	r1, [r8]
 8008f20:	5162      	str	r2, [r4, r5]
 8008f22:	604b      	str	r3, [r1, #4]
 8008f24:	4630      	mov	r0, r6
 8008f26:	f000 f82f 	bl	8008f88 <__malloc_unlock>
 8008f2a:	f104 000b 	add.w	r0, r4, #11
 8008f2e:	1d23      	adds	r3, r4, #4
 8008f30:	f020 0007 	bic.w	r0, r0, #7
 8008f34:	1ac2      	subs	r2, r0, r3
 8008f36:	bf1c      	itt	ne
 8008f38:	1a1b      	subne	r3, r3, r0
 8008f3a:	50a3      	strne	r3, [r4, r2]
 8008f3c:	e7af      	b.n	8008e9e <_malloc_r+0x22>
 8008f3e:	6862      	ldr	r2, [r4, #4]
 8008f40:	42a3      	cmp	r3, r4
 8008f42:	bf0c      	ite	eq
 8008f44:	f8c8 2000 	streq.w	r2, [r8]
 8008f48:	605a      	strne	r2, [r3, #4]
 8008f4a:	e7eb      	b.n	8008f24 <_malloc_r+0xa8>
 8008f4c:	4623      	mov	r3, r4
 8008f4e:	6864      	ldr	r4, [r4, #4]
 8008f50:	e7ae      	b.n	8008eb0 <_malloc_r+0x34>
 8008f52:	463c      	mov	r4, r7
 8008f54:	687f      	ldr	r7, [r7, #4]
 8008f56:	e7b6      	b.n	8008ec6 <_malloc_r+0x4a>
 8008f58:	461a      	mov	r2, r3
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	42a3      	cmp	r3, r4
 8008f5e:	d1fb      	bne.n	8008f58 <_malloc_r+0xdc>
 8008f60:	2300      	movs	r3, #0
 8008f62:	6053      	str	r3, [r2, #4]
 8008f64:	e7de      	b.n	8008f24 <_malloc_r+0xa8>
 8008f66:	230c      	movs	r3, #12
 8008f68:	6033      	str	r3, [r6, #0]
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	f000 f80c 	bl	8008f88 <__malloc_unlock>
 8008f70:	e794      	b.n	8008e9c <_malloc_r+0x20>
 8008f72:	6005      	str	r5, [r0, #0]
 8008f74:	e7d6      	b.n	8008f24 <_malloc_r+0xa8>
 8008f76:	bf00      	nop
 8008f78:	20004bd4 	.word	0x20004bd4

08008f7c <__malloc_lock>:
 8008f7c:	4801      	ldr	r0, [pc, #4]	@ (8008f84 <__malloc_lock+0x8>)
 8008f7e:	f000 b8d1 	b.w	8009124 <__retarget_lock_acquire_recursive>
 8008f82:	bf00      	nop
 8008f84:	20004d14 	.word	0x20004d14

08008f88 <__malloc_unlock>:
 8008f88:	4801      	ldr	r0, [pc, #4]	@ (8008f90 <__malloc_unlock+0x8>)
 8008f8a:	f000 b8cc 	b.w	8009126 <__retarget_lock_release_recursive>
 8008f8e:	bf00      	nop
 8008f90:	20004d14 	.word	0x20004d14

08008f94 <siprintf>:
 8008f94:	b40e      	push	{r1, r2, r3}
 8008f96:	b500      	push	{lr}
 8008f98:	b09c      	sub	sp, #112	@ 0x70
 8008f9a:	ab1d      	add	r3, sp, #116	@ 0x74
 8008f9c:	9002      	str	r0, [sp, #8]
 8008f9e:	9006      	str	r0, [sp, #24]
 8008fa0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008fa4:	4809      	ldr	r0, [pc, #36]	@ (8008fcc <siprintf+0x38>)
 8008fa6:	9107      	str	r1, [sp, #28]
 8008fa8:	9104      	str	r1, [sp, #16]
 8008faa:	4909      	ldr	r1, [pc, #36]	@ (8008fd0 <siprintf+0x3c>)
 8008fac:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fb0:	9105      	str	r1, [sp, #20]
 8008fb2:	6800      	ldr	r0, [r0, #0]
 8008fb4:	9301      	str	r3, [sp, #4]
 8008fb6:	a902      	add	r1, sp, #8
 8008fb8:	f000 f96a 	bl	8009290 <_svfiprintf_r>
 8008fbc:	9b02      	ldr	r3, [sp, #8]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	701a      	strb	r2, [r3, #0]
 8008fc2:	b01c      	add	sp, #112	@ 0x70
 8008fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fc8:	b003      	add	sp, #12
 8008fca:	4770      	bx	lr
 8008fcc:	20000010 	.word	0x20000010
 8008fd0:	ffff0208 	.word	0xffff0208

08008fd4 <memset>:
 8008fd4:	4402      	add	r2, r0
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d100      	bne.n	8008fde <memset+0xa>
 8008fdc:	4770      	bx	lr
 8008fde:	f803 1b01 	strb.w	r1, [r3], #1
 8008fe2:	e7f9      	b.n	8008fd8 <memset+0x4>

08008fe4 <strcat>:
 8008fe4:	b510      	push	{r4, lr}
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	7814      	ldrb	r4, [r2, #0]
 8008fea:	4613      	mov	r3, r2
 8008fec:	3201      	adds	r2, #1
 8008fee:	2c00      	cmp	r4, #0
 8008ff0:	d1fa      	bne.n	8008fe8 <strcat+0x4>
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ff8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ffc:	2a00      	cmp	r2, #0
 8008ffe:	d1f9      	bne.n	8008ff4 <strcat+0x10>
 8009000:	bd10      	pop	{r4, pc}
	...

08009004 <_reclaim_reent>:
 8009004:	4b29      	ldr	r3, [pc, #164]	@ (80090ac <_reclaim_reent+0xa8>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4283      	cmp	r3, r0
 800900a:	b570      	push	{r4, r5, r6, lr}
 800900c:	4604      	mov	r4, r0
 800900e:	d04b      	beq.n	80090a8 <_reclaim_reent+0xa4>
 8009010:	69c3      	ldr	r3, [r0, #28]
 8009012:	b1ab      	cbz	r3, 8009040 <_reclaim_reent+0x3c>
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	b16b      	cbz	r3, 8009034 <_reclaim_reent+0x30>
 8009018:	2500      	movs	r5, #0
 800901a:	69e3      	ldr	r3, [r4, #28]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	5959      	ldr	r1, [r3, r5]
 8009020:	2900      	cmp	r1, #0
 8009022:	d13b      	bne.n	800909c <_reclaim_reent+0x98>
 8009024:	3504      	adds	r5, #4
 8009026:	2d80      	cmp	r5, #128	@ 0x80
 8009028:	d1f7      	bne.n	800901a <_reclaim_reent+0x16>
 800902a:	69e3      	ldr	r3, [r4, #28]
 800902c:	4620      	mov	r0, r4
 800902e:	68d9      	ldr	r1, [r3, #12]
 8009030:	f000 f888 	bl	8009144 <_free_r>
 8009034:	69e3      	ldr	r3, [r4, #28]
 8009036:	6819      	ldr	r1, [r3, #0]
 8009038:	b111      	cbz	r1, 8009040 <_reclaim_reent+0x3c>
 800903a:	4620      	mov	r0, r4
 800903c:	f000 f882 	bl	8009144 <_free_r>
 8009040:	6961      	ldr	r1, [r4, #20]
 8009042:	b111      	cbz	r1, 800904a <_reclaim_reent+0x46>
 8009044:	4620      	mov	r0, r4
 8009046:	f000 f87d 	bl	8009144 <_free_r>
 800904a:	69e1      	ldr	r1, [r4, #28]
 800904c:	b111      	cbz	r1, 8009054 <_reclaim_reent+0x50>
 800904e:	4620      	mov	r0, r4
 8009050:	f000 f878 	bl	8009144 <_free_r>
 8009054:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009056:	b111      	cbz	r1, 800905e <_reclaim_reent+0x5a>
 8009058:	4620      	mov	r0, r4
 800905a:	f000 f873 	bl	8009144 <_free_r>
 800905e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009060:	b111      	cbz	r1, 8009068 <_reclaim_reent+0x64>
 8009062:	4620      	mov	r0, r4
 8009064:	f000 f86e 	bl	8009144 <_free_r>
 8009068:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800906a:	b111      	cbz	r1, 8009072 <_reclaim_reent+0x6e>
 800906c:	4620      	mov	r0, r4
 800906e:	f000 f869 	bl	8009144 <_free_r>
 8009072:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009074:	b111      	cbz	r1, 800907c <_reclaim_reent+0x78>
 8009076:	4620      	mov	r0, r4
 8009078:	f000 f864 	bl	8009144 <_free_r>
 800907c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800907e:	b111      	cbz	r1, 8009086 <_reclaim_reent+0x82>
 8009080:	4620      	mov	r0, r4
 8009082:	f000 f85f 	bl	8009144 <_free_r>
 8009086:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009088:	b111      	cbz	r1, 8009090 <_reclaim_reent+0x8c>
 800908a:	4620      	mov	r0, r4
 800908c:	f000 f85a 	bl	8009144 <_free_r>
 8009090:	6a23      	ldr	r3, [r4, #32]
 8009092:	b14b      	cbz	r3, 80090a8 <_reclaim_reent+0xa4>
 8009094:	4620      	mov	r0, r4
 8009096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800909a:	4718      	bx	r3
 800909c:	680e      	ldr	r6, [r1, #0]
 800909e:	4620      	mov	r0, r4
 80090a0:	f000 f850 	bl	8009144 <_free_r>
 80090a4:	4631      	mov	r1, r6
 80090a6:	e7bb      	b.n	8009020 <_reclaim_reent+0x1c>
 80090a8:	bd70      	pop	{r4, r5, r6, pc}
 80090aa:	bf00      	nop
 80090ac:	20000010 	.word	0x20000010

080090b0 <_sbrk_r>:
 80090b0:	b538      	push	{r3, r4, r5, lr}
 80090b2:	4d06      	ldr	r5, [pc, #24]	@ (80090cc <_sbrk_r+0x1c>)
 80090b4:	2300      	movs	r3, #0
 80090b6:	4604      	mov	r4, r0
 80090b8:	4608      	mov	r0, r1
 80090ba:	602b      	str	r3, [r5, #0]
 80090bc:	f7f8 fc04 	bl	80018c8 <_sbrk>
 80090c0:	1c43      	adds	r3, r0, #1
 80090c2:	d102      	bne.n	80090ca <_sbrk_r+0x1a>
 80090c4:	682b      	ldr	r3, [r5, #0]
 80090c6:	b103      	cbz	r3, 80090ca <_sbrk_r+0x1a>
 80090c8:	6023      	str	r3, [r4, #0]
 80090ca:	bd38      	pop	{r3, r4, r5, pc}
 80090cc:	20004d10 	.word	0x20004d10

080090d0 <__errno>:
 80090d0:	4b01      	ldr	r3, [pc, #4]	@ (80090d8 <__errno+0x8>)
 80090d2:	6818      	ldr	r0, [r3, #0]
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	20000010 	.word	0x20000010

080090dc <__libc_init_array>:
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	4d0d      	ldr	r5, [pc, #52]	@ (8009114 <__libc_init_array+0x38>)
 80090e0:	4c0d      	ldr	r4, [pc, #52]	@ (8009118 <__libc_init_array+0x3c>)
 80090e2:	1b64      	subs	r4, r4, r5
 80090e4:	10a4      	asrs	r4, r4, #2
 80090e6:	2600      	movs	r6, #0
 80090e8:	42a6      	cmp	r6, r4
 80090ea:	d109      	bne.n	8009100 <__libc_init_array+0x24>
 80090ec:	4d0b      	ldr	r5, [pc, #44]	@ (800911c <__libc_init_array+0x40>)
 80090ee:	4c0c      	ldr	r4, [pc, #48]	@ (8009120 <__libc_init_array+0x44>)
 80090f0:	f000 fba8 	bl	8009844 <_init>
 80090f4:	1b64      	subs	r4, r4, r5
 80090f6:	10a4      	asrs	r4, r4, #2
 80090f8:	2600      	movs	r6, #0
 80090fa:	42a6      	cmp	r6, r4
 80090fc:	d105      	bne.n	800910a <__libc_init_array+0x2e>
 80090fe:	bd70      	pop	{r4, r5, r6, pc}
 8009100:	f855 3b04 	ldr.w	r3, [r5], #4
 8009104:	4798      	blx	r3
 8009106:	3601      	adds	r6, #1
 8009108:	e7ee      	b.n	80090e8 <__libc_init_array+0xc>
 800910a:	f855 3b04 	ldr.w	r3, [r5], #4
 800910e:	4798      	blx	r3
 8009110:	3601      	adds	r6, #1
 8009112:	e7f2      	b.n	80090fa <__libc_init_array+0x1e>
 8009114:	08009a6c 	.word	0x08009a6c
 8009118:	08009a6c 	.word	0x08009a6c
 800911c:	08009a6c 	.word	0x08009a6c
 8009120:	08009a70 	.word	0x08009a70

08009124 <__retarget_lock_acquire_recursive>:
 8009124:	4770      	bx	lr

08009126 <__retarget_lock_release_recursive>:
 8009126:	4770      	bx	lr

08009128 <memcpy>:
 8009128:	440a      	add	r2, r1
 800912a:	4291      	cmp	r1, r2
 800912c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009130:	d100      	bne.n	8009134 <memcpy+0xc>
 8009132:	4770      	bx	lr
 8009134:	b510      	push	{r4, lr}
 8009136:	f811 4b01 	ldrb.w	r4, [r1], #1
 800913a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800913e:	4291      	cmp	r1, r2
 8009140:	d1f9      	bne.n	8009136 <memcpy+0xe>
 8009142:	bd10      	pop	{r4, pc}

08009144 <_free_r>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	4605      	mov	r5, r0
 8009148:	2900      	cmp	r1, #0
 800914a:	d041      	beq.n	80091d0 <_free_r+0x8c>
 800914c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009150:	1f0c      	subs	r4, r1, #4
 8009152:	2b00      	cmp	r3, #0
 8009154:	bfb8      	it	lt
 8009156:	18e4      	addlt	r4, r4, r3
 8009158:	f7ff ff10 	bl	8008f7c <__malloc_lock>
 800915c:	4a1d      	ldr	r2, [pc, #116]	@ (80091d4 <_free_r+0x90>)
 800915e:	6813      	ldr	r3, [r2, #0]
 8009160:	b933      	cbnz	r3, 8009170 <_free_r+0x2c>
 8009162:	6063      	str	r3, [r4, #4]
 8009164:	6014      	str	r4, [r2, #0]
 8009166:	4628      	mov	r0, r5
 8009168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800916c:	f7ff bf0c 	b.w	8008f88 <__malloc_unlock>
 8009170:	42a3      	cmp	r3, r4
 8009172:	d908      	bls.n	8009186 <_free_r+0x42>
 8009174:	6820      	ldr	r0, [r4, #0]
 8009176:	1821      	adds	r1, r4, r0
 8009178:	428b      	cmp	r3, r1
 800917a:	bf01      	itttt	eq
 800917c:	6819      	ldreq	r1, [r3, #0]
 800917e:	685b      	ldreq	r3, [r3, #4]
 8009180:	1809      	addeq	r1, r1, r0
 8009182:	6021      	streq	r1, [r4, #0]
 8009184:	e7ed      	b.n	8009162 <_free_r+0x1e>
 8009186:	461a      	mov	r2, r3
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	b10b      	cbz	r3, 8009190 <_free_r+0x4c>
 800918c:	42a3      	cmp	r3, r4
 800918e:	d9fa      	bls.n	8009186 <_free_r+0x42>
 8009190:	6811      	ldr	r1, [r2, #0]
 8009192:	1850      	adds	r0, r2, r1
 8009194:	42a0      	cmp	r0, r4
 8009196:	d10b      	bne.n	80091b0 <_free_r+0x6c>
 8009198:	6820      	ldr	r0, [r4, #0]
 800919a:	4401      	add	r1, r0
 800919c:	1850      	adds	r0, r2, r1
 800919e:	4283      	cmp	r3, r0
 80091a0:	6011      	str	r1, [r2, #0]
 80091a2:	d1e0      	bne.n	8009166 <_free_r+0x22>
 80091a4:	6818      	ldr	r0, [r3, #0]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	6053      	str	r3, [r2, #4]
 80091aa:	4408      	add	r0, r1
 80091ac:	6010      	str	r0, [r2, #0]
 80091ae:	e7da      	b.n	8009166 <_free_r+0x22>
 80091b0:	d902      	bls.n	80091b8 <_free_r+0x74>
 80091b2:	230c      	movs	r3, #12
 80091b4:	602b      	str	r3, [r5, #0]
 80091b6:	e7d6      	b.n	8009166 <_free_r+0x22>
 80091b8:	6820      	ldr	r0, [r4, #0]
 80091ba:	1821      	adds	r1, r4, r0
 80091bc:	428b      	cmp	r3, r1
 80091be:	bf04      	itt	eq
 80091c0:	6819      	ldreq	r1, [r3, #0]
 80091c2:	685b      	ldreq	r3, [r3, #4]
 80091c4:	6063      	str	r3, [r4, #4]
 80091c6:	bf04      	itt	eq
 80091c8:	1809      	addeq	r1, r1, r0
 80091ca:	6021      	streq	r1, [r4, #0]
 80091cc:	6054      	str	r4, [r2, #4]
 80091ce:	e7ca      	b.n	8009166 <_free_r+0x22>
 80091d0:	bd38      	pop	{r3, r4, r5, pc}
 80091d2:	bf00      	nop
 80091d4:	20004bd4 	.word	0x20004bd4

080091d8 <__ssputs_r>:
 80091d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091dc:	688e      	ldr	r6, [r1, #8]
 80091de:	461f      	mov	r7, r3
 80091e0:	42be      	cmp	r6, r7
 80091e2:	680b      	ldr	r3, [r1, #0]
 80091e4:	4682      	mov	sl, r0
 80091e6:	460c      	mov	r4, r1
 80091e8:	4690      	mov	r8, r2
 80091ea:	d82d      	bhi.n	8009248 <__ssputs_r+0x70>
 80091ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80091f4:	d026      	beq.n	8009244 <__ssputs_r+0x6c>
 80091f6:	6965      	ldr	r5, [r4, #20]
 80091f8:	6909      	ldr	r1, [r1, #16]
 80091fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091fe:	eba3 0901 	sub.w	r9, r3, r1
 8009202:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009206:	1c7b      	adds	r3, r7, #1
 8009208:	444b      	add	r3, r9
 800920a:	106d      	asrs	r5, r5, #1
 800920c:	429d      	cmp	r5, r3
 800920e:	bf38      	it	cc
 8009210:	461d      	movcc	r5, r3
 8009212:	0553      	lsls	r3, r2, #21
 8009214:	d527      	bpl.n	8009266 <__ssputs_r+0x8e>
 8009216:	4629      	mov	r1, r5
 8009218:	f7ff fe30 	bl	8008e7c <_malloc_r>
 800921c:	4606      	mov	r6, r0
 800921e:	b360      	cbz	r0, 800927a <__ssputs_r+0xa2>
 8009220:	6921      	ldr	r1, [r4, #16]
 8009222:	464a      	mov	r2, r9
 8009224:	f7ff ff80 	bl	8009128 <memcpy>
 8009228:	89a3      	ldrh	r3, [r4, #12]
 800922a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800922e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009232:	81a3      	strh	r3, [r4, #12]
 8009234:	6126      	str	r6, [r4, #16]
 8009236:	6165      	str	r5, [r4, #20]
 8009238:	444e      	add	r6, r9
 800923a:	eba5 0509 	sub.w	r5, r5, r9
 800923e:	6026      	str	r6, [r4, #0]
 8009240:	60a5      	str	r5, [r4, #8]
 8009242:	463e      	mov	r6, r7
 8009244:	42be      	cmp	r6, r7
 8009246:	d900      	bls.n	800924a <__ssputs_r+0x72>
 8009248:	463e      	mov	r6, r7
 800924a:	6820      	ldr	r0, [r4, #0]
 800924c:	4632      	mov	r2, r6
 800924e:	4641      	mov	r1, r8
 8009250:	f000 faa8 	bl	80097a4 <memmove>
 8009254:	68a3      	ldr	r3, [r4, #8]
 8009256:	1b9b      	subs	r3, r3, r6
 8009258:	60a3      	str	r3, [r4, #8]
 800925a:	6823      	ldr	r3, [r4, #0]
 800925c:	4433      	add	r3, r6
 800925e:	6023      	str	r3, [r4, #0]
 8009260:	2000      	movs	r0, #0
 8009262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009266:	462a      	mov	r2, r5
 8009268:	f000 fab6 	bl	80097d8 <_realloc_r>
 800926c:	4606      	mov	r6, r0
 800926e:	2800      	cmp	r0, #0
 8009270:	d1e0      	bne.n	8009234 <__ssputs_r+0x5c>
 8009272:	6921      	ldr	r1, [r4, #16]
 8009274:	4650      	mov	r0, sl
 8009276:	f7ff ff65 	bl	8009144 <_free_r>
 800927a:	230c      	movs	r3, #12
 800927c:	f8ca 3000 	str.w	r3, [sl]
 8009280:	89a3      	ldrh	r3, [r4, #12]
 8009282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009286:	81a3      	strh	r3, [r4, #12]
 8009288:	f04f 30ff 	mov.w	r0, #4294967295
 800928c:	e7e9      	b.n	8009262 <__ssputs_r+0x8a>
	...

08009290 <_svfiprintf_r>:
 8009290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009294:	4698      	mov	r8, r3
 8009296:	898b      	ldrh	r3, [r1, #12]
 8009298:	061b      	lsls	r3, r3, #24
 800929a:	b09d      	sub	sp, #116	@ 0x74
 800929c:	4607      	mov	r7, r0
 800929e:	460d      	mov	r5, r1
 80092a0:	4614      	mov	r4, r2
 80092a2:	d510      	bpl.n	80092c6 <_svfiprintf_r+0x36>
 80092a4:	690b      	ldr	r3, [r1, #16]
 80092a6:	b973      	cbnz	r3, 80092c6 <_svfiprintf_r+0x36>
 80092a8:	2140      	movs	r1, #64	@ 0x40
 80092aa:	f7ff fde7 	bl	8008e7c <_malloc_r>
 80092ae:	6028      	str	r0, [r5, #0]
 80092b0:	6128      	str	r0, [r5, #16]
 80092b2:	b930      	cbnz	r0, 80092c2 <_svfiprintf_r+0x32>
 80092b4:	230c      	movs	r3, #12
 80092b6:	603b      	str	r3, [r7, #0]
 80092b8:	f04f 30ff 	mov.w	r0, #4294967295
 80092bc:	b01d      	add	sp, #116	@ 0x74
 80092be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c2:	2340      	movs	r3, #64	@ 0x40
 80092c4:	616b      	str	r3, [r5, #20]
 80092c6:	2300      	movs	r3, #0
 80092c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80092ca:	2320      	movs	r3, #32
 80092cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80092d4:	2330      	movs	r3, #48	@ 0x30
 80092d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009474 <_svfiprintf_r+0x1e4>
 80092da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092de:	f04f 0901 	mov.w	r9, #1
 80092e2:	4623      	mov	r3, r4
 80092e4:	469a      	mov	sl, r3
 80092e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092ea:	b10a      	cbz	r2, 80092f0 <_svfiprintf_r+0x60>
 80092ec:	2a25      	cmp	r2, #37	@ 0x25
 80092ee:	d1f9      	bne.n	80092e4 <_svfiprintf_r+0x54>
 80092f0:	ebba 0b04 	subs.w	fp, sl, r4
 80092f4:	d00b      	beq.n	800930e <_svfiprintf_r+0x7e>
 80092f6:	465b      	mov	r3, fp
 80092f8:	4622      	mov	r2, r4
 80092fa:	4629      	mov	r1, r5
 80092fc:	4638      	mov	r0, r7
 80092fe:	f7ff ff6b 	bl	80091d8 <__ssputs_r>
 8009302:	3001      	adds	r0, #1
 8009304:	f000 80a7 	beq.w	8009456 <_svfiprintf_r+0x1c6>
 8009308:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800930a:	445a      	add	r2, fp
 800930c:	9209      	str	r2, [sp, #36]	@ 0x24
 800930e:	f89a 3000 	ldrb.w	r3, [sl]
 8009312:	2b00      	cmp	r3, #0
 8009314:	f000 809f 	beq.w	8009456 <_svfiprintf_r+0x1c6>
 8009318:	2300      	movs	r3, #0
 800931a:	f04f 32ff 	mov.w	r2, #4294967295
 800931e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009322:	f10a 0a01 	add.w	sl, sl, #1
 8009326:	9304      	str	r3, [sp, #16]
 8009328:	9307      	str	r3, [sp, #28]
 800932a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800932e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009330:	4654      	mov	r4, sl
 8009332:	2205      	movs	r2, #5
 8009334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009338:	484e      	ldr	r0, [pc, #312]	@ (8009474 <_svfiprintf_r+0x1e4>)
 800933a:	f7f6 ff71 	bl	8000220 <memchr>
 800933e:	9a04      	ldr	r2, [sp, #16]
 8009340:	b9d8      	cbnz	r0, 800937a <_svfiprintf_r+0xea>
 8009342:	06d0      	lsls	r0, r2, #27
 8009344:	bf44      	itt	mi
 8009346:	2320      	movmi	r3, #32
 8009348:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800934c:	0711      	lsls	r1, r2, #28
 800934e:	bf44      	itt	mi
 8009350:	232b      	movmi	r3, #43	@ 0x2b
 8009352:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009356:	f89a 3000 	ldrb.w	r3, [sl]
 800935a:	2b2a      	cmp	r3, #42	@ 0x2a
 800935c:	d015      	beq.n	800938a <_svfiprintf_r+0xfa>
 800935e:	9a07      	ldr	r2, [sp, #28]
 8009360:	4654      	mov	r4, sl
 8009362:	2000      	movs	r0, #0
 8009364:	f04f 0c0a 	mov.w	ip, #10
 8009368:	4621      	mov	r1, r4
 800936a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800936e:	3b30      	subs	r3, #48	@ 0x30
 8009370:	2b09      	cmp	r3, #9
 8009372:	d94b      	bls.n	800940c <_svfiprintf_r+0x17c>
 8009374:	b1b0      	cbz	r0, 80093a4 <_svfiprintf_r+0x114>
 8009376:	9207      	str	r2, [sp, #28]
 8009378:	e014      	b.n	80093a4 <_svfiprintf_r+0x114>
 800937a:	eba0 0308 	sub.w	r3, r0, r8
 800937e:	fa09 f303 	lsl.w	r3, r9, r3
 8009382:	4313      	orrs	r3, r2
 8009384:	9304      	str	r3, [sp, #16]
 8009386:	46a2      	mov	sl, r4
 8009388:	e7d2      	b.n	8009330 <_svfiprintf_r+0xa0>
 800938a:	9b03      	ldr	r3, [sp, #12]
 800938c:	1d19      	adds	r1, r3, #4
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	9103      	str	r1, [sp, #12]
 8009392:	2b00      	cmp	r3, #0
 8009394:	bfbb      	ittet	lt
 8009396:	425b      	neglt	r3, r3
 8009398:	f042 0202 	orrlt.w	r2, r2, #2
 800939c:	9307      	strge	r3, [sp, #28]
 800939e:	9307      	strlt	r3, [sp, #28]
 80093a0:	bfb8      	it	lt
 80093a2:	9204      	strlt	r2, [sp, #16]
 80093a4:	7823      	ldrb	r3, [r4, #0]
 80093a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80093a8:	d10a      	bne.n	80093c0 <_svfiprintf_r+0x130>
 80093aa:	7863      	ldrb	r3, [r4, #1]
 80093ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80093ae:	d132      	bne.n	8009416 <_svfiprintf_r+0x186>
 80093b0:	9b03      	ldr	r3, [sp, #12]
 80093b2:	1d1a      	adds	r2, r3, #4
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	9203      	str	r2, [sp, #12]
 80093b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093bc:	3402      	adds	r4, #2
 80093be:	9305      	str	r3, [sp, #20]
 80093c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009484 <_svfiprintf_r+0x1f4>
 80093c4:	7821      	ldrb	r1, [r4, #0]
 80093c6:	2203      	movs	r2, #3
 80093c8:	4650      	mov	r0, sl
 80093ca:	f7f6 ff29 	bl	8000220 <memchr>
 80093ce:	b138      	cbz	r0, 80093e0 <_svfiprintf_r+0x150>
 80093d0:	9b04      	ldr	r3, [sp, #16]
 80093d2:	eba0 000a 	sub.w	r0, r0, sl
 80093d6:	2240      	movs	r2, #64	@ 0x40
 80093d8:	4082      	lsls	r2, r0
 80093da:	4313      	orrs	r3, r2
 80093dc:	3401      	adds	r4, #1
 80093de:	9304      	str	r3, [sp, #16]
 80093e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093e4:	4824      	ldr	r0, [pc, #144]	@ (8009478 <_svfiprintf_r+0x1e8>)
 80093e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093ea:	2206      	movs	r2, #6
 80093ec:	f7f6 ff18 	bl	8000220 <memchr>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d036      	beq.n	8009462 <_svfiprintf_r+0x1d2>
 80093f4:	4b21      	ldr	r3, [pc, #132]	@ (800947c <_svfiprintf_r+0x1ec>)
 80093f6:	bb1b      	cbnz	r3, 8009440 <_svfiprintf_r+0x1b0>
 80093f8:	9b03      	ldr	r3, [sp, #12]
 80093fa:	3307      	adds	r3, #7
 80093fc:	f023 0307 	bic.w	r3, r3, #7
 8009400:	3308      	adds	r3, #8
 8009402:	9303      	str	r3, [sp, #12]
 8009404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009406:	4433      	add	r3, r6
 8009408:	9309      	str	r3, [sp, #36]	@ 0x24
 800940a:	e76a      	b.n	80092e2 <_svfiprintf_r+0x52>
 800940c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009410:	460c      	mov	r4, r1
 8009412:	2001      	movs	r0, #1
 8009414:	e7a8      	b.n	8009368 <_svfiprintf_r+0xd8>
 8009416:	2300      	movs	r3, #0
 8009418:	3401      	adds	r4, #1
 800941a:	9305      	str	r3, [sp, #20]
 800941c:	4619      	mov	r1, r3
 800941e:	f04f 0c0a 	mov.w	ip, #10
 8009422:	4620      	mov	r0, r4
 8009424:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009428:	3a30      	subs	r2, #48	@ 0x30
 800942a:	2a09      	cmp	r2, #9
 800942c:	d903      	bls.n	8009436 <_svfiprintf_r+0x1a6>
 800942e:	2b00      	cmp	r3, #0
 8009430:	d0c6      	beq.n	80093c0 <_svfiprintf_r+0x130>
 8009432:	9105      	str	r1, [sp, #20]
 8009434:	e7c4      	b.n	80093c0 <_svfiprintf_r+0x130>
 8009436:	fb0c 2101 	mla	r1, ip, r1, r2
 800943a:	4604      	mov	r4, r0
 800943c:	2301      	movs	r3, #1
 800943e:	e7f0      	b.n	8009422 <_svfiprintf_r+0x192>
 8009440:	ab03      	add	r3, sp, #12
 8009442:	9300      	str	r3, [sp, #0]
 8009444:	462a      	mov	r2, r5
 8009446:	4b0e      	ldr	r3, [pc, #56]	@ (8009480 <_svfiprintf_r+0x1f0>)
 8009448:	a904      	add	r1, sp, #16
 800944a:	4638      	mov	r0, r7
 800944c:	f3af 8000 	nop.w
 8009450:	1c42      	adds	r2, r0, #1
 8009452:	4606      	mov	r6, r0
 8009454:	d1d6      	bne.n	8009404 <_svfiprintf_r+0x174>
 8009456:	89ab      	ldrh	r3, [r5, #12]
 8009458:	065b      	lsls	r3, r3, #25
 800945a:	f53f af2d 	bmi.w	80092b8 <_svfiprintf_r+0x28>
 800945e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009460:	e72c      	b.n	80092bc <_svfiprintf_r+0x2c>
 8009462:	ab03      	add	r3, sp, #12
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	462a      	mov	r2, r5
 8009468:	4b05      	ldr	r3, [pc, #20]	@ (8009480 <_svfiprintf_r+0x1f0>)
 800946a:	a904      	add	r1, sp, #16
 800946c:	4638      	mov	r0, r7
 800946e:	f000 f879 	bl	8009564 <_printf_i>
 8009472:	e7ed      	b.n	8009450 <_svfiprintf_r+0x1c0>
 8009474:	08009a30 	.word	0x08009a30
 8009478:	08009a3a 	.word	0x08009a3a
 800947c:	00000000 	.word	0x00000000
 8009480:	080091d9 	.word	0x080091d9
 8009484:	08009a36 	.word	0x08009a36

08009488 <_printf_common>:
 8009488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800948c:	4616      	mov	r6, r2
 800948e:	4698      	mov	r8, r3
 8009490:	688a      	ldr	r2, [r1, #8]
 8009492:	690b      	ldr	r3, [r1, #16]
 8009494:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009498:	4293      	cmp	r3, r2
 800949a:	bfb8      	it	lt
 800949c:	4613      	movlt	r3, r2
 800949e:	6033      	str	r3, [r6, #0]
 80094a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80094a4:	4607      	mov	r7, r0
 80094a6:	460c      	mov	r4, r1
 80094a8:	b10a      	cbz	r2, 80094ae <_printf_common+0x26>
 80094aa:	3301      	adds	r3, #1
 80094ac:	6033      	str	r3, [r6, #0]
 80094ae:	6823      	ldr	r3, [r4, #0]
 80094b0:	0699      	lsls	r1, r3, #26
 80094b2:	bf42      	ittt	mi
 80094b4:	6833      	ldrmi	r3, [r6, #0]
 80094b6:	3302      	addmi	r3, #2
 80094b8:	6033      	strmi	r3, [r6, #0]
 80094ba:	6825      	ldr	r5, [r4, #0]
 80094bc:	f015 0506 	ands.w	r5, r5, #6
 80094c0:	d106      	bne.n	80094d0 <_printf_common+0x48>
 80094c2:	f104 0a19 	add.w	sl, r4, #25
 80094c6:	68e3      	ldr	r3, [r4, #12]
 80094c8:	6832      	ldr	r2, [r6, #0]
 80094ca:	1a9b      	subs	r3, r3, r2
 80094cc:	42ab      	cmp	r3, r5
 80094ce:	dc26      	bgt.n	800951e <_printf_common+0x96>
 80094d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80094d4:	6822      	ldr	r2, [r4, #0]
 80094d6:	3b00      	subs	r3, #0
 80094d8:	bf18      	it	ne
 80094da:	2301      	movne	r3, #1
 80094dc:	0692      	lsls	r2, r2, #26
 80094de:	d42b      	bmi.n	8009538 <_printf_common+0xb0>
 80094e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80094e4:	4641      	mov	r1, r8
 80094e6:	4638      	mov	r0, r7
 80094e8:	47c8      	blx	r9
 80094ea:	3001      	adds	r0, #1
 80094ec:	d01e      	beq.n	800952c <_printf_common+0xa4>
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	6922      	ldr	r2, [r4, #16]
 80094f2:	f003 0306 	and.w	r3, r3, #6
 80094f6:	2b04      	cmp	r3, #4
 80094f8:	bf02      	ittt	eq
 80094fa:	68e5      	ldreq	r5, [r4, #12]
 80094fc:	6833      	ldreq	r3, [r6, #0]
 80094fe:	1aed      	subeq	r5, r5, r3
 8009500:	68a3      	ldr	r3, [r4, #8]
 8009502:	bf0c      	ite	eq
 8009504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009508:	2500      	movne	r5, #0
 800950a:	4293      	cmp	r3, r2
 800950c:	bfc4      	itt	gt
 800950e:	1a9b      	subgt	r3, r3, r2
 8009510:	18ed      	addgt	r5, r5, r3
 8009512:	2600      	movs	r6, #0
 8009514:	341a      	adds	r4, #26
 8009516:	42b5      	cmp	r5, r6
 8009518:	d11a      	bne.n	8009550 <_printf_common+0xc8>
 800951a:	2000      	movs	r0, #0
 800951c:	e008      	b.n	8009530 <_printf_common+0xa8>
 800951e:	2301      	movs	r3, #1
 8009520:	4652      	mov	r2, sl
 8009522:	4641      	mov	r1, r8
 8009524:	4638      	mov	r0, r7
 8009526:	47c8      	blx	r9
 8009528:	3001      	adds	r0, #1
 800952a:	d103      	bne.n	8009534 <_printf_common+0xac>
 800952c:	f04f 30ff 	mov.w	r0, #4294967295
 8009530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009534:	3501      	adds	r5, #1
 8009536:	e7c6      	b.n	80094c6 <_printf_common+0x3e>
 8009538:	18e1      	adds	r1, r4, r3
 800953a:	1c5a      	adds	r2, r3, #1
 800953c:	2030      	movs	r0, #48	@ 0x30
 800953e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009542:	4422      	add	r2, r4
 8009544:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009548:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800954c:	3302      	adds	r3, #2
 800954e:	e7c7      	b.n	80094e0 <_printf_common+0x58>
 8009550:	2301      	movs	r3, #1
 8009552:	4622      	mov	r2, r4
 8009554:	4641      	mov	r1, r8
 8009556:	4638      	mov	r0, r7
 8009558:	47c8      	blx	r9
 800955a:	3001      	adds	r0, #1
 800955c:	d0e6      	beq.n	800952c <_printf_common+0xa4>
 800955e:	3601      	adds	r6, #1
 8009560:	e7d9      	b.n	8009516 <_printf_common+0x8e>
	...

08009564 <_printf_i>:
 8009564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009568:	7e0f      	ldrb	r7, [r1, #24]
 800956a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800956c:	2f78      	cmp	r7, #120	@ 0x78
 800956e:	4691      	mov	r9, r2
 8009570:	4680      	mov	r8, r0
 8009572:	460c      	mov	r4, r1
 8009574:	469a      	mov	sl, r3
 8009576:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800957a:	d807      	bhi.n	800958c <_printf_i+0x28>
 800957c:	2f62      	cmp	r7, #98	@ 0x62
 800957e:	d80a      	bhi.n	8009596 <_printf_i+0x32>
 8009580:	2f00      	cmp	r7, #0
 8009582:	f000 80d2 	beq.w	800972a <_printf_i+0x1c6>
 8009586:	2f58      	cmp	r7, #88	@ 0x58
 8009588:	f000 80b9 	beq.w	80096fe <_printf_i+0x19a>
 800958c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009590:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009594:	e03a      	b.n	800960c <_printf_i+0xa8>
 8009596:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800959a:	2b15      	cmp	r3, #21
 800959c:	d8f6      	bhi.n	800958c <_printf_i+0x28>
 800959e:	a101      	add	r1, pc, #4	@ (adr r1, 80095a4 <_printf_i+0x40>)
 80095a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095a4:	080095fd 	.word	0x080095fd
 80095a8:	08009611 	.word	0x08009611
 80095ac:	0800958d 	.word	0x0800958d
 80095b0:	0800958d 	.word	0x0800958d
 80095b4:	0800958d 	.word	0x0800958d
 80095b8:	0800958d 	.word	0x0800958d
 80095bc:	08009611 	.word	0x08009611
 80095c0:	0800958d 	.word	0x0800958d
 80095c4:	0800958d 	.word	0x0800958d
 80095c8:	0800958d 	.word	0x0800958d
 80095cc:	0800958d 	.word	0x0800958d
 80095d0:	08009711 	.word	0x08009711
 80095d4:	0800963b 	.word	0x0800963b
 80095d8:	080096cb 	.word	0x080096cb
 80095dc:	0800958d 	.word	0x0800958d
 80095e0:	0800958d 	.word	0x0800958d
 80095e4:	08009733 	.word	0x08009733
 80095e8:	0800958d 	.word	0x0800958d
 80095ec:	0800963b 	.word	0x0800963b
 80095f0:	0800958d 	.word	0x0800958d
 80095f4:	0800958d 	.word	0x0800958d
 80095f8:	080096d3 	.word	0x080096d3
 80095fc:	6833      	ldr	r3, [r6, #0]
 80095fe:	1d1a      	adds	r2, r3, #4
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	6032      	str	r2, [r6, #0]
 8009604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009608:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800960c:	2301      	movs	r3, #1
 800960e:	e09d      	b.n	800974c <_printf_i+0x1e8>
 8009610:	6833      	ldr	r3, [r6, #0]
 8009612:	6820      	ldr	r0, [r4, #0]
 8009614:	1d19      	adds	r1, r3, #4
 8009616:	6031      	str	r1, [r6, #0]
 8009618:	0606      	lsls	r6, r0, #24
 800961a:	d501      	bpl.n	8009620 <_printf_i+0xbc>
 800961c:	681d      	ldr	r5, [r3, #0]
 800961e:	e003      	b.n	8009628 <_printf_i+0xc4>
 8009620:	0645      	lsls	r5, r0, #25
 8009622:	d5fb      	bpl.n	800961c <_printf_i+0xb8>
 8009624:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009628:	2d00      	cmp	r5, #0
 800962a:	da03      	bge.n	8009634 <_printf_i+0xd0>
 800962c:	232d      	movs	r3, #45	@ 0x2d
 800962e:	426d      	negs	r5, r5
 8009630:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009634:	4859      	ldr	r0, [pc, #356]	@ (800979c <_printf_i+0x238>)
 8009636:	230a      	movs	r3, #10
 8009638:	e011      	b.n	800965e <_printf_i+0xfa>
 800963a:	6821      	ldr	r1, [r4, #0]
 800963c:	6833      	ldr	r3, [r6, #0]
 800963e:	0608      	lsls	r0, r1, #24
 8009640:	f853 5b04 	ldr.w	r5, [r3], #4
 8009644:	d402      	bmi.n	800964c <_printf_i+0xe8>
 8009646:	0649      	lsls	r1, r1, #25
 8009648:	bf48      	it	mi
 800964a:	b2ad      	uxthmi	r5, r5
 800964c:	2f6f      	cmp	r7, #111	@ 0x6f
 800964e:	4853      	ldr	r0, [pc, #332]	@ (800979c <_printf_i+0x238>)
 8009650:	6033      	str	r3, [r6, #0]
 8009652:	bf14      	ite	ne
 8009654:	230a      	movne	r3, #10
 8009656:	2308      	moveq	r3, #8
 8009658:	2100      	movs	r1, #0
 800965a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800965e:	6866      	ldr	r6, [r4, #4]
 8009660:	60a6      	str	r6, [r4, #8]
 8009662:	2e00      	cmp	r6, #0
 8009664:	bfa2      	ittt	ge
 8009666:	6821      	ldrge	r1, [r4, #0]
 8009668:	f021 0104 	bicge.w	r1, r1, #4
 800966c:	6021      	strge	r1, [r4, #0]
 800966e:	b90d      	cbnz	r5, 8009674 <_printf_i+0x110>
 8009670:	2e00      	cmp	r6, #0
 8009672:	d04b      	beq.n	800970c <_printf_i+0x1a8>
 8009674:	4616      	mov	r6, r2
 8009676:	fbb5 f1f3 	udiv	r1, r5, r3
 800967a:	fb03 5711 	mls	r7, r3, r1, r5
 800967e:	5dc7      	ldrb	r7, [r0, r7]
 8009680:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009684:	462f      	mov	r7, r5
 8009686:	42bb      	cmp	r3, r7
 8009688:	460d      	mov	r5, r1
 800968a:	d9f4      	bls.n	8009676 <_printf_i+0x112>
 800968c:	2b08      	cmp	r3, #8
 800968e:	d10b      	bne.n	80096a8 <_printf_i+0x144>
 8009690:	6823      	ldr	r3, [r4, #0]
 8009692:	07df      	lsls	r7, r3, #31
 8009694:	d508      	bpl.n	80096a8 <_printf_i+0x144>
 8009696:	6923      	ldr	r3, [r4, #16]
 8009698:	6861      	ldr	r1, [r4, #4]
 800969a:	4299      	cmp	r1, r3
 800969c:	bfde      	ittt	le
 800969e:	2330      	movle	r3, #48	@ 0x30
 80096a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096a8:	1b92      	subs	r2, r2, r6
 80096aa:	6122      	str	r2, [r4, #16]
 80096ac:	f8cd a000 	str.w	sl, [sp]
 80096b0:	464b      	mov	r3, r9
 80096b2:	aa03      	add	r2, sp, #12
 80096b4:	4621      	mov	r1, r4
 80096b6:	4640      	mov	r0, r8
 80096b8:	f7ff fee6 	bl	8009488 <_printf_common>
 80096bc:	3001      	adds	r0, #1
 80096be:	d14a      	bne.n	8009756 <_printf_i+0x1f2>
 80096c0:	f04f 30ff 	mov.w	r0, #4294967295
 80096c4:	b004      	add	sp, #16
 80096c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ca:	6823      	ldr	r3, [r4, #0]
 80096cc:	f043 0320 	orr.w	r3, r3, #32
 80096d0:	6023      	str	r3, [r4, #0]
 80096d2:	4833      	ldr	r0, [pc, #204]	@ (80097a0 <_printf_i+0x23c>)
 80096d4:	2778      	movs	r7, #120	@ 0x78
 80096d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	6831      	ldr	r1, [r6, #0]
 80096de:	061f      	lsls	r7, r3, #24
 80096e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80096e4:	d402      	bmi.n	80096ec <_printf_i+0x188>
 80096e6:	065f      	lsls	r7, r3, #25
 80096e8:	bf48      	it	mi
 80096ea:	b2ad      	uxthmi	r5, r5
 80096ec:	6031      	str	r1, [r6, #0]
 80096ee:	07d9      	lsls	r1, r3, #31
 80096f0:	bf44      	itt	mi
 80096f2:	f043 0320 	orrmi.w	r3, r3, #32
 80096f6:	6023      	strmi	r3, [r4, #0]
 80096f8:	b11d      	cbz	r5, 8009702 <_printf_i+0x19e>
 80096fa:	2310      	movs	r3, #16
 80096fc:	e7ac      	b.n	8009658 <_printf_i+0xf4>
 80096fe:	4827      	ldr	r0, [pc, #156]	@ (800979c <_printf_i+0x238>)
 8009700:	e7e9      	b.n	80096d6 <_printf_i+0x172>
 8009702:	6823      	ldr	r3, [r4, #0]
 8009704:	f023 0320 	bic.w	r3, r3, #32
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	e7f6      	b.n	80096fa <_printf_i+0x196>
 800970c:	4616      	mov	r6, r2
 800970e:	e7bd      	b.n	800968c <_printf_i+0x128>
 8009710:	6833      	ldr	r3, [r6, #0]
 8009712:	6825      	ldr	r5, [r4, #0]
 8009714:	6961      	ldr	r1, [r4, #20]
 8009716:	1d18      	adds	r0, r3, #4
 8009718:	6030      	str	r0, [r6, #0]
 800971a:	062e      	lsls	r6, r5, #24
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	d501      	bpl.n	8009724 <_printf_i+0x1c0>
 8009720:	6019      	str	r1, [r3, #0]
 8009722:	e002      	b.n	800972a <_printf_i+0x1c6>
 8009724:	0668      	lsls	r0, r5, #25
 8009726:	d5fb      	bpl.n	8009720 <_printf_i+0x1bc>
 8009728:	8019      	strh	r1, [r3, #0]
 800972a:	2300      	movs	r3, #0
 800972c:	6123      	str	r3, [r4, #16]
 800972e:	4616      	mov	r6, r2
 8009730:	e7bc      	b.n	80096ac <_printf_i+0x148>
 8009732:	6833      	ldr	r3, [r6, #0]
 8009734:	1d1a      	adds	r2, r3, #4
 8009736:	6032      	str	r2, [r6, #0]
 8009738:	681e      	ldr	r6, [r3, #0]
 800973a:	6862      	ldr	r2, [r4, #4]
 800973c:	2100      	movs	r1, #0
 800973e:	4630      	mov	r0, r6
 8009740:	f7f6 fd6e 	bl	8000220 <memchr>
 8009744:	b108      	cbz	r0, 800974a <_printf_i+0x1e6>
 8009746:	1b80      	subs	r0, r0, r6
 8009748:	6060      	str	r0, [r4, #4]
 800974a:	6863      	ldr	r3, [r4, #4]
 800974c:	6123      	str	r3, [r4, #16]
 800974e:	2300      	movs	r3, #0
 8009750:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009754:	e7aa      	b.n	80096ac <_printf_i+0x148>
 8009756:	6923      	ldr	r3, [r4, #16]
 8009758:	4632      	mov	r2, r6
 800975a:	4649      	mov	r1, r9
 800975c:	4640      	mov	r0, r8
 800975e:	47d0      	blx	sl
 8009760:	3001      	adds	r0, #1
 8009762:	d0ad      	beq.n	80096c0 <_printf_i+0x15c>
 8009764:	6823      	ldr	r3, [r4, #0]
 8009766:	079b      	lsls	r3, r3, #30
 8009768:	d413      	bmi.n	8009792 <_printf_i+0x22e>
 800976a:	68e0      	ldr	r0, [r4, #12]
 800976c:	9b03      	ldr	r3, [sp, #12]
 800976e:	4298      	cmp	r0, r3
 8009770:	bfb8      	it	lt
 8009772:	4618      	movlt	r0, r3
 8009774:	e7a6      	b.n	80096c4 <_printf_i+0x160>
 8009776:	2301      	movs	r3, #1
 8009778:	4632      	mov	r2, r6
 800977a:	4649      	mov	r1, r9
 800977c:	4640      	mov	r0, r8
 800977e:	47d0      	blx	sl
 8009780:	3001      	adds	r0, #1
 8009782:	d09d      	beq.n	80096c0 <_printf_i+0x15c>
 8009784:	3501      	adds	r5, #1
 8009786:	68e3      	ldr	r3, [r4, #12]
 8009788:	9903      	ldr	r1, [sp, #12]
 800978a:	1a5b      	subs	r3, r3, r1
 800978c:	42ab      	cmp	r3, r5
 800978e:	dcf2      	bgt.n	8009776 <_printf_i+0x212>
 8009790:	e7eb      	b.n	800976a <_printf_i+0x206>
 8009792:	2500      	movs	r5, #0
 8009794:	f104 0619 	add.w	r6, r4, #25
 8009798:	e7f5      	b.n	8009786 <_printf_i+0x222>
 800979a:	bf00      	nop
 800979c:	08009a41 	.word	0x08009a41
 80097a0:	08009a52 	.word	0x08009a52

080097a4 <memmove>:
 80097a4:	4288      	cmp	r0, r1
 80097a6:	b510      	push	{r4, lr}
 80097a8:	eb01 0402 	add.w	r4, r1, r2
 80097ac:	d902      	bls.n	80097b4 <memmove+0x10>
 80097ae:	4284      	cmp	r4, r0
 80097b0:	4623      	mov	r3, r4
 80097b2:	d807      	bhi.n	80097c4 <memmove+0x20>
 80097b4:	1e43      	subs	r3, r0, #1
 80097b6:	42a1      	cmp	r1, r4
 80097b8:	d008      	beq.n	80097cc <memmove+0x28>
 80097ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097c2:	e7f8      	b.n	80097b6 <memmove+0x12>
 80097c4:	4402      	add	r2, r0
 80097c6:	4601      	mov	r1, r0
 80097c8:	428a      	cmp	r2, r1
 80097ca:	d100      	bne.n	80097ce <memmove+0x2a>
 80097cc:	bd10      	pop	{r4, pc}
 80097ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097d6:	e7f7      	b.n	80097c8 <memmove+0x24>

080097d8 <_realloc_r>:
 80097d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097dc:	4680      	mov	r8, r0
 80097de:	4615      	mov	r5, r2
 80097e0:	460c      	mov	r4, r1
 80097e2:	b921      	cbnz	r1, 80097ee <_realloc_r+0x16>
 80097e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097e8:	4611      	mov	r1, r2
 80097ea:	f7ff bb47 	b.w	8008e7c <_malloc_r>
 80097ee:	b92a      	cbnz	r2, 80097fc <_realloc_r+0x24>
 80097f0:	f7ff fca8 	bl	8009144 <_free_r>
 80097f4:	2400      	movs	r4, #0
 80097f6:	4620      	mov	r0, r4
 80097f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097fc:	f000 f81a 	bl	8009834 <_malloc_usable_size_r>
 8009800:	4285      	cmp	r5, r0
 8009802:	4606      	mov	r6, r0
 8009804:	d802      	bhi.n	800980c <_realloc_r+0x34>
 8009806:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800980a:	d8f4      	bhi.n	80097f6 <_realloc_r+0x1e>
 800980c:	4629      	mov	r1, r5
 800980e:	4640      	mov	r0, r8
 8009810:	f7ff fb34 	bl	8008e7c <_malloc_r>
 8009814:	4607      	mov	r7, r0
 8009816:	2800      	cmp	r0, #0
 8009818:	d0ec      	beq.n	80097f4 <_realloc_r+0x1c>
 800981a:	42b5      	cmp	r5, r6
 800981c:	462a      	mov	r2, r5
 800981e:	4621      	mov	r1, r4
 8009820:	bf28      	it	cs
 8009822:	4632      	movcs	r2, r6
 8009824:	f7ff fc80 	bl	8009128 <memcpy>
 8009828:	4621      	mov	r1, r4
 800982a:	4640      	mov	r0, r8
 800982c:	f7ff fc8a 	bl	8009144 <_free_r>
 8009830:	463c      	mov	r4, r7
 8009832:	e7e0      	b.n	80097f6 <_realloc_r+0x1e>

08009834 <_malloc_usable_size_r>:
 8009834:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009838:	1f18      	subs	r0, r3, #4
 800983a:	2b00      	cmp	r3, #0
 800983c:	bfbc      	itt	lt
 800983e:	580b      	ldrlt	r3, [r1, r0]
 8009840:	18c0      	addlt	r0, r0, r3
 8009842:	4770      	bx	lr

08009844 <_init>:
 8009844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009846:	bf00      	nop
 8009848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800984a:	bc08      	pop	{r3}
 800984c:	469e      	mov	lr, r3
 800984e:	4770      	bx	lr

08009850 <_fini>:
 8009850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009852:	bf00      	nop
 8009854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009856:	bc08      	pop	{r3}
 8009858:	469e      	mov	lr, r3
 800985a:	4770      	bx	lr
