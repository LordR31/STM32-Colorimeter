
Proiect_SDTR_Colorimetru_HC-05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2f8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  0800c4c8  0800c4c8  0000d4c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9c0  0800c9c0  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9c0  0800c9c0  0000d9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9c8  0800c9c8  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9c8  0800c9c8  0000d9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c9cc  0800c9cc  0000d9cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800c9d0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cbc  200001d8  0800cba8  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e94  0800cba8  0000ee94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d3e9  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d69  00000000  00000000  0002b5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001908  00000000  00000000  0002f360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001399  00000000  00000000  00030c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000050aa  00000000  00000000  00032001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d879  00000000  00000000  000370ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0a5c  00000000  00000000  00054924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00135380  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007be4  00000000  00000000  001353c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0013cfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c4b0 	.word	0x0800c4b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800c4b0 	.word	0x0800c4b0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <tcs34725_i2c_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// TCS34725 Colour Sensor

void tcs34725_i2c_write(uint8_t reg, uint32_t value) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[2];
    buffer[0] = COMMAND_BIT | reg;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	733b      	strb	r3, [r7, #12]
    buffer[1] = value & 0xFF;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, (ADDRESS << 1), buffer, 2, HAL_MAX_DELAY);
 8000ef4:	f107 020c 	add.w	r2, r7, #12
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	2302      	movs	r3, #2
 8000f00:	2152      	movs	r1, #82	@ 0x52
 8000f02:	4803      	ldr	r0, [pc, #12]	@ (8000f10 <tcs34725_i2c_write+0x38>)
 8000f04:	f002 f9a0 	bl	8003248 <HAL_I2C_Master_Transmit>
}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200001f4 	.word	0x200001f4

08000f14 <tcs34725_i2c_read8>:

// Read a single register
uint8_t tcs34725_i2c_read8(uint8_t reg) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af02      	add	r7, sp, #8
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[2];

	buffer[0] = (COMMAND_BIT | reg);
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(&hi2c1, (ADDRESS << 1), buffer, 1, HAL_MAX_DELAY);
 8000f28:	f107 020c 	add.w	r2, r7, #12
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2301      	movs	r3, #1
 8000f34:	2152      	movs	r1, #82	@ 0x52
 8000f36:	4809      	ldr	r0, [pc, #36]	@ (8000f5c <tcs34725_i2c_read8+0x48>)
 8000f38:	f002 f986 	bl	8003248 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (ADDRESS << 1), buffer, 1, HAL_MAX_DELAY);
 8000f3c:	f107 020c 	add.w	r2, r7, #12
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2301      	movs	r3, #1
 8000f48:	2152      	movs	r1, #82	@ 0x52
 8000f4a:	4804      	ldr	r0, [pc, #16]	@ (8000f5c <tcs34725_i2c_read8+0x48>)
 8000f4c:	f002 fa7a 	bl	8003444 <HAL_I2C_Master_Receive>

	return buffer[0];
 8000f50:	7b3b      	ldrb	r3, [r7, #12]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200001f4 	.word	0x200001f4

08000f60 <tcs34725_i2c_read16>:

uint16_t tcs34725_i2c_read16(uint8_t reg) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
	uint16_t time_delay = 1;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	82fb      	strh	r3, [r7, #22]
    uint16_t value;
    uint8_t reg_value[2];
    uint8_t cmd[2];
    cmd[0] = COMMAND_BIT | reg;
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	733b      	strb	r3, [r7, #12]

    HAL_I2C_Master_Transmit(&hi2c1, (ADDRESS << 1), cmd, 1, time_delay);
 8000f78:	8afb      	ldrh	r3, [r7, #22]
 8000f7a:	f107 020c 	add.w	r2, r7, #12
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2301      	movs	r3, #1
 8000f82:	2152      	movs	r1, #82	@ 0x52
 8000f84:	480d      	ldr	r0, [pc, #52]	@ (8000fbc <tcs34725_i2c_read16+0x5c>)
 8000f86:	f002 f95f 	bl	8003248 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, (ADDRESS << 1), reg_value, 2, time_delay);
 8000f8a:	8afb      	ldrh	r3, [r7, #22]
 8000f8c:	f107 0210 	add.w	r2, r7, #16
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2302      	movs	r3, #2
 8000f94:	2152      	movs	r1, #82	@ 0x52
 8000f96:	4809      	ldr	r0, [pc, #36]	@ (8000fbc <tcs34725_i2c_read16+0x5c>)
 8000f98:	f002 fa54 	bl	8003444 <HAL_I2C_Master_Receive>

    value = reg_value[0];
 8000f9c:	7c3b      	ldrb	r3, [r7, #16]
 8000f9e:	82bb      	strh	r3, [r7, #20]
    value <<= 8;
 8000fa0:	8abb      	ldrh	r3, [r7, #20]
 8000fa2:	021b      	lsls	r3, r3, #8
 8000fa4:	82bb      	strh	r3, [r7, #20]
    value |= reg_value[1];
 8000fa6:	7c7b      	ldrb	r3, [r7, #17]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	8abb      	ldrh	r3, [r7, #20]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	82bb      	strh	r3, [r7, #20]

    return value;
 8000fb0:	8abb      	ldrh	r3, [r7, #20]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200001f4 	.word	0x200001f4

08000fc0 <tcs34725_init_sensor>:

void tcs34725_init_sensor(){
 8000fc0:	b5b0      	push	{r4, r5, r7, lr}
 8000fc2:	b092      	sub	sp, #72	@ 0x48
 8000fc4:	af00      	add	r7, sp, #0
	tcs34725_i2c_write(ENABLE, ENABLE_PON);					// Power
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff ff85 	bl	8000ed8 <tcs34725_i2c_write>
	HAL_Delay(3);
 8000fce:	2003      	movs	r0, #3
 8000fd0:	f001 f9c6 	bl	8002360 <HAL_Delay>

	tcs34725_i2c_write(ATIME, ITIME);						// Integration time
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f7ff ff7e 	bl	8000ed8 <tcs34725_i2c_write>
	tcs34725_i2c_write(CONTROL, GAIN);						// Gain
 8000fdc:	2100      	movs	r1, #0
 8000fde:	200f      	movs	r0, #15
 8000fe0:	f7ff ff7a 	bl	8000ed8 <tcs34725_i2c_write>


	uint8_t reg_value = tcs34725_i2c_read8(ATIME);
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f7ff ff95 	bl	8000f14 <tcs34725_i2c_read8>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	char reg_str[5];
	sprintf(reg_str, "%d", reg_value);
 8000ff0:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000ff4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ff8:	491a      	ldr	r1, [pc, #104]	@ (8001064 <tcs34725_init_sensor+0xa4>)
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f009 f97c 	bl	800a2f8 <siprintf>

	char temp_msg[64];
	strcpy(temp_msg, "Sensor Integration Time: ");
 8001000:	463b      	mov	r3, r7
 8001002:	4a19      	ldr	r2, [pc, #100]	@ (8001068 <tcs34725_init_sensor+0xa8>)
 8001004:	461c      	mov	r4, r3
 8001006:	4615      	mov	r5, r2
 8001008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800100a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800100c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001010:	c403      	stmia	r4!, {r0, r1}
 8001012:	8022      	strh	r2, [r4, #0]
	strcat(temp_msg, reg_str);
 8001014:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001018:	463b      	mov	r3, r7
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f009 f9d6 	bl	800a3ce <strcat>
	strcat(temp_msg, "\n");
 8001022:	463b      	mov	r3, r7
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff f943 	bl	80002b0 <strlen>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	463b      	mov	r3, r7
 8001030:	4413      	add	r3, r2
 8001032:	490e      	ldr	r1, [pc, #56]	@ (800106c <tcs34725_init_sensor+0xac>)
 8001034:	461a      	mov	r2, r3
 8001036:	460b      	mov	r3, r1
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 800103c:	463b      	mov	r3, r7
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff f936 	bl	80002b0 <strlen>
 8001044:	4603      	mov	r3, r0
 8001046:	b29a      	uxth	r2, r3
 8001048:	4639      	mov	r1, r7
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	4808      	ldr	r0, [pc, #32]	@ (8001070 <tcs34725_init_sensor+0xb0>)
 8001050:	f004 f90c 	bl	800526c <HAL_UART_Transmit>



	tcs34725_i2c_write(ENABLE, ENABLE_PON | ENABLE_AEN);    // ADC Enable
 8001054:	2103      	movs	r1, #3
 8001056:	2000      	movs	r0, #0
 8001058:	f7ff ff3e 	bl	8000ed8 <tcs34725_i2c_write>

}
 800105c:	bf00      	nop
 800105e:	3748      	adds	r7, #72	@ 0x48
 8001060:	46bd      	mov	sp, r7
 8001062:	bdb0      	pop	{r4, r5, r7, pc}
 8001064:	0800c50c 	.word	0x0800c50c
 8001068:	0800c510 	.word	0x0800c510
 800106c:	0800c52c 	.word	0x0800c52c
 8001070:	20000248 	.word	0x20000248

08001074 <tcs34725_integration_wait_time>:

void tcs34725_integration_wait_time(int itime){
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	int wait_time = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
	switch(itime){
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2bff      	cmp	r3, #255	@ 0xff
 8001084:	d015      	beq.n	80010b2 <tcs34725_integration_wait_time+0x3e>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2bff      	cmp	r3, #255	@ 0xff
 800108a:	dc22      	bgt.n	80010d2 <tcs34725_integration_wait_time+0x5e>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2bf6      	cmp	r3, #246	@ 0xf6
 8001090:	d012      	beq.n	80010b8 <tcs34725_integration_wait_time+0x44>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2bf6      	cmp	r3, #246	@ 0xf6
 8001096:	dc1c      	bgt.n	80010d2 <tcs34725_integration_wait_time+0x5e>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2bd5      	cmp	r3, #213	@ 0xd5
 800109c:	d00f      	beq.n	80010be <tcs34725_integration_wait_time+0x4a>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2bd5      	cmp	r3, #213	@ 0xd5
 80010a2:	dc16      	bgt.n	80010d2 <tcs34725_integration_wait_time+0x5e>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d00f      	beq.n	80010ca <tcs34725_integration_wait_time+0x56>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2bc0      	cmp	r3, #192	@ 0xc0
 80010ae:	d009      	beq.n	80010c4 <tcs34725_integration_wait_time+0x50>
 80010b0:	e00f      	b.n	80010d2 <tcs34725_integration_wait_time+0x5e>
	case 255:
		wait_time = 2.4;
 80010b2:	2302      	movs	r3, #2
 80010b4:	60fb      	str	r3, [r7, #12]
		break;
 80010b6:	e00c      	b.n	80010d2 <tcs34725_integration_wait_time+0x5e>
	case 246:
		wait_time = 24;
 80010b8:	2318      	movs	r3, #24
 80010ba:	60fb      	str	r3, [r7, #12]
		break;
 80010bc:	e009      	b.n	80010d2 <tcs34725_integration_wait_time+0x5e>
	case 213:
		wait_time = 101;
 80010be:	2365      	movs	r3, #101	@ 0x65
 80010c0:	60fb      	str	r3, [r7, #12]
		break;
 80010c2:	e006      	b.n	80010d2 <tcs34725_integration_wait_time+0x5e>
	case 192:
		wait_time = 154;
 80010c4:	239a      	movs	r3, #154	@ 0x9a
 80010c6:	60fb      	str	r3, [r7, #12]
		break;
 80010c8:	e003      	b.n	80010d2 <tcs34725_integration_wait_time+0x5e>
	case 0:
		wait_time = 700;
 80010ca:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 80010ce:	60fb      	str	r3, [r7, #12]
		break;
 80010d0:	bf00      	nop
	}
	osDelay(wait_time);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f005 f9ef 	bl	80064b8 <osDelay>
}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <tcs34725_update_config_itime>:

void tcs34725_update_config_itime(int itime){
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
	tcs34725_i2c_write(ENABLE, ENABLE_PON);    // Pause Measuring
 80010ea:	2101      	movs	r1, #1
 80010ec:	2000      	movs	r0, #0
 80010ee:	f7ff fef3 	bl	8000ed8 <tcs34725_i2c_write>
	tcs34725_i2c_write(ATIME, itime);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4619      	mov	r1, r3
 80010f6:	2001      	movs	r0, #1
 80010f8:	f7ff feee 	bl	8000ed8 <tcs34725_i2c_write>
	tcs34725_i2c_write(ENABLE, ENABLE_PON | ENABLE_AEN);
 80010fc:	2103      	movs	r1, #3
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff feea 	bl	8000ed8 <tcs34725_i2c_write>
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <tcs34725_update_config_gain>:

void tcs34725_update_config_gain(int gain, int itime){
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
	tcs34725_i2c_write(ENABLE, ENABLE_PON ); // Pause Measuring
 8001116:	2101      	movs	r1, #1
 8001118:	2000      	movs	r0, #0
 800111a:	f7ff fedd 	bl	8000ed8 <tcs34725_i2c_write>
	tcs34725_i2c_write(CONTROL, gain);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4619      	mov	r1, r3
 8001122:	200f      	movs	r0, #15
 8001124:	f7ff fed8 	bl	8000ed8 <tcs34725_i2c_write>

	tcs34725_i2c_write(ENABLE, ENABLE_PON | ENABLE_AEN);    // ADC Enable
 8001128:	2103      	movs	r1, #3
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff fed4 	bl	8000ed8 <tcs34725_i2c_write>
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <read_colour_data>:

void read_colour_data(uint16_t *r, uint16_t *g, uint16_t *b, uint16_t *c){
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	603b      	str	r3, [r7, #0]
	// Read colour from all registers

	*r = tcs34725_i2c_read16(RDATAL);
 8001146:	2016      	movs	r0, #22
 8001148:	f7ff ff0a 	bl	8000f60 <tcs34725_i2c_read16>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	801a      	strh	r2, [r3, #0]
	*g = tcs34725_i2c_read16(GDATAL);
 8001154:	2018      	movs	r0, #24
 8001156:	f7ff ff03 	bl	8000f60 <tcs34725_i2c_read16>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	801a      	strh	r2, [r3, #0]
	*b = tcs34725_i2c_read16(BDATAL);
 8001162:	201a      	movs	r0, #26
 8001164:	f7ff fefc 	bl	8000f60 <tcs34725_i2c_read16>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	801a      	strh	r2, [r3, #0]
	*c = tcs34725_i2c_read16(CDATAL);
 8001170:	2014      	movs	r0, #20
 8001172:	f7ff fef5 	bl	8000f60 <tcs34725_i2c_read16>
 8001176:	4603      	mov	r3, r0
 8001178:	461a      	mov	r2, r3
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	801a      	strh	r2, [r3, #0]

	int itime = tcs34725_i2c_read8(ATIME);
 800117e:	2001      	movs	r0, #1
 8001180:	f7ff fec8 	bl	8000f14 <tcs34725_i2c_read8>
 8001184:	4603      	mov	r3, r0
 8001186:	617b      	str	r3, [r7, #20]

	tcs34725_integration_wait_time(itime);
 8001188:	6978      	ldr	r0, [r7, #20]
 800118a:	f7ff ff73 	bl	8001074 <tcs34725_integration_wait_time>
}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <normalize_colour_data>:

uint8_t *normalize_colour_data(uint16_t *r, uint16_t *g, uint16_t *b, uint16_t *clear){
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	603b      	str	r3, [r7, #0]
	uint8_t *colours = (uint8_t*) malloc (3 * sizeof(uint8_t));
 80011a4:	2003      	movs	r0, #3
 80011a6:	f008 fad7 	bl	8009758 <malloc>
 80011aa:	4603      	mov	r3, r0
 80011ac:	617b      	str	r3, [r7, #20]
	// Normalize to 0-255
	if(*clear == 0){	// clear 0 => black
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10c      	bne.n	80011d0 <normalize_colour_data+0x3a>
		*(colours + 0) = 0;
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
		*(colours + 1) = 0;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	3301      	adds	r3, #1
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
		*(colours + 2) = 0;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	3302      	adds	r3, #2
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
		return colours;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	e029      	b.n	8001224 <normalize_colour_data+0x8e>
	}

	*(colours + 0) = *r * 255 / *clear;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4613      	mov	r3, r2
 80011d8:	021b      	lsls	r3, r3, #8
 80011da:	1a9b      	subs	r3, r3, r2
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	8812      	ldrh	r2, [r2, #0]
 80011e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	701a      	strb	r2, [r3, #0]
	*(colours + 1) = *g * 255 / *clear;
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	4613      	mov	r3, r2
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	1a9b      	subs	r3, r3, r2
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	8812      	ldrh	r2, [r2, #0]
 80011fa:	fb93 f2f2 	sdiv	r2, r3, r2
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	3301      	adds	r3, #1
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	701a      	strb	r2, [r3, #0]
	*(colours + 2) = *b * 255 / *clear;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	4613      	mov	r3, r2
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	1a9b      	subs	r3, r3, r2
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	8812      	ldrh	r2, [r2, #0]
 8001216:	fb93 f2f2 	sdiv	r2, r3, r2
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3302      	adds	r3, #2
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	701a      	strb	r2, [r3, #0]

	return colours;
 8001222:	697b      	ldr	r3, [r7, #20]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001232:	f001 f853 	bl	80022dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001236:	f000 f87f 	bl	8001338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800123a:	f000 f967 	bl	800150c <MX_GPIO_Init>
  MX_DMA_Init();
 800123e:	f000 f945 	bl	80014cc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001242:	f000 f919 	bl	8001478 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001246:	f000 f8e9 	bl	800141c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 800124a:	4b2a      	ldr	r3, [pc, #168]	@ (80012f4 <main+0xc8>)
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d105      	bne.n	8001262 <main+0x36>
	  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable the use of DWT
 8001256:	4b27      	ldr	r3, [pc, #156]	@ (80012f4 <main+0xc8>)
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	4a26      	ldr	r2, [pc, #152]	@ (80012f4 <main+0xc8>)
 800125c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001260:	60d3      	str	r3, [r2, #12]
  }
  DWT->CYCCNT = 0; // Reset the cycle counter
 8001262:	4b25      	ldr	r3, [pc, #148]	@ (80012f8 <main+0xcc>)
 8001264:	2200      	movs	r2, #0
 8001266:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // Enable the cycle counter
 8001268:	4b23      	ldr	r3, [pc, #140]	@ (80012f8 <main+0xcc>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a22      	ldr	r2, [pc, #136]	@ (80012f8 <main+0xcc>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6013      	str	r3, [r2, #0]

  tcs34725_init_sensor();
 8001274:	f7ff fea4 	bl	8000fc0 <tcs34725_init_sensor>
  char *message = "Waiting command...";
 8001278:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <main+0xd0>)
 800127a:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff f817 	bl	80002b0 <strlen>
 8001282:	4603      	mov	r3, r0
 8001284:	b29a      	uxth	r2, r3
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	481c      	ldr	r0, [pc, #112]	@ (8001300 <main+0xd4>)
 800128e:	f003 ffed 	bl	800526c <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1, buffer, 1);
 8001292:	2201      	movs	r2, #1
 8001294:	491b      	ldr	r1, [pc, #108]	@ (8001304 <main+0xd8>)
 8001296:	481a      	ldr	r0, [pc, #104]	@ (8001300 <main+0xd4>)
 8001298:	f004 f873 	bl	8005382 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800129c:	f005 f830 	bl	8006300 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of messageMutex */
  messageMutexHandle = osMutexNew(&messageMutex_attributes);
 80012a0:	4819      	ldr	r0, [pc, #100]	@ (8001308 <main+0xdc>)
 80012a2:	f005 f924 	bl	80064ee <osMutexNew>
 80012a6:	4603      	mov	r3, r0
 80012a8:	4a18      	ldr	r2, [pc, #96]	@ (800130c <main+0xe0>)
 80012aa:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binarySem */
  binarySemHandle = osSemaphoreNew(1, 1, &binarySem_attributes);
 80012ac:	4a18      	ldr	r2, [pc, #96]	@ (8001310 <main+0xe4>)
 80012ae:	2101      	movs	r1, #1
 80012b0:	2001      	movs	r0, #1
 80012b2:	f005 f9a2 	bl	80065fa <osSemaphoreNew>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4a16      	ldr	r2, [pc, #88]	@ (8001314 <main+0xe8>)
 80012ba:	6013      	str	r3, [r2, #0]

  /* creation of CountingSem */
  CountingSemHandle = osSemaphoreNew(3, 0, &CountingSem_attributes);
 80012bc:	4a16      	ldr	r2, [pc, #88]	@ (8001318 <main+0xec>)
 80012be:	2100      	movs	r1, #0
 80012c0:	2003      	movs	r0, #3
 80012c2:	f005 f99a 	bl	80065fa <osSemaphoreNew>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4a14      	ldr	r2, [pc, #80]	@ (800131c <main+0xf0>)
 80012ca:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of dataReceive */
  dataReceiveHandle = osThreadNew(Task_dataReceive, NULL, &dataReceive_attributes);
 80012cc:	4a14      	ldr	r2, [pc, #80]	@ (8001320 <main+0xf4>)
 80012ce:	2100      	movs	r1, #0
 80012d0:	4814      	ldr	r0, [pc, #80]	@ (8001324 <main+0xf8>)
 80012d2:	f005 f85f 	bl	8006394 <osThreadNew>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4a13      	ldr	r2, [pc, #76]	@ (8001328 <main+0xfc>)
 80012da:	6013      	str	r3, [r2, #0]

  /* creation of dataSend_BLT */
  dataSend_BLTHandle = osThreadNew(Task_dataSend_BLT, NULL, &dataSend_BLT_attributes);
 80012dc:	4a13      	ldr	r2, [pc, #76]	@ (800132c <main+0x100>)
 80012de:	2100      	movs	r1, #0
 80012e0:	4813      	ldr	r0, [pc, #76]	@ (8001330 <main+0x104>)
 80012e2:	f005 f857 	bl	8006394 <osThreadNew>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4a12      	ldr	r2, [pc, #72]	@ (8001334 <main+0x108>)
 80012ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80012ec:	f005 f82c 	bl	8006348 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <main+0xc4>
 80012f4:	e000edf0 	.word	0xe000edf0
 80012f8:	e0001000 	.word	0xe0001000
 80012fc:	0800c530 	.word	0x0800c530
 8001300:	20000248 	.word	0x20000248
 8001304:	2000030c 	.word	0x2000030c
 8001308:	0800c600 	.word	0x0800c600
 800130c:	200002f8 	.word	0x200002f8
 8001310:	0800c610 	.word	0x0800c610
 8001314:	200002fc 	.word	0x200002fc
 8001318:	0800c620 	.word	0x0800c620
 800131c:	20000300 	.word	0x20000300
 8001320:	0800c5b8 	.word	0x0800c5b8
 8001324:	08001b41 	.word	0x08001b41
 8001328:	200002f0 	.word	0x200002f0
 800132c:	0800c5dc 	.word	0x0800c5dc
 8001330:	08001be9 	.word	0x08001be9
 8001334:	200002f4 	.word	0x200002f4

08001338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b094      	sub	sp, #80	@ 0x50
 800133c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	2234      	movs	r2, #52	@ 0x34
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f009 f839 	bl	800a3be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800134c:	f107 0308 	add.w	r3, r7, #8
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800135c:	2300      	movs	r3, #0
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	4b2c      	ldr	r3, [pc, #176]	@ (8001414 <SystemClock_Config+0xdc>)
 8001362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001364:	4a2b      	ldr	r2, [pc, #172]	@ (8001414 <SystemClock_Config+0xdc>)
 8001366:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800136a:	6413      	str	r3, [r2, #64]	@ 0x40
 800136c:	4b29      	ldr	r3, [pc, #164]	@ (8001414 <SystemClock_Config+0xdc>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001378:	2300      	movs	r3, #0
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	4b26      	ldr	r3, [pc, #152]	@ (8001418 <SystemClock_Config+0xe0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a25      	ldr	r2, [pc, #148]	@ (8001418 <SystemClock_Config+0xe0>)
 8001382:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	4b23      	ldr	r3, [pc, #140]	@ (8001418 <SystemClock_Config+0xe0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001394:	2301      	movs	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001398:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800139c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139e:	2302      	movs	r3, #2
 80013a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013a8:	2304      	movs	r3, #4
 80013aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80013ac:	23b4      	movs	r3, #180	@ 0xb4
 80013ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013b0:	2302      	movs	r3, #2
 80013b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013b4:	2302      	movs	r3, #2
 80013b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013b8:	2302      	movs	r3, #2
 80013ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4618      	mov	r0, r3
 80013c2:	f003 f9c3 	bl	800474c <HAL_RCC_OscConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013cc:	f000 fcda 	bl	8001d84 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013d0:	f002 fdf0 	bl	8003fb4 <HAL_PWREx_EnableOverDrive>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80013da:	f000 fcd3 	bl	8001d84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013de:	230f      	movs	r3, #15
 80013e0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e2:	2302      	movs	r3, #2
 80013e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013ea:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013f4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	2105      	movs	r1, #5
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 fe29 	bl	8004054 <HAL_RCC_ClockConfig>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001408:	f000 fcbc 	bl	8001d84 <Error_Handler>
  }
}
 800140c:	bf00      	nop
 800140e:	3750      	adds	r7, #80	@ 0x50
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40023800 	.word	0x40023800
 8001418:	40007000 	.word	0x40007000

0800141c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001420:	4b12      	ldr	r3, [pc, #72]	@ (800146c <MX_I2C1_Init+0x50>)
 8001422:	4a13      	ldr	r2, [pc, #76]	@ (8001470 <MX_I2C1_Init+0x54>)
 8001424:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001426:	4b11      	ldr	r3, [pc, #68]	@ (800146c <MX_I2C1_Init+0x50>)
 8001428:	4a12      	ldr	r2, [pc, #72]	@ (8001474 <MX_I2C1_Init+0x58>)
 800142a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800142c:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <MX_I2C1_Init+0x50>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001432:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <MX_I2C1_Init+0x50>)
 8001434:	2200      	movs	r2, #0
 8001436:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001438:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <MX_I2C1_Init+0x50>)
 800143a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800143e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001440:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <MX_I2C1_Init+0x50>)
 8001442:	2200      	movs	r2, #0
 8001444:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001446:	4b09      	ldr	r3, [pc, #36]	@ (800146c <MX_I2C1_Init+0x50>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800144c:	4b07      	ldr	r3, [pc, #28]	@ (800146c <MX_I2C1_Init+0x50>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001452:	4b06      	ldr	r3, [pc, #24]	@ (800146c <MX_I2C1_Init+0x50>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001458:	4804      	ldr	r0, [pc, #16]	@ (800146c <MX_I2C1_Init+0x50>)
 800145a:	f001 fdb1 	bl	8002fc0 <HAL_I2C_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001464:	f000 fc8e 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200001f4 	.word	0x200001f4
 8001470:	40005400 	.word	0x40005400
 8001474:	00061a80 	.word	0x00061a80

08001478 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 800147e:	4a12      	ldr	r2, [pc, #72]	@ (80014c8 <MX_USART1_UART_Init+0x50>)
 8001480:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 8001484:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001488:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001490:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001496:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800149c:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 800149e:	220c      	movs	r2, #12
 80014a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a2:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ae:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 80014b0:	f003 fe8c 	bl	80051cc <HAL_UART_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014ba:	f000 fc63 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000248 	.word	0x20000248
 80014c8:	40011000 	.word	0x40011000

080014cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <MX_DMA_Init+0x3c>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	4a0b      	ldr	r2, [pc, #44]	@ (8001508 <MX_DMA_Init+0x3c>)
 80014dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e2:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <MX_DMA_Init+0x3c>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2105      	movs	r1, #5
 80014f2:	203a      	movs	r0, #58	@ 0x3a
 80014f4:	f001 f810 	bl	8002518 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80014f8:	203a      	movs	r0, #58	@ 0x3a
 80014fa:	f001 f829 	bl	8002550 <HAL_NVIC_EnableIRQ>

}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800

0800150c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	@ 0x28
 8001510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	4b3d      	ldr	r3, [pc, #244]	@ (800161c <MX_GPIO_Init+0x110>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a3c      	ldr	r2, [pc, #240]	@ (800161c <MX_GPIO_Init+0x110>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b3a      	ldr	r3, [pc, #232]	@ (800161c <MX_GPIO_Init+0x110>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b36      	ldr	r3, [pc, #216]	@ (800161c <MX_GPIO_Init+0x110>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	4a35      	ldr	r2, [pc, #212]	@ (800161c <MX_GPIO_Init+0x110>)
 8001548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800154c:	6313      	str	r3, [r2, #48]	@ 0x30
 800154e:	4b33      	ldr	r3, [pc, #204]	@ (800161c <MX_GPIO_Init+0x110>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	4b2f      	ldr	r3, [pc, #188]	@ (800161c <MX_GPIO_Init+0x110>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a2e      	ldr	r2, [pc, #184]	@ (800161c <MX_GPIO_Init+0x110>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b2c      	ldr	r3, [pc, #176]	@ (800161c <MX_GPIO_Init+0x110>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	4b28      	ldr	r3, [pc, #160]	@ (800161c <MX_GPIO_Init+0x110>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	4a27      	ldr	r2, [pc, #156]	@ (800161c <MX_GPIO_Init+0x110>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	6313      	str	r3, [r2, #48]	@ 0x30
 8001586:	4b25      	ldr	r3, [pc, #148]	@ (800161c <MX_GPIO_Init+0x110>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	2120      	movs	r1, #32
 8001596:	4822      	ldr	r0, [pc, #136]	@ (8001620 <MX_GPIO_Init+0x114>)
 8001598:	f001 fcf8 	bl	8002f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800159c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015a2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	481c      	ldr	r0, [pc, #112]	@ (8001624 <MX_GPIO_Init+0x118>)
 80015b4:	f001 fb56 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015b8:	230c      	movs	r3, #12
 80015ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c4:	2303      	movs	r3, #3
 80015c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015c8:	2307      	movs	r3, #7
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4619      	mov	r1, r3
 80015d2:	4813      	ldr	r0, [pc, #76]	@ (8001620 <MX_GPIO_Init+0x114>)
 80015d4:	f001 fb46 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015d8:	2320      	movs	r3, #32
 80015da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015dc:	2301      	movs	r3, #1
 80015de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	480c      	ldr	r0, [pc, #48]	@ (8001620 <MX_GPIO_Init+0x114>)
 80015f0:	f001 fb38 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015f4:	2310      	movs	r3, #16
 80015f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f8:	2312      	movs	r3, #18
 80015fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001604:	2304      	movs	r3, #4
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	4806      	ldr	r0, [pc, #24]	@ (8001628 <MX_GPIO_Init+0x11c>)
 8001610:	f001 fb28 	bl	8002c64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001614:	bf00      	nop
 8001616:	3728      	adds	r7, #40	@ 0x28
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40023800 	.word	0x40023800
 8001620:	40020000 	.word	0x40020000
 8001624:	40020800 	.word	0x40020800
 8001628:	40020400 	.word	0x40020400

0800162c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800162c:	b5b0      	push	{r4, r5, r7, lr}
 800162e:	b090      	sub	sp, #64	@ 0x40
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, buffer, 1);
 8001634:	2201      	movs	r2, #1
 8001636:	49be      	ldr	r1, [pc, #760]	@ (8001930 <HAL_UART_RxCpltCallback+0x304>)
 8001638:	48be      	ldr	r0, [pc, #760]	@ (8001934 <HAL_UART_RxCpltCallback+0x308>)
 800163a:	f003 fea2 	bl	8005382 <HAL_UART_Receive_IT>

	char temp_msg[32];
	char str_itime[6];
	char str_gain[6];
	int itime = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int gain = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	63bb      	str	r3, [r7, #56]	@ 0x38

	switch(buffer[0]){
 8001646:	4bba      	ldr	r3, [pc, #744]	@ (8001930 <HAL_UART_RxCpltCallback+0x304>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	3b30      	subs	r3, #48	@ 0x30
 800164c:	2b11      	cmp	r3, #17
 800164e:	f200 826b 	bhi.w	8001b28 <HAL_UART_RxCpltCallback+0x4fc>
 8001652:	a201      	add	r2, pc, #4	@ (adr r2, 8001658 <HAL_UART_RxCpltCallback+0x2c>)
 8001654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001658:	080016a1 	.word	0x080016a1
 800165c:	080016b7 	.word	0x080016b7
 8001660:	080016cd 	.word	0x080016cd
 8001664:	08001747 	.word	0x08001747
 8001668:	080017c1 	.word	0x080017c1
 800166c:	0800183b 	.word	0x0800183b
 8001670:	080018b5 	.word	0x080018b5
 8001674:	08001951 	.word	0x08001951
 8001678:	080019c7 	.word	0x080019c7
 800167c:	08001a3d 	.word	0x08001a3d
 8001680:	08001b29 	.word	0x08001b29
 8001684:	08001b29 	.word	0x08001b29
 8001688:	08001b29 	.word	0x08001b29
 800168c:	08001b29 	.word	0x08001b29
 8001690:	08001b29 	.word	0x08001b29
 8001694:	08001b29 	.word	0x08001b29
 8001698:	08001b29 	.word	0x08001b29
 800169c:	08001ab3 	.word	0x08001ab3
	case '0':
		HAL_UART_Transmit(&huart1, (uint8_t *)"!App OFF!\n", 10, HAL_MAX_DELAY);
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295
 80016a4:	220a      	movs	r2, #10
 80016a6:	49a4      	ldr	r1, [pc, #656]	@ (8001938 <HAL_UART_RxCpltCallback+0x30c>)
 80016a8:	48a2      	ldr	r0, [pc, #648]	@ (8001934 <HAL_UART_RxCpltCallback+0x308>)
 80016aa:	f003 fddf 	bl	800526c <HAL_UART_Transmit>
		isToggled = false;
 80016ae:	4ba3      	ldr	r3, [pc, #652]	@ (800193c <HAL_UART_RxCpltCallback+0x310>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
		break;
 80016b4:	e238      	b.n	8001b28 <HAL_UART_RxCpltCallback+0x4fc>
	case '1':
		HAL_UART_Transmit(&huart1, (uint8_t *)"!App ON!\n", 9, HAL_MAX_DELAY);
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ba:	2209      	movs	r2, #9
 80016bc:	49a0      	ldr	r1, [pc, #640]	@ (8001940 <HAL_UART_RxCpltCallback+0x314>)
 80016be:	489d      	ldr	r0, [pc, #628]	@ (8001934 <HAL_UART_RxCpltCallback+0x308>)
 80016c0:	f003 fdd4 	bl	800526c <HAL_UART_Transmit>
		isToggled = true;
 80016c4:	4b9d      	ldr	r3, [pc, #628]	@ (800193c <HAL_UART_RxCpltCallback+0x310>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
		break;
 80016ca:	e22d      	b.n	8001b28 <HAL_UART_RxCpltCallback+0x4fc>
	case '2':
		itime = 0xFF;
 80016cc:	23ff      	movs	r3, #255	@ 0xff
 80016ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sprintf(str_itime, "0x%02X", itime);
 80016d0:	f107 0310 	add.w	r3, r7, #16
 80016d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016d6:	499b      	ldr	r1, [pc, #620]	@ (8001944 <HAL_UART_RxCpltCallback+0x318>)
 80016d8:	4618      	mov	r0, r3
 80016da:	f008 fe0d 	bl	800a2f8 <siprintf>

		strcpy(temp_msg, "!Set integration time to ");
 80016de:	f107 0318 	add.w	r3, r7, #24
 80016e2:	4a99      	ldr	r2, [pc, #612]	@ (8001948 <HAL_UART_RxCpltCallback+0x31c>)
 80016e4:	461c      	mov	r4, r3
 80016e6:	4615      	mov	r5, r2
 80016e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016f0:	c403      	stmia	r4!, {r0, r1}
 80016f2:	8022      	strh	r2, [r4, #0]
		strcat(temp_msg, str_itime);
 80016f4:	f107 0210 	add.w	r2, r7, #16
 80016f8:	f107 0318 	add.w	r3, r7, #24
 80016fc:	4611      	mov	r1, r2
 80016fe:	4618      	mov	r0, r3
 8001700:	f008 fe65 	bl	800a3ce <strcat>
		strcat(temp_msg, "!\n");
 8001704:	f107 0318 	add.w	r3, r7, #24
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe fdd1 	bl	80002b0 <strlen>
 800170e:	4603      	mov	r3, r0
 8001710:	461a      	mov	r2, r3
 8001712:	f107 0318 	add.w	r3, r7, #24
 8001716:	4413      	add	r3, r2
 8001718:	4a8c      	ldr	r2, [pc, #560]	@ (800194c <HAL_UART_RxCpltCallback+0x320>)
 800171a:	8811      	ldrh	r1, [r2, #0]
 800171c:	7892      	ldrb	r2, [r2, #2]
 800171e:	8019      	strh	r1, [r3, #0]
 8001720:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, (uint8_t*) temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 8001722:	f107 0318 	add.w	r3, r7, #24
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe fdc2 	bl	80002b0 <strlen>
 800172c:	4603      	mov	r3, r0
 800172e:	b29a      	uxth	r2, r3
 8001730:	f107 0118 	add.w	r1, r7, #24
 8001734:	f04f 33ff 	mov.w	r3, #4294967295
 8001738:	487e      	ldr	r0, [pc, #504]	@ (8001934 <HAL_UART_RxCpltCallback+0x308>)
 800173a:	f003 fd97 	bl	800526c <HAL_UART_Transmit>
		tcs34725_update_config_itime(itime);
 800173e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001740:	f7ff fccf 	bl	80010e2 <tcs34725_update_config_itime>
		break;
 8001744:	e1f0      	b.n	8001b28 <HAL_UART_RxCpltCallback+0x4fc>
	case '3':
		itime = 0xF6;
 8001746:	23f6      	movs	r3, #246	@ 0xf6
 8001748:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sprintf(str_itime, "0x%02X", itime);
 800174a:	f107 0310 	add.w	r3, r7, #16
 800174e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001750:	497c      	ldr	r1, [pc, #496]	@ (8001944 <HAL_UART_RxCpltCallback+0x318>)
 8001752:	4618      	mov	r0, r3
 8001754:	f008 fdd0 	bl	800a2f8 <siprintf>

		strcpy(temp_msg, "!Set integration time to ");
 8001758:	f107 0318 	add.w	r3, r7, #24
 800175c:	4a7a      	ldr	r2, [pc, #488]	@ (8001948 <HAL_UART_RxCpltCallback+0x31c>)
 800175e:	461c      	mov	r4, r3
 8001760:	4615      	mov	r5, r2
 8001762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001766:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800176a:	c403      	stmia	r4!, {r0, r1}
 800176c:	8022      	strh	r2, [r4, #0]
		strcat(temp_msg, str_itime);
 800176e:	f107 0210 	add.w	r2, r7, #16
 8001772:	f107 0318 	add.w	r3, r7, #24
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f008 fe28 	bl	800a3ce <strcat>
		strcat(temp_msg, "!\n");
 800177e:	f107 0318 	add.w	r3, r7, #24
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fd94 	bl	80002b0 <strlen>
 8001788:	4603      	mov	r3, r0
 800178a:	461a      	mov	r2, r3
 800178c:	f107 0318 	add.w	r3, r7, #24
 8001790:	4413      	add	r3, r2
 8001792:	4a6e      	ldr	r2, [pc, #440]	@ (800194c <HAL_UART_RxCpltCallback+0x320>)
 8001794:	8811      	ldrh	r1, [r2, #0]
 8001796:	7892      	ldrb	r2, [r2, #2]
 8001798:	8019      	strh	r1, [r3, #0]
 800179a:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, (uint8_t*) temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 800179c:	f107 0318 	add.w	r3, r7, #24
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fd85 	bl	80002b0 <strlen>
 80017a6:	4603      	mov	r3, r0
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	f107 0118 	add.w	r1, r7, #24
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295
 80017b2:	4860      	ldr	r0, [pc, #384]	@ (8001934 <HAL_UART_RxCpltCallback+0x308>)
 80017b4:	f003 fd5a 	bl	800526c <HAL_UART_Transmit>
		tcs34725_update_config_itime(itime);
 80017b8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80017ba:	f7ff fc92 	bl	80010e2 <tcs34725_update_config_itime>
		break;
 80017be:	e1b3      	b.n	8001b28 <HAL_UART_RxCpltCallback+0x4fc>
	case '4':
		itime = 0xD5;
 80017c0:	23d5      	movs	r3, #213	@ 0xd5
 80017c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sprintf(str_itime, "0x%02X", itime);
 80017c4:	f107 0310 	add.w	r3, r7, #16
 80017c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80017ca:	495e      	ldr	r1, [pc, #376]	@ (8001944 <HAL_UART_RxCpltCallback+0x318>)
 80017cc:	4618      	mov	r0, r3
 80017ce:	f008 fd93 	bl	800a2f8 <siprintf>

		strcpy(temp_msg, "!Set integration time to ");
 80017d2:	f107 0318 	add.w	r3, r7, #24
 80017d6:	4a5c      	ldr	r2, [pc, #368]	@ (8001948 <HAL_UART_RxCpltCallback+0x31c>)
 80017d8:	461c      	mov	r4, r3
 80017da:	4615      	mov	r5, r2
 80017dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017e4:	c403      	stmia	r4!, {r0, r1}
 80017e6:	8022      	strh	r2, [r4, #0]
		strcat(temp_msg, str_itime);
 80017e8:	f107 0210 	add.w	r2, r7, #16
 80017ec:	f107 0318 	add.w	r3, r7, #24
 80017f0:	4611      	mov	r1, r2
 80017f2:	4618      	mov	r0, r3
 80017f4:	f008 fdeb 	bl	800a3ce <strcat>
		strcat(temp_msg, "!\n");
 80017f8:	f107 0318 	add.w	r3, r7, #24
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe fd57 	bl	80002b0 <strlen>
 8001802:	4603      	mov	r3, r0
 8001804:	461a      	mov	r2, r3
 8001806:	f107 0318 	add.w	r3, r7, #24
 800180a:	4413      	add	r3, r2
 800180c:	4a4f      	ldr	r2, [pc, #316]	@ (800194c <HAL_UART_RxCpltCallback+0x320>)
 800180e:	8811      	ldrh	r1, [r2, #0]
 8001810:	7892      	ldrb	r2, [r2, #2]
 8001812:	8019      	strh	r1, [r3, #0]
 8001814:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, (uint8_t*) temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 8001816:	f107 0318 	add.w	r3, r7, #24
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fd48 	bl	80002b0 <strlen>
 8001820:	4603      	mov	r3, r0
 8001822:	b29a      	uxth	r2, r3
 8001824:	f107 0118 	add.w	r1, r7, #24
 8001828:	f04f 33ff 	mov.w	r3, #4294967295
 800182c:	4841      	ldr	r0, [pc, #260]	@ (8001934 <HAL_UART_RxCpltCallback+0x308>)
 800182e:	f003 fd1d 	bl	800526c <HAL_UART_Transmit>
		tcs34725_update_config_itime(itime);
 8001832:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001834:	f7ff fc55 	bl	80010e2 <tcs34725_update_config_itime>
		break;
 8001838:	e176      	b.n	8001b28 <HAL_UART_RxCpltCallback+0x4fc>
	case '5':
		itime = 0xC0;
 800183a:	23c0      	movs	r3, #192	@ 0xc0
 800183c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sprintf(str_itime, "0x%02X", itime);
 800183e:	f107 0310 	add.w	r3, r7, #16
 8001842:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001844:	493f      	ldr	r1, [pc, #252]	@ (8001944 <HAL_UART_RxCpltCallback+0x318>)
 8001846:	4618      	mov	r0, r3
 8001848:	f008 fd56 	bl	800a2f8 <siprintf>

		strcpy(temp_msg, "!Set integration time to ");
 800184c:	f107 0318 	add.w	r3, r7, #24
 8001850:	4a3d      	ldr	r2, [pc, #244]	@ (8001948 <HAL_UART_RxCpltCallback+0x31c>)
 8001852:	461c      	mov	r4, r3
 8001854:	4615      	mov	r5, r2
 8001856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800185a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800185e:	c403      	stmia	r4!, {r0, r1}
 8001860:	8022      	strh	r2, [r4, #0]
		strcat(temp_msg, str_itime);
 8001862:	f107 0210 	add.w	r2, r7, #16
 8001866:	f107 0318 	add.w	r3, r7, #24
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f008 fdae 	bl	800a3ce <strcat>
		strcat(temp_msg, "!\n");
 8001872:	f107 0318 	add.w	r3, r7, #24
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fd1a 	bl	80002b0 <strlen>
 800187c:	4603      	mov	r3, r0
 800187e:	461a      	mov	r2, r3
 8001880:	f107 0318 	add.w	r3, r7, #24
 8001884:	4413      	add	r3, r2
 8001886:	4a31      	ldr	r2, [pc, #196]	@ (800194c <HAL_UART_RxCpltCallback+0x320>)
 8001888:	8811      	ldrh	r1, [r2, #0]
 800188a:	7892      	ldrb	r2, [r2, #2]
 800188c:	8019      	strh	r1, [r3, #0]
 800188e:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, (uint8_t*) temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 8001890:	f107 0318 	add.w	r3, r7, #24
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fd0b 	bl	80002b0 <strlen>
 800189a:	4603      	mov	r3, r0
 800189c:	b29a      	uxth	r2, r3
 800189e:	f107 0118 	add.w	r1, r7, #24
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295
 80018a6:	4823      	ldr	r0, [pc, #140]	@ (8001934 <HAL_UART_RxCpltCallback+0x308>)
 80018a8:	f003 fce0 	bl	800526c <HAL_UART_Transmit>
		tcs34725_update_config_itime(itime);
 80018ac:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80018ae:	f7ff fc18 	bl	80010e2 <tcs34725_update_config_itime>
		break;
 80018b2:	e139      	b.n	8001b28 <HAL_UART_RxCpltCallback+0x4fc>
	case '6':
		itime = 0x00;
 80018b4:	2300      	movs	r3, #0
 80018b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sprintf(str_itime, "0x%02X", itime);
 80018b8:	f107 0310 	add.w	r3, r7, #16
 80018bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80018be:	4921      	ldr	r1, [pc, #132]	@ (8001944 <HAL_UART_RxCpltCallback+0x318>)
 80018c0:	4618      	mov	r0, r3
 80018c2:	f008 fd19 	bl	800a2f8 <siprintf>

		strcpy(temp_msg, "!Set integration time to ");
 80018c6:	f107 0318 	add.w	r3, r7, #24
 80018ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001948 <HAL_UART_RxCpltCallback+0x31c>)
 80018cc:	461c      	mov	r4, r3
 80018ce:	4615      	mov	r5, r2
 80018d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018d8:	c403      	stmia	r4!, {r0, r1}
 80018da:	8022      	strh	r2, [r4, #0]
		strcat(temp_msg, str_itime);
 80018dc:	f107 0210 	add.w	r2, r7, #16
 80018e0:	f107 0318 	add.w	r3, r7, #24
 80018e4:	4611      	mov	r1, r2
 80018e6:	4618      	mov	r0, r3
 80018e8:	f008 fd71 	bl	800a3ce <strcat>
		strcat(temp_msg, "!\n");
 80018ec:	f107 0318 	add.w	r3, r7, #24
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fcdd 	bl	80002b0 <strlen>
 80018f6:	4603      	mov	r3, r0
 80018f8:	461a      	mov	r2, r3
 80018fa:	f107 0318 	add.w	r3, r7, #24
 80018fe:	4413      	add	r3, r2
 8001900:	4a12      	ldr	r2, [pc, #72]	@ (800194c <HAL_UART_RxCpltCallback+0x320>)
 8001902:	8811      	ldrh	r1, [r2, #0]
 8001904:	7892      	ldrb	r2, [r2, #2]
 8001906:	8019      	strh	r1, [r3, #0]
 8001908:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, (uint8_t*) temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 800190a:	f107 0318 	add.w	r3, r7, #24
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fcce 	bl	80002b0 <strlen>
 8001914:	4603      	mov	r3, r0
 8001916:	b29a      	uxth	r2, r3
 8001918:	f107 0118 	add.w	r1, r7, #24
 800191c:	f04f 33ff 	mov.w	r3, #4294967295
 8001920:	4804      	ldr	r0, [pc, #16]	@ (8001934 <HAL_UART_RxCpltCallback+0x308>)
 8001922:	f003 fca3 	bl	800526c <HAL_UART_Transmit>
		tcs34725_update_config_itime(itime);
 8001926:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001928:	f7ff fbdb 	bl	80010e2 <tcs34725_update_config_itime>
		break;
 800192c:	e0fc      	b.n	8001b28 <HAL_UART_RxCpltCallback+0x4fc>
 800192e:	bf00      	nop
 8001930:	2000030c 	.word	0x2000030c
 8001934:	20000248 	.word	0x20000248
 8001938:	0800c544 	.word	0x0800c544
 800193c:	2000030d 	.word	0x2000030d
 8001940:	0800c550 	.word	0x0800c550
 8001944:	0800c55c 	.word	0x0800c55c
 8001948:	0800c564 	.word	0x0800c564
 800194c:	0800c580 	.word	0x0800c580
	case '7':
		gain = 0x00;
 8001950:	2300      	movs	r3, #0
 8001952:	63bb      	str	r3, [r7, #56]	@ 0x38
		sprintf(str_gain, "0x%02X", gain);
 8001954:	f107 0308 	add.w	r3, r7, #8
 8001958:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800195a:	4975      	ldr	r1, [pc, #468]	@ (8001b30 <HAL_UART_RxCpltCallback+0x504>)
 800195c:	4618      	mov	r0, r3
 800195e:	f008 fccb 	bl	800a2f8 <siprintf>

		strcpy(temp_msg, "!Set gain to ");
 8001962:	f107 0318 	add.w	r3, r7, #24
 8001966:	4a73      	ldr	r2, [pc, #460]	@ (8001b34 <HAL_UART_RxCpltCallback+0x508>)
 8001968:	461c      	mov	r4, r3
 800196a:	4613      	mov	r3, r2
 800196c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800196e:	c407      	stmia	r4!, {r0, r1, r2}
 8001970:	8023      	strh	r3, [r4, #0]
		strcat(temp_msg, str_gain);
 8001972:	f107 0208 	add.w	r2, r7, #8
 8001976:	f107 0318 	add.w	r3, r7, #24
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f008 fd26 	bl	800a3ce <strcat>
		strcat(temp_msg, "!\n");
 8001982:	f107 0318 	add.w	r3, r7, #24
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe fc92 	bl	80002b0 <strlen>
 800198c:	4603      	mov	r3, r0
 800198e:	461a      	mov	r2, r3
 8001990:	f107 0318 	add.w	r3, r7, #24
 8001994:	4413      	add	r3, r2
 8001996:	4a68      	ldr	r2, [pc, #416]	@ (8001b38 <HAL_UART_RxCpltCallback+0x50c>)
 8001998:	8811      	ldrh	r1, [r2, #0]
 800199a:	7892      	ldrb	r2, [r2, #2]
 800199c:	8019      	strh	r1, [r3, #0]
 800199e:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, (uint8_t*) temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 80019a0:	f107 0318 	add.w	r3, r7, #24
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fc83 	bl	80002b0 <strlen>
 80019aa:	4603      	mov	r3, r0
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	f107 0118 	add.w	r1, r7, #24
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295
 80019b6:	4861      	ldr	r0, [pc, #388]	@ (8001b3c <HAL_UART_RxCpltCallback+0x510>)
 80019b8:	f003 fc58 	bl	800526c <HAL_UART_Transmit>
		tcs34725_update_config_gain(gain, itime);
 80019bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80019be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80019c0:	f7ff fba4 	bl	800110c <tcs34725_update_config_gain>
		break;
 80019c4:	e0b0      	b.n	8001b28 <HAL_UART_RxCpltCallback+0x4fc>
	case '8':
		gain = 0x01;
 80019c6:	2301      	movs	r3, #1
 80019c8:	63bb      	str	r3, [r7, #56]	@ 0x38
		sprintf(str_gain, "0x%02X", gain);
 80019ca:	f107 0308 	add.w	r3, r7, #8
 80019ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80019d0:	4957      	ldr	r1, [pc, #348]	@ (8001b30 <HAL_UART_RxCpltCallback+0x504>)
 80019d2:	4618      	mov	r0, r3
 80019d4:	f008 fc90 	bl	800a2f8 <siprintf>

		strcpy(temp_msg, "!Set gain to ");
 80019d8:	f107 0318 	add.w	r3, r7, #24
 80019dc:	4a55      	ldr	r2, [pc, #340]	@ (8001b34 <HAL_UART_RxCpltCallback+0x508>)
 80019de:	461c      	mov	r4, r3
 80019e0:	4613      	mov	r3, r2
 80019e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019e4:	c407      	stmia	r4!, {r0, r1, r2}
 80019e6:	8023      	strh	r3, [r4, #0]
		strcat(temp_msg, str_gain);
 80019e8:	f107 0208 	add.w	r2, r7, #8
 80019ec:	f107 0318 	add.w	r3, r7, #24
 80019f0:	4611      	mov	r1, r2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f008 fceb 	bl	800a3ce <strcat>
		strcat(temp_msg, "!\n");
 80019f8:	f107 0318 	add.w	r3, r7, #24
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fc57 	bl	80002b0 <strlen>
 8001a02:	4603      	mov	r3, r0
 8001a04:	461a      	mov	r2, r3
 8001a06:	f107 0318 	add.w	r3, r7, #24
 8001a0a:	4413      	add	r3, r2
 8001a0c:	4a4a      	ldr	r2, [pc, #296]	@ (8001b38 <HAL_UART_RxCpltCallback+0x50c>)
 8001a0e:	8811      	ldrh	r1, [r2, #0]
 8001a10:	7892      	ldrb	r2, [r2, #2]
 8001a12:	8019      	strh	r1, [r3, #0]
 8001a14:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, (uint8_t*) temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 8001a16:	f107 0318 	add.w	r3, r7, #24
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fc48 	bl	80002b0 <strlen>
 8001a20:	4603      	mov	r3, r0
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	f107 0118 	add.w	r1, r7, #24
 8001a28:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2c:	4843      	ldr	r0, [pc, #268]	@ (8001b3c <HAL_UART_RxCpltCallback+0x510>)
 8001a2e:	f003 fc1d 	bl	800526c <HAL_UART_Transmit>
		tcs34725_update_config_gain(gain, itime);
 8001a32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001a34:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001a36:	f7ff fb69 	bl	800110c <tcs34725_update_config_gain>
		break;
 8001a3a:	e075      	b.n	8001b28 <HAL_UART_RxCpltCallback+0x4fc>
	case '9':
		gain = 0x10;
 8001a3c:	2310      	movs	r3, #16
 8001a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
		sprintf(str_gain, "0x%02X", gain);
 8001a40:	f107 0308 	add.w	r3, r7, #8
 8001a44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001a46:	493a      	ldr	r1, [pc, #232]	@ (8001b30 <HAL_UART_RxCpltCallback+0x504>)
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f008 fc55 	bl	800a2f8 <siprintf>

		strcpy(temp_msg, "!Set gain to ");
 8001a4e:	f107 0318 	add.w	r3, r7, #24
 8001a52:	4a38      	ldr	r2, [pc, #224]	@ (8001b34 <HAL_UART_RxCpltCallback+0x508>)
 8001a54:	461c      	mov	r4, r3
 8001a56:	4613      	mov	r3, r2
 8001a58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a5a:	c407      	stmia	r4!, {r0, r1, r2}
 8001a5c:	8023      	strh	r3, [r4, #0]
		strcat(temp_msg, str_gain);
 8001a5e:	f107 0208 	add.w	r2, r7, #8
 8001a62:	f107 0318 	add.w	r3, r7, #24
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f008 fcb0 	bl	800a3ce <strcat>
		strcat(temp_msg, "!\n");
 8001a6e:	f107 0318 	add.w	r3, r7, #24
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fc1c 	bl	80002b0 <strlen>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f107 0318 	add.w	r3, r7, #24
 8001a80:	4413      	add	r3, r2
 8001a82:	4a2d      	ldr	r2, [pc, #180]	@ (8001b38 <HAL_UART_RxCpltCallback+0x50c>)
 8001a84:	8811      	ldrh	r1, [r2, #0]
 8001a86:	7892      	ldrb	r2, [r2, #2]
 8001a88:	8019      	strh	r1, [r3, #0]
 8001a8a:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, (uint8_t*) temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 8001a8c:	f107 0318 	add.w	r3, r7, #24
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fc0d 	bl	80002b0 <strlen>
 8001a96:	4603      	mov	r3, r0
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	f107 0118 	add.w	r1, r7, #24
 8001a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa2:	4826      	ldr	r0, [pc, #152]	@ (8001b3c <HAL_UART_RxCpltCallback+0x510>)
 8001aa4:	f003 fbe2 	bl	800526c <HAL_UART_Transmit>
		tcs34725_update_config_gain(gain, itime);
 8001aa8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001aaa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001aac:	f7ff fb2e 	bl	800110c <tcs34725_update_config_gain>
		break;
 8001ab0:	e03a      	b.n	8001b28 <HAL_UART_RxCpltCallback+0x4fc>
	case 'A':
		gain = 0x11;
 8001ab2:	2311      	movs	r3, #17
 8001ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
		sprintf(str_gain, "0x%02X", gain);
 8001ab6:	f107 0308 	add.w	r3, r7, #8
 8001aba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001abc:	491c      	ldr	r1, [pc, #112]	@ (8001b30 <HAL_UART_RxCpltCallback+0x504>)
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f008 fc1a 	bl	800a2f8 <siprintf>

		strcpy(temp_msg, "!Set gain to ");
 8001ac4:	f107 0318 	add.w	r3, r7, #24
 8001ac8:	4a1a      	ldr	r2, [pc, #104]	@ (8001b34 <HAL_UART_RxCpltCallback+0x508>)
 8001aca:	461c      	mov	r4, r3
 8001acc:	4613      	mov	r3, r2
 8001ace:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ad0:	c407      	stmia	r4!, {r0, r1, r2}
 8001ad2:	8023      	strh	r3, [r4, #0]
		strcat(temp_msg, str_gain);
 8001ad4:	f107 0208 	add.w	r2, r7, #8
 8001ad8:	f107 0318 	add.w	r3, r7, #24
 8001adc:	4611      	mov	r1, r2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f008 fc75 	bl	800a3ce <strcat>
		strcat(temp_msg, "!\n");
 8001ae4:	f107 0318 	add.w	r3, r7, #24
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fbe1 	bl	80002b0 <strlen>
 8001aee:	4603      	mov	r3, r0
 8001af0:	461a      	mov	r2, r3
 8001af2:	f107 0318 	add.w	r3, r7, #24
 8001af6:	4413      	add	r3, r2
 8001af8:	4a0f      	ldr	r2, [pc, #60]	@ (8001b38 <HAL_UART_RxCpltCallback+0x50c>)
 8001afa:	8811      	ldrh	r1, [r2, #0]
 8001afc:	7892      	ldrb	r2, [r2, #2]
 8001afe:	8019      	strh	r1, [r3, #0]
 8001b00:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, (uint8_t*) temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 8001b02:	f107 0318 	add.w	r3, r7, #24
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fbd2 	bl	80002b0 <strlen>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	f107 0118 	add.w	r1, r7, #24
 8001b14:	f04f 33ff 	mov.w	r3, #4294967295
 8001b18:	4808      	ldr	r0, [pc, #32]	@ (8001b3c <HAL_UART_RxCpltCallback+0x510>)
 8001b1a:	f003 fba7 	bl	800526c <HAL_UART_Transmit>
		tcs34725_update_config_gain(gain, itime);
 8001b1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001b20:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001b22:	f7ff faf3 	bl	800110c <tcs34725_update_config_gain>
		break;
 8001b26:	bf00      	nop

	}
}
 8001b28:	bf00      	nop
 8001b2a:	3740      	adds	r7, #64	@ 0x40
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b30:	0800c55c 	.word	0x0800c55c
 8001b34:	0800c584 	.word	0x0800c584
 8001b38:	0800c580 	.word	0x0800c580
 8001b3c:	20000248 	.word	0x20000248

08001b40 <Task_dataReceive>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_dataReceive */
void Task_dataReceive(void *argument)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	uint16_t *r = (uint16_t*) malloc (sizeof(uint16_t));
 8001b48:	2002      	movs	r0, #2
 8001b4a:	f007 fe05 	bl	8009758 <malloc>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	61fb      	str	r3, [r7, #28]
	uint16_t *g = (uint16_t*) malloc (sizeof(uint16_t));
 8001b52:	2002      	movs	r0, #2
 8001b54:	f007 fe00 	bl	8009758 <malloc>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	61bb      	str	r3, [r7, #24]
	uint16_t *b = (uint16_t*) malloc (sizeof(uint16_t));
 8001b5c:	2002      	movs	r0, #2
 8001b5e:	f007 fdfb 	bl	8009758 <malloc>
 8001b62:	4603      	mov	r3, r0
 8001b64:	617b      	str	r3, [r7, #20]
	uint16_t *c = (uint16_t*) malloc (sizeof(uint16_t));
 8001b66:	2002      	movs	r0, #2
 8001b68:	f007 fdf6 	bl	8009758 <malloc>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	613b      	str	r3, [r7, #16]
//	int start_cycle;
  /* Infinite loop */
  for(;;){
	if(isToggled){
 8001b70:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <Task_dataReceive+0x98>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d02a      	beq.n	8001bce <Task_dataReceive+0x8e>
		int start_cycle = DWT->CYCCNT;						// timing start
 8001b78:	4b18      	ldr	r3, [pc, #96]	@ (8001bdc <Task_dataReceive+0x9c>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	60fb      	str	r3, [r7, #12]
		if(xSemaphoreTake(messageMutexHandle, portMAX_DELAY)){
 8001b7e:	4b18      	ldr	r3, [pc, #96]	@ (8001be0 <Task_dataReceive+0xa0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f04f 31ff 	mov.w	r1, #4294967295
 8001b86:	4618      	mov	r0, r3
 8001b88:	f005 fb2a 	bl	80071e0 <xQueueSemaphoreTake>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d01d      	beq.n	8001bce <Task_dataReceive+0x8e>
			  read_colour_data(r, g, b, c);					// get color
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	69b9      	ldr	r1, [r7, #24]
 8001b98:	69f8      	ldr	r0, [r7, #28]
 8001b9a:	f7ff facd 	bl	8001138 <read_colour_data>
			  msg.rgb = normalize_colour_data(r, g, b, c);	// normalize and store
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	69b9      	ldr	r1, [r7, #24]
 8001ba4:	69f8      	ldr	r0, [r7, #28]
 8001ba6:	f7ff faf6 	bl	8001196 <normalize_colour_data>
 8001baa:	4603      	mov	r3, r0
 8001bac:	4a0d      	ldr	r2, [pc, #52]	@ (8001be4 <Task_dataReceive+0xa4>)
 8001bae:	6013      	str	r3, [r2, #0]
			  int end_cycle = DWT->CYCCNT;					// timing end
 8001bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bdc <Task_dataReceive+0x9c>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	60bb      	str	r3, [r7, #8]
			  msg.total_cycles = end_cycle - start_cycle;	// store cycles taken
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	4a09      	ldr	r2, [pc, #36]	@ (8001be4 <Task_dataReceive+0xa4>)
 8001bbe:	6053      	str	r3, [r2, #4]
			  xSemaphoreGive(messageMutexHandle);
 8001bc0:	4b07      	ldr	r3, [pc, #28]	@ (8001be0 <Task_dataReceive+0xa0>)
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2100      	movs	r1, #0
 8001bca:	f005 f887 	bl	8006cdc <xQueueGenericSend>
		}
	  }
    osDelay(1);
 8001bce:	2001      	movs	r0, #1
 8001bd0:	f004 fc72 	bl	80064b8 <osDelay>
	if(isToggled){
 8001bd4:	e7cc      	b.n	8001b70 <Task_dataReceive+0x30>
 8001bd6:	bf00      	nop
 8001bd8:	2000030d 	.word	0x2000030d
 8001bdc:	e0001000 	.word	0xe0001000
 8001be0:	200002f8 	.word	0x200002f8
 8001be4:	20000304 	.word	0x20000304

08001be8 <Task_dataSend_BLT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_dataSend_BLT */
void Task_dataSend_BLT(void *argument)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b09c      	sub	sp, #112	@ 0x70
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	char cycles_str[16];

	/* Infinite loop */
  for(;;)
  {
	  if(isToggled){
 8001bf0:	4b53      	ldr	r3, [pc, #332]	@ (8001d40 <Task_dataSend_BLT+0x158>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 809e 	beq.w	8001d36 <Task_dataSend_BLT+0x14e>
			  char temp_msg[64] = "";
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	f107 0310 	add.w	r3, r7, #16
 8001c02:	223c      	movs	r2, #60	@ 0x3c
 8001c04:	2100      	movs	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f008 fbd9 	bl	800a3be <memset>

			  // Variables for the colour values detected
			  if(xSemaphoreTake(messageMutexHandle, portMAX_DELAY)){
 8001c0c:	4b4d      	ldr	r3, [pc, #308]	@ (8001d44 <Task_dataSend_BLT+0x15c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295
 8001c14:	4618      	mov	r0, r3
 8001c16:	f005 fae3 	bl	80071e0 <xQueueSemaphoreTake>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d018      	beq.n	8001c52 <Task_dataSend_BLT+0x6a>
					  r = msg.rgb[0]; // Red value
 8001c20:	4b49      	ldr	r3, [pc, #292]	@ (8001d48 <Task_dataSend_BLT+0x160>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					  g = msg.rgb[1]; // Green value
 8001c2a:	4b47      	ldr	r3, [pc, #284]	@ (8001d48 <Task_dataSend_BLT+0x160>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	785b      	ldrb	r3, [r3, #1]
 8001c30:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
					  b = msg.rgb[2]; // Blue value
 8001c34:	4b44      	ldr	r3, [pc, #272]	@ (8001d48 <Task_dataSend_BLT+0x160>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	789b      	ldrb	r3, [r3, #2]
 8001c3a:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					  cycles = msg.total_cycles;
 8001c3e:	4b42      	ldr	r3, [pc, #264]	@ (8001d48 <Task_dataSend_BLT+0x160>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	66bb      	str	r3, [r7, #104]	@ 0x68
			  	  xSemaphoreGive(messageMutexHandle);
 8001c44:	4b3f      	ldr	r3, [pc, #252]	@ (8001d44 <Task_dataSend_BLT+0x15c>)
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	f005 f845 	bl	8006cdc <xQueueGenericSend>
			  }

			  // Convert values to hex and char
			  sprintf(r_hex_str, "%02X", r);
 8001c52:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8001c56:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c5a:	493c      	ldr	r1, [pc, #240]	@ (8001d4c <Task_dataSend_BLT+0x164>)
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f008 fb4b 	bl	800a2f8 <siprintf>
			  sprintf(g_hex_str, "%02X", g);
 8001c62:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8001c66:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001c6a:	4938      	ldr	r1, [pc, #224]	@ (8001d4c <Task_dataSend_BLT+0x164>)
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f008 fb43 	bl	800a2f8 <siprintf>
			  sprintf(b_hex_str, "%02X", b);
 8001c72:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8001c76:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001c7a:	4934      	ldr	r1, [pc, #208]	@ (8001d4c <Task_dataSend_BLT+0x164>)
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f008 fb3b 	bl	800a2f8 <siprintf>
			  sprintf(cycles_str, "%d", cycles);
 8001c82:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001c86:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001c88:	4931      	ldr	r1, [pc, #196]	@ (8001d50 <Task_dataSend_BLT+0x168>)
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f008 fb34 	bl	800a2f8 <siprintf>

			  // Crafts message
			  strcpy(temp_msg, "#");
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	2223      	movs	r2, #35	@ 0x23
 8001c96:	801a      	strh	r2, [r3, #0]
			  strcat(temp_msg, r_hex_str);
 8001c98:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8001c9c:	f107 030c 	add.w	r3, r7, #12
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f008 fb93 	bl	800a3ce <strcat>
			  strcat(temp_msg, g_hex_str);
 8001ca8:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f008 fb8b 	bl	800a3ce <strcat>
			  strcat(temp_msg, b_hex_str);
 8001cb8:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8001cbc:	f107 030c 	add.w	r3, r7, #12
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f008 fb83 	bl	800a3ce <strcat>
			  strcat(temp_msg, " ");
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe faef 	bl	80002b0 <strlen>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	4413      	add	r3, r2
 8001cdc:	491d      	ldr	r1, [pc, #116]	@ (8001d54 <Task_dataSend_BLT+0x16c>)
 8001cde:	461a      	mov	r2, r3
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	8013      	strh	r3, [r2, #0]
			  strcat(temp_msg, cycles_str);
 8001ce6:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001cea:	f107 030c 	add.w	r3, r7, #12
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f008 fb6c 	bl	800a3ce <strcat>
			  strcat(temp_msg, "\n");
 8001cf6:	f107 030c 	add.w	r3, r7, #12
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fad8 	bl	80002b0 <strlen>
 8001d00:	4603      	mov	r3, r0
 8001d02:	461a      	mov	r2, r3
 8001d04:	f107 030c 	add.w	r3, r7, #12
 8001d08:	4413      	add	r3, r2
 8001d0a:	4913      	ldr	r1, [pc, #76]	@ (8001d58 <Task_dataSend_BLT+0x170>)
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	460b      	mov	r3, r1
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	8013      	strh	r3, [r2, #0]

			  HAL_UART_Transmit(&huart1, (uint8_t*)temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fac9 	bl	80002b0 <strlen>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	f107 010c 	add.w	r1, r7, #12
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2a:	480c      	ldr	r0, [pc, #48]	@ (8001d5c <Task_dataSend_BLT+0x174>)
 8001d2c:	f003 fa9e 	bl	800526c <HAL_UART_Transmit>
			  osDelay(4); // delay send message
 8001d30:	2004      	movs	r0, #4
 8001d32:	f004 fbc1 	bl	80064b8 <osDelay>
	  }
    osDelay(1);
 8001d36:	2001      	movs	r0, #1
 8001d38:	f004 fbbe 	bl	80064b8 <osDelay>
	  if(isToggled){
 8001d3c:	e758      	b.n	8001bf0 <Task_dataSend_BLT+0x8>
 8001d3e:	bf00      	nop
 8001d40:	2000030d 	.word	0x2000030d
 8001d44:	200002f8 	.word	0x200002f8
 8001d48:	20000304 	.word	0x20000304
 8001d4c:	0800c594 	.word	0x0800c594
 8001d50:	0800c50c 	.word	0x0800c50c
 8001d54:	0800c59c 	.word	0x0800c59c
 8001d58:	0800c52c 	.word	0x0800c52c
 8001d5c:	20000248 	.word	0x20000248

08001d60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a04      	ldr	r2, [pc, #16]	@ (8001d80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d101      	bne.n	8001d76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d72:	f000 fad5 	bl	8002320 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40010000 	.word	0x40010000

08001d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d88:	b672      	cpsid	i
}
 8001d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <Error_Handler+0x8>

08001d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	4b12      	ldr	r3, [pc, #72]	@ (8001de4 <HAL_MspInit+0x54>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9e:	4a11      	ldr	r2, [pc, #68]	@ (8001de4 <HAL_MspInit+0x54>)
 8001da0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001da4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001da6:	4b0f      	ldr	r3, [pc, #60]	@ (8001de4 <HAL_MspInit+0x54>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001daa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	603b      	str	r3, [r7, #0]
 8001db6:	4b0b      	ldr	r3, [pc, #44]	@ (8001de4 <HAL_MspInit+0x54>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dba:	4a0a      	ldr	r2, [pc, #40]	@ (8001de4 <HAL_MspInit+0x54>)
 8001dbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dc2:	4b08      	ldr	r3, [pc, #32]	@ (8001de4 <HAL_MspInit+0x54>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	210f      	movs	r1, #15
 8001dd2:	f06f 0001 	mvn.w	r0, #1
 8001dd6:	f000 fb9f 	bl	8002518 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800

08001de8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	@ 0x28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a19      	ldr	r2, [pc, #100]	@ (8001e6c <HAL_I2C_MspInit+0x84>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d12c      	bne.n	8001e64 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	4b18      	ldr	r3, [pc, #96]	@ (8001e70 <HAL_I2C_MspInit+0x88>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	4a17      	ldr	r2, [pc, #92]	@ (8001e70 <HAL_I2C_MspInit+0x88>)
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1a:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <HAL_I2C_MspInit+0x88>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e26:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e2c:	2312      	movs	r3, #18
 8001e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e34:	2303      	movs	r3, #3
 8001e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e38:	2304      	movs	r3, #4
 8001e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	4619      	mov	r1, r3
 8001e42:	480c      	ldr	r0, [pc, #48]	@ (8001e74 <HAL_I2C_MspInit+0x8c>)
 8001e44:	f000 ff0e 	bl	8002c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	4b08      	ldr	r3, [pc, #32]	@ (8001e70 <HAL_I2C_MspInit+0x88>)
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e50:	4a07      	ldr	r2, [pc, #28]	@ (8001e70 <HAL_I2C_MspInit+0x88>)
 8001e52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e56:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e58:	4b05      	ldr	r3, [pc, #20]	@ (8001e70 <HAL_I2C_MspInit+0x88>)
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e64:	bf00      	nop
 8001e66:	3728      	adds	r7, #40	@ 0x28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40005400 	.word	0x40005400
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40020400 	.word	0x40020400

08001e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08a      	sub	sp, #40	@ 0x28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a34      	ldr	r2, [pc, #208]	@ (8001f68 <HAL_UART_MspInit+0xf0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d162      	bne.n	8001f60 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	4b33      	ldr	r3, [pc, #204]	@ (8001f6c <HAL_UART_MspInit+0xf4>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea2:	4a32      	ldr	r2, [pc, #200]	@ (8001f6c <HAL_UART_MspInit+0xf4>)
 8001ea4:	f043 0310 	orr.w	r3, r3, #16
 8001ea8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eaa:	4b30      	ldr	r3, [pc, #192]	@ (8001f6c <HAL_UART_MspInit+0xf4>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	4b2c      	ldr	r3, [pc, #176]	@ (8001f6c <HAL_UART_MspInit+0xf4>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	4a2b      	ldr	r2, [pc, #172]	@ (8001f6c <HAL_UART_MspInit+0xf4>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec6:	4b29      	ldr	r3, [pc, #164]	@ (8001f6c <HAL_UART_MspInit+0xf4>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ed2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ee4:	2307      	movs	r3, #7
 8001ee6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	4619      	mov	r1, r3
 8001eee:	4820      	ldr	r0, [pc, #128]	@ (8001f70 <HAL_UART_MspInit+0xf8>)
 8001ef0:	f000 feb8 	bl	8002c64 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f74 <HAL_UART_MspInit+0xfc>)
 8001ef6:	4a20      	ldr	r2, [pc, #128]	@ (8001f78 <HAL_UART_MspInit+0x100>)
 8001ef8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001efa:	4b1e      	ldr	r3, [pc, #120]	@ (8001f74 <HAL_UART_MspInit+0xfc>)
 8001efc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f00:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f02:	4b1c      	ldr	r3, [pc, #112]	@ (8001f74 <HAL_UART_MspInit+0xfc>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f08:	4b1a      	ldr	r3, [pc, #104]	@ (8001f74 <HAL_UART_MspInit+0xfc>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f0e:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <HAL_UART_MspInit+0xfc>)
 8001f10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f14:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f16:	4b17      	ldr	r3, [pc, #92]	@ (8001f74 <HAL_UART_MspInit+0xfc>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f1c:	4b15      	ldr	r3, [pc, #84]	@ (8001f74 <HAL_UART_MspInit+0xfc>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001f22:	4b14      	ldr	r3, [pc, #80]	@ (8001f74 <HAL_UART_MspInit+0xfc>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f28:	4b12      	ldr	r3, [pc, #72]	@ (8001f74 <HAL_UART_MspInit+0xfc>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f2e:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <HAL_UART_MspInit+0xfc>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001f34:	480f      	ldr	r0, [pc, #60]	@ (8001f74 <HAL_UART_MspInit+0xfc>)
 8001f36:	f000 fb19 	bl	800256c <HAL_DMA_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001f40:	f7ff ff20 	bl	8001d84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a0b      	ldr	r2, [pc, #44]	@ (8001f74 <HAL_UART_MspInit+0xfc>)
 8001f48:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f74 <HAL_UART_MspInit+0xfc>)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001f50:	2200      	movs	r2, #0
 8001f52:	2105      	movs	r1, #5
 8001f54:	2025      	movs	r0, #37	@ 0x25
 8001f56:	f000 fadf 	bl	8002518 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f5a:	2025      	movs	r0, #37	@ 0x25
 8001f5c:	f000 faf8 	bl	8002550 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001f60:	bf00      	nop
 8001f62:	3728      	adds	r7, #40	@ 0x28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40011000 	.word	0x40011000
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40020000 	.word	0x40020000
 8001f74:	20000290 	.word	0x20000290
 8001f78:	40026440 	.word	0x40026440

08001f7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08c      	sub	sp, #48	@ 0x30
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	4b2f      	ldr	r3, [pc, #188]	@ (8002050 <HAL_InitTick+0xd4>)
 8001f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f94:	4a2e      	ldr	r2, [pc, #184]	@ (8002050 <HAL_InitTick+0xd4>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f9c:	4b2c      	ldr	r3, [pc, #176]	@ (8002050 <HAL_InitTick+0xd4>)
 8001f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fa8:	f107 020c 	add.w	r2, r7, #12
 8001fac:	f107 0310 	add.w	r3, r7, #16
 8001fb0:	4611      	mov	r1, r2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f002 f968 	bl	8004288 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001fb8:	f002 f952 	bl	8004260 <HAL_RCC_GetPCLK2Freq>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fc4:	4a23      	ldr	r2, [pc, #140]	@ (8002054 <HAL_InitTick+0xd8>)
 8001fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fca:	0c9b      	lsrs	r3, r3, #18
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001fd0:	4b21      	ldr	r3, [pc, #132]	@ (8002058 <HAL_InitTick+0xdc>)
 8001fd2:	4a22      	ldr	r2, [pc, #136]	@ (800205c <HAL_InitTick+0xe0>)
 8001fd4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001fd6:	4b20      	ldr	r3, [pc, #128]	@ (8002058 <HAL_InitTick+0xdc>)
 8001fd8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fdc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001fde:	4a1e      	ldr	r2, [pc, #120]	@ (8002058 <HAL_InitTick+0xdc>)
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8002058 <HAL_InitTick+0xdc>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fea:	4b1b      	ldr	r3, [pc, #108]	@ (8002058 <HAL_InitTick+0xdc>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff0:	4b19      	ldr	r3, [pc, #100]	@ (8002058 <HAL_InitTick+0xdc>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001ff6:	4818      	ldr	r0, [pc, #96]	@ (8002058 <HAL_InitTick+0xdc>)
 8001ff8:	f002 fe46 	bl	8004c88 <HAL_TIM_Base_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002002:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002006:	2b00      	cmp	r3, #0
 8002008:	d11b      	bne.n	8002042 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800200a:	4813      	ldr	r0, [pc, #76]	@ (8002058 <HAL_InitTick+0xdc>)
 800200c:	f002 fe96 	bl	8004d3c <HAL_TIM_Base_Start_IT>
 8002010:	4603      	mov	r3, r0
 8002012:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002016:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800201a:	2b00      	cmp	r3, #0
 800201c:	d111      	bne.n	8002042 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800201e:	2019      	movs	r0, #25
 8002020:	f000 fa96 	bl	8002550 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b0f      	cmp	r3, #15
 8002028:	d808      	bhi.n	800203c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800202a:	2200      	movs	r2, #0
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	2019      	movs	r0, #25
 8002030:	f000 fa72 	bl	8002518 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002034:	4a0a      	ldr	r2, [pc, #40]	@ (8002060 <HAL_InitTick+0xe4>)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	e002      	b.n	8002042 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002042:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002046:	4618      	mov	r0, r3
 8002048:	3730      	adds	r7, #48	@ 0x30
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800
 8002054:	431bde83 	.word	0x431bde83
 8002058:	20000310 	.word	0x20000310
 800205c:	40010000 	.word	0x40010000
 8002060:	20000004 	.word	0x20000004

08002064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002068:	bf00      	nop
 800206a:	e7fd      	b.n	8002068 <NMI_Handler+0x4>

0800206c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002070:	bf00      	nop
 8002072:	e7fd      	b.n	8002070 <HardFault_Handler+0x4>

08002074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002078:	bf00      	nop
 800207a:	e7fd      	b.n	8002078 <MemManage_Handler+0x4>

0800207c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002080:	bf00      	nop
 8002082:	e7fd      	b.n	8002080 <BusFault_Handler+0x4>

08002084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002088:	bf00      	nop
 800208a:	e7fd      	b.n	8002088 <UsageFault_Handler+0x4>

0800208c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020a0:	4802      	ldr	r0, [pc, #8]	@ (80020ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80020a2:	f002 febb 	bl	8004e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000310 	.word	0x20000310

080020b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020b4:	4802      	ldr	r0, [pc, #8]	@ (80020c0 <USART1_IRQHandler+0x10>)
 80020b6:	f003 f989 	bl	80053cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000248 	.word	0x20000248

080020c4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80020c8:	4802      	ldr	r0, [pc, #8]	@ (80020d4 <DMA2_Stream2_IRQHandler+0x10>)
 80020ca:	f000 fb8f 	bl	80027ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000290 	.word	0x20000290

080020d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return 1;
 80020dc:	2301      	movs	r3, #1
}
 80020de:	4618      	mov	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <_kill>:

int _kill(int pid, int sig)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020f2:	f008 fa2b 	bl	800a54c <__errno>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2216      	movs	r2, #22
 80020fa:	601a      	str	r2, [r3, #0]
  return -1;
 80020fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <_exit>:

void _exit (int status)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002110:	f04f 31ff 	mov.w	r1, #4294967295
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff ffe7 	bl	80020e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800211a:	bf00      	nop
 800211c:	e7fd      	b.n	800211a <_exit+0x12>

0800211e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b086      	sub	sp, #24
 8002122:	af00      	add	r7, sp, #0
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	e00a      	b.n	8002146 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002130:	f3af 8000 	nop.w
 8002134:	4601      	mov	r1, r0
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	60ba      	str	r2, [r7, #8]
 800213c:	b2ca      	uxtb	r2, r1
 800213e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	3301      	adds	r3, #1
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	429a      	cmp	r2, r3
 800214c:	dbf0      	blt.n	8002130 <_read+0x12>
  }

  return len;
 800214e:	687b      	ldr	r3, [r7, #4]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	e009      	b.n	800217e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	60ba      	str	r2, [r7, #8]
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	3301      	adds	r3, #1
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	429a      	cmp	r2, r3
 8002184:	dbf1      	blt.n	800216a <_write+0x12>
  }
  return len;
 8002186:	687b      	ldr	r3, [r7, #4]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <_close>:

int _close(int file)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002198:	f04f 33ff 	mov.w	r3, #4294967295
}
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021b8:	605a      	str	r2, [r3, #4]
  return 0;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <_isatty>:

int _isatty(int file)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021d0:	2301      	movs	r3, #1
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021de:	b480      	push	{r7}
 80021e0:	b085      	sub	sp, #20
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002200:	4a14      	ldr	r2, [pc, #80]	@ (8002254 <_sbrk+0x5c>)
 8002202:	4b15      	ldr	r3, [pc, #84]	@ (8002258 <_sbrk+0x60>)
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800220c:	4b13      	ldr	r3, [pc, #76]	@ (800225c <_sbrk+0x64>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002214:	4b11      	ldr	r3, [pc, #68]	@ (800225c <_sbrk+0x64>)
 8002216:	4a12      	ldr	r2, [pc, #72]	@ (8002260 <_sbrk+0x68>)
 8002218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800221a:	4b10      	ldr	r3, [pc, #64]	@ (800225c <_sbrk+0x64>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	429a      	cmp	r2, r3
 8002226:	d207      	bcs.n	8002238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002228:	f008 f990 	bl	800a54c <__errno>
 800222c:	4603      	mov	r3, r0
 800222e:	220c      	movs	r2, #12
 8002230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
 8002236:	e009      	b.n	800224c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002238:	4b08      	ldr	r3, [pc, #32]	@ (800225c <_sbrk+0x64>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800223e:	4b07      	ldr	r3, [pc, #28]	@ (800225c <_sbrk+0x64>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	4a05      	ldr	r2, [pc, #20]	@ (800225c <_sbrk+0x64>)
 8002248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800224a:	68fb      	ldr	r3, [r7, #12]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20020000 	.word	0x20020000
 8002258:	00000400 	.word	0x00000400
 800225c:	20000358 	.word	0x20000358
 8002260:	20004e98 	.word	0x20004e98

08002264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002268:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <SystemInit+0x20>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226e:	4a05      	ldr	r2, [pc, #20]	@ (8002284 <SystemInit+0x20>)
 8002270:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002274:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002288:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022c0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800228c:	f7ff ffea 	bl	8002264 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002290:	480c      	ldr	r0, [pc, #48]	@ (80022c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002292:	490d      	ldr	r1, [pc, #52]	@ (80022c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002294:	4a0d      	ldr	r2, [pc, #52]	@ (80022cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002298:	e002      	b.n	80022a0 <LoopCopyDataInit>

0800229a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800229a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800229c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800229e:	3304      	adds	r3, #4

080022a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a4:	d3f9      	bcc.n	800229a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022a6:	4a0a      	ldr	r2, [pc, #40]	@ (80022d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022a8:	4c0a      	ldr	r4, [pc, #40]	@ (80022d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022ac:	e001      	b.n	80022b2 <LoopFillZerobss>

080022ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b0:	3204      	adds	r2, #4

080022b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b4:	d3fb      	bcc.n	80022ae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80022b6:	f008 f94f 	bl	800a558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ba:	f7fe ffb7 	bl	800122c <main>
  bx  lr    
 80022be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022c8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80022cc:	0800c9d0 	.word	0x0800c9d0
  ldr r2, =_sbss
 80022d0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80022d4:	20004e94 	.word	0x20004e94

080022d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022d8:	e7fe      	b.n	80022d8 <ADC_IRQHandler>
	...

080022dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022e0:	4b0e      	ldr	r3, [pc, #56]	@ (800231c <HAL_Init+0x40>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0d      	ldr	r2, [pc, #52]	@ (800231c <HAL_Init+0x40>)
 80022e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022ec:	4b0b      	ldr	r3, [pc, #44]	@ (800231c <HAL_Init+0x40>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0a      	ldr	r2, [pc, #40]	@ (800231c <HAL_Init+0x40>)
 80022f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022f8:	4b08      	ldr	r3, [pc, #32]	@ (800231c <HAL_Init+0x40>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a07      	ldr	r2, [pc, #28]	@ (800231c <HAL_Init+0x40>)
 80022fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002302:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002304:	2003      	movs	r0, #3
 8002306:	f000 f8fc 	bl	8002502 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800230a:	200f      	movs	r0, #15
 800230c:	f7ff fe36 	bl	8001f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002310:	f7ff fd3e 	bl	8001d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40023c00 	.word	0x40023c00

08002320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002324:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <HAL_IncTick+0x20>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	4b06      	ldr	r3, [pc, #24]	@ (8002344 <HAL_IncTick+0x24>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4413      	add	r3, r2
 8002330:	4a04      	ldr	r2, [pc, #16]	@ (8002344 <HAL_IncTick+0x24>)
 8002332:	6013      	str	r3, [r2, #0]
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	20000008 	.word	0x20000008
 8002344:	2000035c 	.word	0x2000035c

08002348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return uwTick;
 800234c:	4b03      	ldr	r3, [pc, #12]	@ (800235c <HAL_GetTick+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	2000035c 	.word	0x2000035c

08002360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002368:	f7ff ffee 	bl	8002348 <HAL_GetTick>
 800236c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d005      	beq.n	8002386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800237a:	4b0a      	ldr	r3, [pc, #40]	@ (80023a4 <HAL_Delay+0x44>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4413      	add	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002386:	bf00      	nop
 8002388:	f7ff ffde 	bl	8002348 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	429a      	cmp	r2, r3
 8002396:	d8f7      	bhi.n	8002388 <HAL_Delay+0x28>
  {
  }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000008 	.word	0x20000008

080023a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b8:	4b0c      	ldr	r3, [pc, #48]	@ (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023c4:	4013      	ands	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023da:	4a04      	ldr	r2, [pc, #16]	@ (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	60d3      	str	r3, [r2, #12]
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f4:	4b04      	ldr	r3, [pc, #16]	@ (8002408 <__NVIC_GetPriorityGrouping+0x18>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	0a1b      	lsrs	r3, r3, #8
 80023fa:	f003 0307 	and.w	r3, r3, #7
}
 80023fe:	4618      	mov	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	2b00      	cmp	r3, #0
 800241c:	db0b      	blt.n	8002436 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	f003 021f 	and.w	r2, r3, #31
 8002424:	4907      	ldr	r1, [pc, #28]	@ (8002444 <__NVIC_EnableIRQ+0x38>)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	2001      	movs	r0, #1
 800242e:	fa00 f202 	lsl.w	r2, r0, r2
 8002432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000e100 	.word	0xe000e100

08002448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	6039      	str	r1, [r7, #0]
 8002452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002458:	2b00      	cmp	r3, #0
 800245a:	db0a      	blt.n	8002472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	b2da      	uxtb	r2, r3
 8002460:	490c      	ldr	r1, [pc, #48]	@ (8002494 <__NVIC_SetPriority+0x4c>)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	0112      	lsls	r2, r2, #4
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	440b      	add	r3, r1
 800246c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002470:	e00a      	b.n	8002488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4908      	ldr	r1, [pc, #32]	@ (8002498 <__NVIC_SetPriority+0x50>)
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	3b04      	subs	r3, #4
 8002480:	0112      	lsls	r2, r2, #4
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	440b      	add	r3, r1
 8002486:	761a      	strb	r2, [r3, #24]
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000e100 	.word	0xe000e100
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800249c:	b480      	push	{r7}
 800249e:	b089      	sub	sp, #36	@ 0x24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f1c3 0307 	rsb	r3, r3, #7
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	bf28      	it	cs
 80024ba:	2304      	movcs	r3, #4
 80024bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3304      	adds	r3, #4
 80024c2:	2b06      	cmp	r3, #6
 80024c4:	d902      	bls.n	80024cc <NVIC_EncodePriority+0x30>
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3b03      	subs	r3, #3
 80024ca:	e000      	b.n	80024ce <NVIC_EncodePriority+0x32>
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d0:	f04f 32ff 	mov.w	r2, #4294967295
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43da      	mvns	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	401a      	ands	r2, r3
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e4:	f04f 31ff 	mov.w	r1, #4294967295
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	fa01 f303 	lsl.w	r3, r1, r3
 80024ee:	43d9      	mvns	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f4:	4313      	orrs	r3, r2
         );
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3724      	adds	r7, #36	@ 0x24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff ff4c 	bl	80023a8 <__NVIC_SetPriorityGrouping>
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
 8002524:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800252a:	f7ff ff61 	bl	80023f0 <__NVIC_GetPriorityGrouping>
 800252e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	68b9      	ldr	r1, [r7, #8]
 8002534:	6978      	ldr	r0, [r7, #20]
 8002536:	f7ff ffb1 	bl	800249c <NVIC_EncodePriority>
 800253a:	4602      	mov	r2, r0
 800253c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002540:	4611      	mov	r1, r2
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff ff80 	bl	8002448 <__NVIC_SetPriority>
}
 8002548:	bf00      	nop
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800255a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff ff54 	bl	800240c <__NVIC_EnableIRQ>
}
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002578:	f7ff fee6 	bl	8002348 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e099      	b.n	80026bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0201 	bic.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a8:	e00f      	b.n	80025ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025aa:	f7ff fecd 	bl	8002348 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b05      	cmp	r3, #5
 80025b6:	d908      	bls.n	80025ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2220      	movs	r2, #32
 80025bc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2203      	movs	r2, #3
 80025c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e078      	b.n	80026bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1e8      	bne.n	80025aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	4b38      	ldr	r3, [pc, #224]	@ (80026c4 <HAL_DMA_Init+0x158>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002602:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800260e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	4313      	orrs	r3, r2
 800261a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002620:	2b04      	cmp	r3, #4
 8002622:	d107      	bne.n	8002634 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262c:	4313      	orrs	r3, r2
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4313      	orrs	r3, r2
 8002632:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f023 0307 	bic.w	r3, r3, #7
 800264a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	4313      	orrs	r3, r2
 8002654:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265a:	2b04      	cmp	r3, #4
 800265c:	d117      	bne.n	800268e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	4313      	orrs	r3, r2
 8002666:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00e      	beq.n	800268e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fa7b 	bl	8002b6c <DMA_CheckFifoParam>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2240      	movs	r2, #64	@ 0x40
 8002680:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800268a:	2301      	movs	r3, #1
 800268c:	e016      	b.n	80026bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fa32 	bl	8002b00 <DMA_CalcBaseAndBitshift>
 800269c:	4603      	mov	r3, r0
 800269e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a4:	223f      	movs	r2, #63	@ 0x3f
 80026a6:	409a      	lsls	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	f010803f 	.word	0xf010803f

080026c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026d6:	f7ff fe37 	bl	8002348 <HAL_GetTick>
 80026da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d008      	beq.n	80026fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2280      	movs	r2, #128	@ 0x80
 80026ec:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e052      	b.n	80027a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0216 	bic.w	r2, r2, #22
 8002708:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695a      	ldr	r2, [r3, #20]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002718:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	2b00      	cmp	r3, #0
 8002720:	d103      	bne.n	800272a <HAL_DMA_Abort+0x62>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002726:	2b00      	cmp	r3, #0
 8002728:	d007      	beq.n	800273a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0208 	bic.w	r2, r2, #8
 8002738:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0201 	bic.w	r2, r2, #1
 8002748:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800274a:	e013      	b.n	8002774 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800274c:	f7ff fdfc 	bl	8002348 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b05      	cmp	r3, #5
 8002758:	d90c      	bls.n	8002774 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2220      	movs	r2, #32
 800275e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2203      	movs	r2, #3
 8002764:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e015      	b.n	80027a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1e4      	bne.n	800274c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002786:	223f      	movs	r2, #63	@ 0x3f
 8002788:	409a      	lsls	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d004      	beq.n	80027c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2280      	movs	r2, #128	@ 0x80
 80027c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e00c      	b.n	80027e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2205      	movs	r2, #5
 80027ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0201 	bic.w	r2, r2, #1
 80027dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027f8:	4b8e      	ldr	r3, [pc, #568]	@ (8002a34 <HAL_DMA_IRQHandler+0x248>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a8e      	ldr	r2, [pc, #568]	@ (8002a38 <HAL_DMA_IRQHandler+0x24c>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	0a9b      	lsrs	r3, r3, #10
 8002804:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800280a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002816:	2208      	movs	r2, #8
 8002818:	409a      	lsls	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d01a      	beq.n	8002858 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d013      	beq.n	8002858 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0204 	bic.w	r2, r2, #4
 800283e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002844:	2208      	movs	r2, #8
 8002846:	409a      	lsls	r2, r3
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002850:	f043 0201 	orr.w	r2, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285c:	2201      	movs	r2, #1
 800285e:	409a      	lsls	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4013      	ands	r3, r2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d012      	beq.n	800288e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00b      	beq.n	800288e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287a:	2201      	movs	r2, #1
 800287c:	409a      	lsls	r2, r3
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002886:	f043 0202 	orr.w	r2, r3, #2
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002892:	2204      	movs	r2, #4
 8002894:	409a      	lsls	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4013      	ands	r3, r2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d012      	beq.n	80028c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00b      	beq.n	80028c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b0:	2204      	movs	r2, #4
 80028b2:	409a      	lsls	r2, r3
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028bc:	f043 0204 	orr.w	r2, r3, #4
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c8:	2210      	movs	r2, #16
 80028ca:	409a      	lsls	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d043      	beq.n	800295c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d03c      	beq.n	800295c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e6:	2210      	movs	r2, #16
 80028e8:	409a      	lsls	r2, r3
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d018      	beq.n	800292e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d108      	bne.n	800291c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	2b00      	cmp	r3, #0
 8002910:	d024      	beq.n	800295c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	4798      	blx	r3
 800291a:	e01f      	b.n	800295c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002920:	2b00      	cmp	r3, #0
 8002922:	d01b      	beq.n	800295c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	4798      	blx	r3
 800292c:	e016      	b.n	800295c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002938:	2b00      	cmp	r3, #0
 800293a:	d107      	bne.n	800294c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0208 	bic.w	r2, r2, #8
 800294a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002960:	2220      	movs	r2, #32
 8002962:	409a      	lsls	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4013      	ands	r3, r2
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 808f 	beq.w	8002a8c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 8087 	beq.w	8002a8c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002982:	2220      	movs	r2, #32
 8002984:	409a      	lsls	r2, r3
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b05      	cmp	r3, #5
 8002994:	d136      	bne.n	8002a04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0216 	bic.w	r2, r2, #22
 80029a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	695a      	ldr	r2, [r3, #20]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d103      	bne.n	80029c6 <HAL_DMA_IRQHandler+0x1da>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d007      	beq.n	80029d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0208 	bic.w	r2, r2, #8
 80029d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029da:	223f      	movs	r2, #63	@ 0x3f
 80029dc:	409a      	lsls	r2, r3
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d07e      	beq.n	8002af8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	4798      	blx	r3
        }
        return;
 8002a02:	e079      	b.n	8002af8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d01d      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10d      	bne.n	8002a3c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d031      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	4798      	blx	r3
 8002a30:	e02c      	b.n	8002a8c <HAL_DMA_IRQHandler+0x2a0>
 8002a32:	bf00      	nop
 8002a34:	20000000 	.word	0x20000000
 8002a38:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d023      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	4798      	blx	r3
 8002a4c:	e01e      	b.n	8002a8c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10f      	bne.n	8002a7c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0210 	bic.w	r2, r2, #16
 8002a6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d032      	beq.n	8002afa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d022      	beq.n	8002ae6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2205      	movs	r2, #5
 8002aa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0201 	bic.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	3301      	adds	r3, #1
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d307      	bcc.n	8002ad4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f2      	bne.n	8002ab8 <HAL_DMA_IRQHandler+0x2cc>
 8002ad2:	e000      	b.n	8002ad6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ad4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	4798      	blx	r3
 8002af6:	e000      	b.n	8002afa <HAL_DMA_IRQHandler+0x30e>
        return;
 8002af8:	bf00      	nop
    }
  }
}
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	3b10      	subs	r3, #16
 8002b10:	4a14      	ldr	r2, [pc, #80]	@ (8002b64 <DMA_CalcBaseAndBitshift+0x64>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	091b      	lsrs	r3, r3, #4
 8002b18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b1a:	4a13      	ldr	r2, [pc, #76]	@ (8002b68 <DMA_CalcBaseAndBitshift+0x68>)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4413      	add	r3, r2
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d909      	bls.n	8002b42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b36:	f023 0303 	bic.w	r3, r3, #3
 8002b3a:	1d1a      	adds	r2, r3, #4
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b40:	e007      	b.n	8002b52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b4a:	f023 0303 	bic.w	r3, r3, #3
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	aaaaaaab 	.word	0xaaaaaaab
 8002b68:	0800c648 	.word	0x0800c648

08002b6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d11f      	bne.n	8002bc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d856      	bhi.n	8002c3a <DMA_CheckFifoParam+0xce>
 8002b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002b94 <DMA_CheckFifoParam+0x28>)
 8002b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b92:	bf00      	nop
 8002b94:	08002ba5 	.word	0x08002ba5
 8002b98:	08002bb7 	.word	0x08002bb7
 8002b9c:	08002ba5 	.word	0x08002ba5
 8002ba0:	08002c3b 	.word	0x08002c3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d046      	beq.n	8002c3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb4:	e043      	b.n	8002c3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002bbe:	d140      	bne.n	8002c42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc4:	e03d      	b.n	8002c42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bce:	d121      	bne.n	8002c14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d837      	bhi.n	8002c46 <DMA_CheckFifoParam+0xda>
 8002bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8002bdc <DMA_CheckFifoParam+0x70>)
 8002bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bdc:	08002bed 	.word	0x08002bed
 8002be0:	08002bf3 	.word	0x08002bf3
 8002be4:	08002bed 	.word	0x08002bed
 8002be8:	08002c05 	.word	0x08002c05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf0:	e030      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d025      	beq.n	8002c4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c02:	e022      	b.n	8002c4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c08:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c0c:	d11f      	bne.n	8002c4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c12:	e01c      	b.n	8002c4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d903      	bls.n	8002c22 <DMA_CheckFifoParam+0xb6>
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d003      	beq.n	8002c28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c20:	e018      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
      break;
 8002c26:	e015      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00e      	beq.n	8002c52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
      break;
 8002c38:	e00b      	b.n	8002c52 <DMA_CheckFifoParam+0xe6>
      break;
 8002c3a:	bf00      	nop
 8002c3c:	e00a      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      break;
 8002c3e:	bf00      	nop
 8002c40:	e008      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      break;
 8002c42:	bf00      	nop
 8002c44:	e006      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      break;
 8002c46:	bf00      	nop
 8002c48:	e004      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      break;
 8002c4a:	bf00      	nop
 8002c4c:	e002      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c4e:	bf00      	nop
 8002c50:	e000      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      break;
 8002c52:	bf00      	nop
    }
  } 
  
  return status; 
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop

08002c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b089      	sub	sp, #36	@ 0x24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]
 8002c7e:	e165      	b.n	8002f4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c80:	2201      	movs	r2, #1
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	4013      	ands	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	f040 8154 	bne.w	8002f46 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d005      	beq.n	8002cb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d130      	bne.n	8002d18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cec:	2201      	movs	r2, #1
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	f003 0201 	and.w	r2, r3, #1
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d017      	beq.n	8002d54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	2203      	movs	r2, #3
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 0303 	and.w	r3, r3, #3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d123      	bne.n	8002da8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	08da      	lsrs	r2, r3, #3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3208      	adds	r2, #8
 8002d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	220f      	movs	r2, #15
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4013      	ands	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	08da      	lsrs	r2, r3, #3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3208      	adds	r2, #8
 8002da2:	69b9      	ldr	r1, [r7, #24]
 8002da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	2203      	movs	r2, #3
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 0203 	and.w	r2, r3, #3
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 80ae 	beq.w	8002f46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	4b5d      	ldr	r3, [pc, #372]	@ (8002f64 <HAL_GPIO_Init+0x300>)
 8002df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df2:	4a5c      	ldr	r2, [pc, #368]	@ (8002f64 <HAL_GPIO_Init+0x300>)
 8002df4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dfa:	4b5a      	ldr	r3, [pc, #360]	@ (8002f64 <HAL_GPIO_Init+0x300>)
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e06:	4a58      	ldr	r2, [pc, #352]	@ (8002f68 <HAL_GPIO_Init+0x304>)
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	089b      	lsrs	r3, r3, #2
 8002e0c:	3302      	adds	r3, #2
 8002e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	220f      	movs	r2, #15
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a4f      	ldr	r2, [pc, #316]	@ (8002f6c <HAL_GPIO_Init+0x308>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d025      	beq.n	8002e7e <HAL_GPIO_Init+0x21a>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a4e      	ldr	r2, [pc, #312]	@ (8002f70 <HAL_GPIO_Init+0x30c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d01f      	beq.n	8002e7a <HAL_GPIO_Init+0x216>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4d      	ldr	r2, [pc, #308]	@ (8002f74 <HAL_GPIO_Init+0x310>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d019      	beq.n	8002e76 <HAL_GPIO_Init+0x212>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a4c      	ldr	r2, [pc, #304]	@ (8002f78 <HAL_GPIO_Init+0x314>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d013      	beq.n	8002e72 <HAL_GPIO_Init+0x20e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a4b      	ldr	r2, [pc, #300]	@ (8002f7c <HAL_GPIO_Init+0x318>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d00d      	beq.n	8002e6e <HAL_GPIO_Init+0x20a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a4a      	ldr	r2, [pc, #296]	@ (8002f80 <HAL_GPIO_Init+0x31c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d007      	beq.n	8002e6a <HAL_GPIO_Init+0x206>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a49      	ldr	r2, [pc, #292]	@ (8002f84 <HAL_GPIO_Init+0x320>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d101      	bne.n	8002e66 <HAL_GPIO_Init+0x202>
 8002e62:	2306      	movs	r3, #6
 8002e64:	e00c      	b.n	8002e80 <HAL_GPIO_Init+0x21c>
 8002e66:	2307      	movs	r3, #7
 8002e68:	e00a      	b.n	8002e80 <HAL_GPIO_Init+0x21c>
 8002e6a:	2305      	movs	r3, #5
 8002e6c:	e008      	b.n	8002e80 <HAL_GPIO_Init+0x21c>
 8002e6e:	2304      	movs	r3, #4
 8002e70:	e006      	b.n	8002e80 <HAL_GPIO_Init+0x21c>
 8002e72:	2303      	movs	r3, #3
 8002e74:	e004      	b.n	8002e80 <HAL_GPIO_Init+0x21c>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e002      	b.n	8002e80 <HAL_GPIO_Init+0x21c>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <HAL_GPIO_Init+0x21c>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	69fa      	ldr	r2, [r7, #28]
 8002e82:	f002 0203 	and.w	r2, r2, #3
 8002e86:	0092      	lsls	r2, r2, #2
 8002e88:	4093      	lsls	r3, r2
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e90:	4935      	ldr	r1, [pc, #212]	@ (8002f68 <HAL_GPIO_Init+0x304>)
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	089b      	lsrs	r3, r3, #2
 8002e96:	3302      	adds	r3, #2
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e9e:	4b3a      	ldr	r3, [pc, #232]	@ (8002f88 <HAL_GPIO_Init+0x324>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ec2:	4a31      	ldr	r2, [pc, #196]	@ (8002f88 <HAL_GPIO_Init+0x324>)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8002f88 <HAL_GPIO_Init+0x324>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eec:	4a26      	ldr	r2, [pc, #152]	@ (8002f88 <HAL_GPIO_Init+0x324>)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ef2:	4b25      	ldr	r3, [pc, #148]	@ (8002f88 <HAL_GPIO_Init+0x324>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f16:	4a1c      	ldr	r2, [pc, #112]	@ (8002f88 <HAL_GPIO_Init+0x324>)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002f88 <HAL_GPIO_Init+0x324>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f40:	4a11      	ldr	r2, [pc, #68]	@ (8002f88 <HAL_GPIO_Init+0x324>)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	61fb      	str	r3, [r7, #28]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	2b0f      	cmp	r3, #15
 8002f50:	f67f ae96 	bls.w	8002c80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	3724      	adds	r7, #36	@ 0x24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40013800 	.word	0x40013800
 8002f6c:	40020000 	.word	0x40020000
 8002f70:	40020400 	.word	0x40020400
 8002f74:	40020800 	.word	0x40020800
 8002f78:	40020c00 	.word	0x40020c00
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40021400 	.word	0x40021400
 8002f84:	40021800 	.word	0x40021800
 8002f88:	40013c00 	.word	0x40013c00

08002f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	807b      	strh	r3, [r7, #2]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f9c:	787b      	ldrb	r3, [r7, #1]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fa2:	887a      	ldrh	r2, [r7, #2]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fa8:	e003      	b.n	8002fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002faa:	887b      	ldrh	r3, [r7, #2]
 8002fac:	041a      	lsls	r2, r3, #16
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	619a      	str	r2, [r3, #24]
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
	...

08002fc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e12b      	b.n	800322a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d106      	bne.n	8002fec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fe fefe 	bl	8001de8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2224      	movs	r2, #36	@ 0x24
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0201 	bic.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003012:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003022:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003024:	f001 f908 	bl	8004238 <HAL_RCC_GetPCLK1Freq>
 8003028:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	4a81      	ldr	r2, [pc, #516]	@ (8003234 <HAL_I2C_Init+0x274>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d807      	bhi.n	8003044 <HAL_I2C_Init+0x84>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4a80      	ldr	r2, [pc, #512]	@ (8003238 <HAL_I2C_Init+0x278>)
 8003038:	4293      	cmp	r3, r2
 800303a:	bf94      	ite	ls
 800303c:	2301      	movls	r3, #1
 800303e:	2300      	movhi	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	e006      	b.n	8003052 <HAL_I2C_Init+0x92>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4a7d      	ldr	r2, [pc, #500]	@ (800323c <HAL_I2C_Init+0x27c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	bf94      	ite	ls
 800304c:	2301      	movls	r3, #1
 800304e:	2300      	movhi	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e0e7      	b.n	800322a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4a78      	ldr	r2, [pc, #480]	@ (8003240 <HAL_I2C_Init+0x280>)
 800305e:	fba2 2303 	umull	r2, r3, r2, r3
 8003062:	0c9b      	lsrs	r3, r3, #18
 8003064:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	4a6a      	ldr	r2, [pc, #424]	@ (8003234 <HAL_I2C_Init+0x274>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d802      	bhi.n	8003094 <HAL_I2C_Init+0xd4>
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	3301      	adds	r3, #1
 8003092:	e009      	b.n	80030a8 <HAL_I2C_Init+0xe8>
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800309a:	fb02 f303 	mul.w	r3, r2, r3
 800309e:	4a69      	ldr	r2, [pc, #420]	@ (8003244 <HAL_I2C_Init+0x284>)
 80030a0:	fba2 2303 	umull	r2, r3, r2, r3
 80030a4:	099b      	lsrs	r3, r3, #6
 80030a6:	3301      	adds	r3, #1
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	430b      	orrs	r3, r1
 80030ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80030ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	495c      	ldr	r1, [pc, #368]	@ (8003234 <HAL_I2C_Init+0x274>)
 80030c4:	428b      	cmp	r3, r1
 80030c6:	d819      	bhi.n	80030fc <HAL_I2C_Init+0x13c>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1e59      	subs	r1, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030d6:	1c59      	adds	r1, r3, #1
 80030d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030dc:	400b      	ands	r3, r1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <HAL_I2C_Init+0x138>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	1e59      	subs	r1, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80030f0:	3301      	adds	r3, #1
 80030f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f6:	e051      	b.n	800319c <HAL_I2C_Init+0x1dc>
 80030f8:	2304      	movs	r3, #4
 80030fa:	e04f      	b.n	800319c <HAL_I2C_Init+0x1dc>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d111      	bne.n	8003128 <HAL_I2C_Init+0x168>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1e58      	subs	r0, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	440b      	add	r3, r1
 8003112:	fbb0 f3f3 	udiv	r3, r0, r3
 8003116:	3301      	adds	r3, #1
 8003118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	e012      	b.n	800314e <HAL_I2C_Init+0x18e>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1e58      	subs	r0, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6859      	ldr	r1, [r3, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	0099      	lsls	r1, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	fbb0 f3f3 	udiv	r3, r0, r3
 800313e:	3301      	adds	r3, #1
 8003140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003144:	2b00      	cmp	r3, #0
 8003146:	bf0c      	ite	eq
 8003148:	2301      	moveq	r3, #1
 800314a:	2300      	movne	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_I2C_Init+0x196>
 8003152:	2301      	movs	r3, #1
 8003154:	e022      	b.n	800319c <HAL_I2C_Init+0x1dc>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10e      	bne.n	800317c <HAL_I2C_Init+0x1bc>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1e58      	subs	r0, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6859      	ldr	r1, [r3, #4]
 8003166:	460b      	mov	r3, r1
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	440b      	add	r3, r1
 800316c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003170:	3301      	adds	r3, #1
 8003172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003176:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800317a:	e00f      	b.n	800319c <HAL_I2C_Init+0x1dc>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	1e58      	subs	r0, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6859      	ldr	r1, [r3, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	0099      	lsls	r1, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003192:	3301      	adds	r3, #1
 8003194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003198:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	6809      	ldr	r1, [r1, #0]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69da      	ldr	r2, [r3, #28]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6911      	ldr	r1, [r2, #16]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	68d2      	ldr	r2, [r2, #12]
 80031d6:	4311      	orrs	r1, r2
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	430b      	orrs	r3, r1
 80031de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	000186a0 	.word	0x000186a0
 8003238:	001e847f 	.word	0x001e847f
 800323c:	003d08ff 	.word	0x003d08ff
 8003240:	431bde83 	.word	0x431bde83
 8003244:	10624dd3 	.word	0x10624dd3

08003248 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af02      	add	r7, sp, #8
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	607a      	str	r2, [r7, #4]
 8003252:	461a      	mov	r2, r3
 8003254:	460b      	mov	r3, r1
 8003256:	817b      	strh	r3, [r7, #10]
 8003258:	4613      	mov	r3, r2
 800325a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800325c:	f7ff f874 	bl	8002348 <HAL_GetTick>
 8003260:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b20      	cmp	r3, #32
 800326c:	f040 80e0 	bne.w	8003430 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	2319      	movs	r3, #25
 8003276:	2201      	movs	r2, #1
 8003278:	4970      	ldr	r1, [pc, #448]	@ (800343c <HAL_I2C_Master_Transmit+0x1f4>)
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fc64 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003286:	2302      	movs	r3, #2
 8003288:	e0d3      	b.n	8003432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_I2C_Master_Transmit+0x50>
 8003294:	2302      	movs	r3, #2
 8003296:	e0cc      	b.n	8003432 <HAL_I2C_Master_Transmit+0x1ea>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d007      	beq.n	80032be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0201 	orr.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2221      	movs	r2, #33	@ 0x21
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2210      	movs	r2, #16
 80032da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	893a      	ldrh	r2, [r7, #8]
 80032ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4a50      	ldr	r2, [pc, #320]	@ (8003440 <HAL_I2C_Master_Transmit+0x1f8>)
 80032fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003300:	8979      	ldrh	r1, [r7, #10]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	6a3a      	ldr	r2, [r7, #32]
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 face 	bl	80038a8 <I2C_MasterRequestWrite>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e08d      	b.n	8003432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003316:	2300      	movs	r3, #0
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800332c:	e066      	b.n	80033fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	6a39      	ldr	r1, [r7, #32]
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 fd22 	bl	8003d7c <I2C_WaitOnTXEFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00d      	beq.n	800335a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	2b04      	cmp	r3, #4
 8003344:	d107      	bne.n	8003356 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003354:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e06b      	b.n	8003432 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335e:	781a      	ldrb	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003374:	b29b      	uxth	r3, r3
 8003376:	3b01      	subs	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003382:	3b01      	subs	r3, #1
 8003384:	b29a      	uxth	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b04      	cmp	r3, #4
 8003396:	d11b      	bne.n	80033d0 <HAL_I2C_Master_Transmit+0x188>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339c:	2b00      	cmp	r3, #0
 800339e:	d017      	beq.n	80033d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a4:	781a      	ldrb	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	6a39      	ldr	r1, [r7, #32]
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 fd19 	bl	8003e0c <I2C_WaitOnBTFFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00d      	beq.n	80033fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d107      	bne.n	80033f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e01a      	b.n	8003432 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003400:	2b00      	cmp	r3, #0
 8003402:	d194      	bne.n	800332e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800342c:	2300      	movs	r3, #0
 800342e:	e000      	b.n	8003432 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003430:	2302      	movs	r3, #2
  }
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	00100002 	.word	0x00100002
 8003440:	ffff0000 	.word	0xffff0000

08003444 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08c      	sub	sp, #48	@ 0x30
 8003448:	af02      	add	r7, sp, #8
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	607a      	str	r2, [r7, #4]
 800344e:	461a      	mov	r2, r3
 8003450:	460b      	mov	r3, r1
 8003452:	817b      	strh	r3, [r7, #10]
 8003454:	4613      	mov	r3, r2
 8003456:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003458:	f7fe ff76 	bl	8002348 <HAL_GetTick>
 800345c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b20      	cmp	r3, #32
 8003468:	f040 8217 	bne.w	800389a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800346c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	2319      	movs	r3, #25
 8003472:	2201      	movs	r2, #1
 8003474:	497c      	ldr	r1, [pc, #496]	@ (8003668 <HAL_I2C_Master_Receive+0x224>)
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 fb66 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003482:	2302      	movs	r3, #2
 8003484:	e20a      	b.n	800389c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_I2C_Master_Receive+0x50>
 8003490:	2302      	movs	r3, #2
 8003492:	e203      	b.n	800389c <HAL_I2C_Master_Receive+0x458>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d007      	beq.n	80034ba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 0201 	orr.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2222      	movs	r2, #34	@ 0x22
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2210      	movs	r2, #16
 80034d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	893a      	ldrh	r2, [r7, #8]
 80034ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4a5c      	ldr	r2, [pc, #368]	@ (800366c <HAL_I2C_Master_Receive+0x228>)
 80034fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034fc:	8979      	ldrh	r1, [r7, #10]
 80034fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003500:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 fa52 	bl	80039ac <I2C_MasterRequestRead>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e1c4      	b.n	800389c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003516:	2b00      	cmp	r3, #0
 8003518:	d113      	bne.n	8003542 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800351a:	2300      	movs	r3, #0
 800351c:	623b      	str	r3, [r7, #32]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	623b      	str	r3, [r7, #32]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	623b      	str	r3, [r7, #32]
 800352e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	e198      	b.n	8003874 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003546:	2b01      	cmp	r3, #1
 8003548:	d11b      	bne.n	8003582 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003558:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	61fb      	str	r3, [r7, #28]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	61fb      	str	r3, [r7, #28]
 800356e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	e178      	b.n	8003874 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003586:	2b02      	cmp	r3, #2
 8003588:	d11b      	bne.n	80035c2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003598:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035aa:	2300      	movs	r3, #0
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	61bb      	str	r3, [r7, #24]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	e158      	b.n	8003874 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80035e8:	e144      	b.n	8003874 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ee:	2b03      	cmp	r3, #3
 80035f0:	f200 80f1 	bhi.w	80037d6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d123      	bne.n	8003644 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 fc4b 	bl	8003e9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e145      	b.n	800389c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003638:	b29b      	uxth	r3, r3
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003642:	e117      	b.n	8003874 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003648:	2b02      	cmp	r3, #2
 800364a:	d14e      	bne.n	80036ea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800364c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003652:	2200      	movs	r2, #0
 8003654:	4906      	ldr	r1, [pc, #24]	@ (8003670 <HAL_I2C_Master_Receive+0x22c>)
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 fa76 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d008      	beq.n	8003674 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e11a      	b.n	800389c <HAL_I2C_Master_Receive+0x458>
 8003666:	bf00      	nop
 8003668:	00100002 	.word	0x00100002
 800366c:	ffff0000 	.word	0xffff0000
 8003670:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003682:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691a      	ldr	r2, [r3, #16]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c0:	b2d2      	uxtb	r2, r2
 80036c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036e8:	e0c4      	b.n	8003874 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f0:	2200      	movs	r2, #0
 80036f2:	496c      	ldr	r1, [pc, #432]	@ (80038a4 <HAL_I2C_Master_Receive+0x460>)
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 fa27 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0cb      	b.n	800389c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003712:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800373c:	b29b      	uxth	r3, r3
 800373e:	3b01      	subs	r3, #1
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374c:	2200      	movs	r2, #0
 800374e:	4955      	ldr	r1, [pc, #340]	@ (80038a4 <HAL_I2C_Master_Receive+0x460>)
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f9f9 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e09d      	b.n	800389c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800376e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691a      	ldr	r2, [r3, #16]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378c:	3b01      	subs	r3, #1
 800378e:	b29a      	uxth	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037d4:	e04e      	b.n	8003874 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 fb5e 	bl	8003e9c <I2C_WaitOnRXNEFlagUntilTimeout>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e058      	b.n	800389c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003806:	3b01      	subs	r3, #1
 8003808:	b29a      	uxth	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003812:	b29b      	uxth	r3, r3
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b04      	cmp	r3, #4
 8003828:	d124      	bne.n	8003874 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800382e:	2b03      	cmp	r3, #3
 8003830:	d107      	bne.n	8003842 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003840:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	691a      	ldr	r2, [r3, #16]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003878:	2b00      	cmp	r3, #0
 800387a:	f47f aeb6 	bne.w	80035ea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	e000      	b.n	800389c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800389a:	2302      	movs	r3, #2
  }
}
 800389c:	4618      	mov	r0, r3
 800389e:	3728      	adds	r7, #40	@ 0x28
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	00010004 	.word	0x00010004

080038a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	460b      	mov	r3, r1
 80038b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d006      	beq.n	80038d2 <I2C_MasterRequestWrite+0x2a>
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d003      	beq.n	80038d2 <I2C_MasterRequestWrite+0x2a>
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038d0:	d108      	bne.n	80038e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	e00b      	b.n	80038fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e8:	2b12      	cmp	r3, #18
 80038ea:	d107      	bne.n	80038fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 f91d 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00d      	beq.n	8003930 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800391e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003922:	d103      	bne.n	800392c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800392a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e035      	b.n	800399c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003938:	d108      	bne.n	800394c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800393a:	897b      	ldrh	r3, [r7, #10]
 800393c:	b2db      	uxtb	r3, r3
 800393e:	461a      	mov	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003948:	611a      	str	r2, [r3, #16]
 800394a:	e01b      	b.n	8003984 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800394c:	897b      	ldrh	r3, [r7, #10]
 800394e:	11db      	asrs	r3, r3, #7
 8003950:	b2db      	uxtb	r3, r3
 8003952:	f003 0306 	and.w	r3, r3, #6
 8003956:	b2db      	uxtb	r3, r3
 8003958:	f063 030f 	orn	r3, r3, #15
 800395c:	b2da      	uxtb	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	490e      	ldr	r1, [pc, #56]	@ (80039a4 <I2C_MasterRequestWrite+0xfc>)
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 f966 	bl	8003c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e010      	b.n	800399c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800397a:	897b      	ldrh	r3, [r7, #10]
 800397c:	b2da      	uxtb	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	4907      	ldr	r1, [pc, #28]	@ (80039a8 <I2C_MasterRequestWrite+0x100>)
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 f956 	bl	8003c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	00010008 	.word	0x00010008
 80039a8:	00010002 	.word	0x00010002

080039ac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af02      	add	r7, sp, #8
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	607a      	str	r2, [r7, #4]
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	460b      	mov	r3, r1
 80039ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039d0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d006      	beq.n	80039e6 <I2C_MasterRequestRead+0x3a>
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d003      	beq.n	80039e6 <I2C_MasterRequestRead+0x3a>
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039e4:	d108      	bne.n	80039f8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	e00b      	b.n	8003a10 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fc:	2b11      	cmp	r3, #17
 80039fe:	d107      	bne.n	8003a10 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 f893 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00d      	beq.n	8003a44 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a36:	d103      	bne.n	8003a40 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a3e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e079      	b.n	8003b38 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a4c:	d108      	bne.n	8003a60 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a4e:	897b      	ldrh	r3, [r7, #10]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	f043 0301 	orr.w	r3, r3, #1
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	611a      	str	r2, [r3, #16]
 8003a5e:	e05f      	b.n	8003b20 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a60:	897b      	ldrh	r3, [r7, #10]
 8003a62:	11db      	asrs	r3, r3, #7
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	f003 0306 	and.w	r3, r3, #6
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	f063 030f 	orn	r3, r3, #15
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	4930      	ldr	r1, [pc, #192]	@ (8003b40 <I2C_MasterRequestRead+0x194>)
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f8dc 	bl	8003c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e054      	b.n	8003b38 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a8e:	897b      	ldrh	r3, [r7, #10]
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	4929      	ldr	r1, [pc, #164]	@ (8003b44 <I2C_MasterRequestRead+0x198>)
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f8cc 	bl	8003c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e044      	b.n	8003b38 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aae:	2300      	movs	r3, #0
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ad2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f831 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00d      	beq.n	8003b08 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003afa:	d103      	bne.n	8003b04 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b02:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e017      	b.n	8003b38 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003b08:	897b      	ldrh	r3, [r7, #10]
 8003b0a:	11db      	asrs	r3, r3, #7
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	f003 0306 	and.w	r3, r3, #6
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	f063 030e 	orn	r3, r3, #14
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	4907      	ldr	r1, [pc, #28]	@ (8003b44 <I2C_MasterRequestRead+0x198>)
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f888 	bl	8003c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	00010008 	.word	0x00010008
 8003b44:	00010002 	.word	0x00010002

08003b48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	4613      	mov	r3, r2
 8003b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b58:	e048      	b.n	8003bec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b60:	d044      	beq.n	8003bec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b62:	f7fe fbf1 	bl	8002348 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d302      	bcc.n	8003b78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d139      	bne.n	8003bec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	0c1b      	lsrs	r3, r3, #16
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d10d      	bne.n	8003b9e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	43da      	mvns	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bf0c      	ite	eq
 8003b94:	2301      	moveq	r3, #1
 8003b96:	2300      	movne	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	e00c      	b.n	8003bb8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	43da      	mvns	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	79fb      	ldrb	r3, [r7, #7]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d116      	bne.n	8003bec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd8:	f043 0220 	orr.w	r2, r3, #32
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e023      	b.n	8003c34 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	0c1b      	lsrs	r3, r3, #16
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d10d      	bne.n	8003c12 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	43da      	mvns	r2, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	4013      	ands	r3, r2
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	bf0c      	ite	eq
 8003c08:	2301      	moveq	r3, #1
 8003c0a:	2300      	movne	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	461a      	mov	r2, r3
 8003c10:	e00c      	b.n	8003c2c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	43da      	mvns	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bf0c      	ite	eq
 8003c24:	2301      	moveq	r3, #1
 8003c26:	2300      	movne	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d093      	beq.n	8003b5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c4a:	e071      	b.n	8003d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c5a:	d123      	bne.n	8003ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c6a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c90:	f043 0204 	orr.w	r2, r3, #4
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e067      	b.n	8003d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003caa:	d041      	beq.n	8003d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cac:	f7fe fb4c 	bl	8002348 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d302      	bcc.n	8003cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d136      	bne.n	8003d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	0c1b      	lsrs	r3, r3, #16
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d10c      	bne.n	8003ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	43da      	mvns	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	bf14      	ite	ne
 8003cde:	2301      	movne	r3, #1
 8003ce0:	2300      	moveq	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	e00b      	b.n	8003cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	43da      	mvns	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d016      	beq.n	8003d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1c:	f043 0220 	orr.w	r2, r3, #32
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e021      	b.n	8003d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	0c1b      	lsrs	r3, r3, #16
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d10c      	bne.n	8003d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	43da      	mvns	r2, r3
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	4013      	ands	r3, r2
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	bf14      	ite	ne
 8003d4c:	2301      	movne	r3, #1
 8003d4e:	2300      	moveq	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	e00b      	b.n	8003d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	43da      	mvns	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	bf14      	ite	ne
 8003d66:	2301      	movne	r3, #1
 8003d68:	2300      	moveq	r3, #0
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f47f af6d 	bne.w	8003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d88:	e034      	b.n	8003df4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f8e3 	bl	8003f56 <I2C_IsAcknowledgeFailed>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e034      	b.n	8003e04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da0:	d028      	beq.n	8003df4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da2:	f7fe fad1 	bl	8002348 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d302      	bcc.n	8003db8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d11d      	bne.n	8003df4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dc2:	2b80      	cmp	r3, #128	@ 0x80
 8003dc4:	d016      	beq.n	8003df4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de0:	f043 0220 	orr.w	r2, r3, #32
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e007      	b.n	8003e04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dfe:	2b80      	cmp	r3, #128	@ 0x80
 8003e00:	d1c3      	bne.n	8003d8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e18:	e034      	b.n	8003e84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f89b 	bl	8003f56 <I2C_IsAcknowledgeFailed>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e034      	b.n	8003e94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e30:	d028      	beq.n	8003e84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e32:	f7fe fa89 	bl	8002348 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d302      	bcc.n	8003e48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d11d      	bne.n	8003e84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d016      	beq.n	8003e84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	f043 0220 	orr.w	r2, r3, #32
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e007      	b.n	8003e94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d1c3      	bne.n	8003e1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ea8:	e049      	b.n	8003f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	f003 0310 	and.w	r3, r3, #16
 8003eb4:	2b10      	cmp	r3, #16
 8003eb6:	d119      	bne.n	8003eec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f06f 0210 	mvn.w	r2, #16
 8003ec0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e030      	b.n	8003f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eec:	f7fe fa2c 	bl	8002348 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d302      	bcc.n	8003f02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d11d      	bne.n	8003f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f0c:	2b40      	cmp	r3, #64	@ 0x40
 8003f0e:	d016      	beq.n	8003f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	f043 0220 	orr.w	r2, r3, #32
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e007      	b.n	8003f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f48:	2b40      	cmp	r3, #64	@ 0x40
 8003f4a:	d1ae      	bne.n	8003eaa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f6c:	d11b      	bne.n	8003fa6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f76:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f92:	f043 0204 	orr.w	r2, r3, #4
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	603b      	str	r3, [r7, #0]
 8003fc2:	4b20      	ldr	r3, [pc, #128]	@ (8004044 <HAL_PWREx_EnableOverDrive+0x90>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8004044 <HAL_PWREx_EnableOverDrive+0x90>)
 8003fc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fce:	4b1d      	ldr	r3, [pc, #116]	@ (8004044 <HAL_PWREx_EnableOverDrive+0x90>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fd6:	603b      	str	r3, [r7, #0]
 8003fd8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003fda:	4b1b      	ldr	r3, [pc, #108]	@ (8004048 <HAL_PWREx_EnableOverDrive+0x94>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fe0:	f7fe f9b2 	bl	8002348 <HAL_GetTick>
 8003fe4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003fe6:	e009      	b.n	8003ffc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003fe8:	f7fe f9ae 	bl	8002348 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ff6:	d901      	bls.n	8003ffc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e01f      	b.n	800403c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ffc:	4b13      	ldr	r3, [pc, #76]	@ (800404c <HAL_PWREx_EnableOverDrive+0x98>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004008:	d1ee      	bne.n	8003fe8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800400a:	4b11      	ldr	r3, [pc, #68]	@ (8004050 <HAL_PWREx_EnableOverDrive+0x9c>)
 800400c:	2201      	movs	r2, #1
 800400e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004010:	f7fe f99a 	bl	8002348 <HAL_GetTick>
 8004014:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004016:	e009      	b.n	800402c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004018:	f7fe f996 	bl	8002348 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004026:	d901      	bls.n	800402c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e007      	b.n	800403c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800402c:	4b07      	ldr	r3, [pc, #28]	@ (800404c <HAL_PWREx_EnableOverDrive+0x98>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004034:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004038:	d1ee      	bne.n	8004018 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40023800 	.word	0x40023800
 8004048:	420e0040 	.word	0x420e0040
 800404c:	40007000 	.word	0x40007000
 8004050:	420e0044 	.word	0x420e0044

08004054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0cc      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004068:	4b68      	ldr	r3, [pc, #416]	@ (800420c <HAL_RCC_ClockConfig+0x1b8>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 030f 	and.w	r3, r3, #15
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d90c      	bls.n	8004090 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004076:	4b65      	ldr	r3, [pc, #404]	@ (800420c <HAL_RCC_ClockConfig+0x1b8>)
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800407e:	4b63      	ldr	r3, [pc, #396]	@ (800420c <HAL_RCC_ClockConfig+0x1b8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d001      	beq.n	8004090 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e0b8      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d020      	beq.n	80040de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d005      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040a8:	4b59      	ldr	r3, [pc, #356]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	4a58      	ldr	r2, [pc, #352]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040c0:	4b53      	ldr	r3, [pc, #332]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	4a52      	ldr	r2, [pc, #328]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040cc:	4b50      	ldr	r3, [pc, #320]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	494d      	ldr	r1, [pc, #308]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d044      	beq.n	8004174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d107      	bne.n	8004102 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f2:	4b47      	ldr	r3, [pc, #284]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d119      	bne.n	8004132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e07f      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b02      	cmp	r3, #2
 8004108:	d003      	beq.n	8004112 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800410e:	2b03      	cmp	r3, #3
 8004110:	d107      	bne.n	8004122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004112:	4b3f      	ldr	r3, [pc, #252]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d109      	bne.n	8004132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e06f      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004122:	4b3b      	ldr	r3, [pc, #236]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e067      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004132:	4b37      	ldr	r3, [pc, #220]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f023 0203 	bic.w	r2, r3, #3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	4934      	ldr	r1, [pc, #208]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	4313      	orrs	r3, r2
 8004142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004144:	f7fe f900 	bl	8002348 <HAL_GetTick>
 8004148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800414a:	e00a      	b.n	8004162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800414c:	f7fe f8fc 	bl	8002348 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800415a:	4293      	cmp	r3, r2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e04f      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004162:	4b2b      	ldr	r3, [pc, #172]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 020c 	and.w	r2, r3, #12
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	429a      	cmp	r2, r3
 8004172:	d1eb      	bne.n	800414c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004174:	4b25      	ldr	r3, [pc, #148]	@ (800420c <HAL_RCC_ClockConfig+0x1b8>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 030f 	and.w	r3, r3, #15
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d20c      	bcs.n	800419c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004182:	4b22      	ldr	r3, [pc, #136]	@ (800420c <HAL_RCC_ClockConfig+0x1b8>)
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800418a:	4b20      	ldr	r3, [pc, #128]	@ (800420c <HAL_RCC_ClockConfig+0x1b8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d001      	beq.n	800419c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e032      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d008      	beq.n	80041ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041a8:	4b19      	ldr	r3, [pc, #100]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	4916      	ldr	r1, [pc, #88]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0308 	and.w	r3, r3, #8
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d009      	beq.n	80041da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041c6:	4b12      	ldr	r3, [pc, #72]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	490e      	ldr	r1, [pc, #56]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041da:	f000 f887 	bl	80042ec <HAL_RCC_GetSysClockFreq>
 80041de:	4602      	mov	r2, r0
 80041e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	091b      	lsrs	r3, r3, #4
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	490a      	ldr	r1, [pc, #40]	@ (8004214 <HAL_RCC_ClockConfig+0x1c0>)
 80041ec:	5ccb      	ldrb	r3, [r1, r3]
 80041ee:	fa22 f303 	lsr.w	r3, r2, r3
 80041f2:	4a09      	ldr	r2, [pc, #36]	@ (8004218 <HAL_RCC_ClockConfig+0x1c4>)
 80041f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80041f6:	4b09      	ldr	r3, [pc, #36]	@ (800421c <HAL_RCC_ClockConfig+0x1c8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fd febe 	bl	8001f7c <HAL_InitTick>

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	40023c00 	.word	0x40023c00
 8004210:	40023800 	.word	0x40023800
 8004214:	0800c630 	.word	0x0800c630
 8004218:	20000000 	.word	0x20000000
 800421c:	20000004 	.word	0x20000004

08004220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004224:	4b03      	ldr	r3, [pc, #12]	@ (8004234 <HAL_RCC_GetHCLKFreq+0x14>)
 8004226:	681b      	ldr	r3, [r3, #0]
}
 8004228:	4618      	mov	r0, r3
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	20000000 	.word	0x20000000

08004238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800423c:	f7ff fff0 	bl	8004220 <HAL_RCC_GetHCLKFreq>
 8004240:	4602      	mov	r2, r0
 8004242:	4b05      	ldr	r3, [pc, #20]	@ (8004258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	0a9b      	lsrs	r3, r3, #10
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	4903      	ldr	r1, [pc, #12]	@ (800425c <HAL_RCC_GetPCLK1Freq+0x24>)
 800424e:	5ccb      	ldrb	r3, [r1, r3]
 8004250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004254:	4618      	mov	r0, r3
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40023800 	.word	0x40023800
 800425c:	0800c640 	.word	0x0800c640

08004260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004264:	f7ff ffdc 	bl	8004220 <HAL_RCC_GetHCLKFreq>
 8004268:	4602      	mov	r2, r0
 800426a:	4b05      	ldr	r3, [pc, #20]	@ (8004280 <HAL_RCC_GetPCLK2Freq+0x20>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	0b5b      	lsrs	r3, r3, #13
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	4903      	ldr	r1, [pc, #12]	@ (8004284 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004276:	5ccb      	ldrb	r3, [r1, r3]
 8004278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800427c:	4618      	mov	r0, r3
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40023800 	.word	0x40023800
 8004284:	0800c640 	.word	0x0800c640

08004288 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	220f      	movs	r2, #15
 8004296:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004298:	4b12      	ldr	r3, [pc, #72]	@ (80042e4 <HAL_RCC_GetClockConfig+0x5c>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 0203 	and.w	r2, r3, #3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042a4:	4b0f      	ldr	r3, [pc, #60]	@ (80042e4 <HAL_RCC_GetClockConfig+0x5c>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042b0:	4b0c      	ldr	r3, [pc, #48]	@ (80042e4 <HAL_RCC_GetClockConfig+0x5c>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80042bc:	4b09      	ldr	r3, [pc, #36]	@ (80042e4 <HAL_RCC_GetClockConfig+0x5c>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	08db      	lsrs	r3, r3, #3
 80042c2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042ca:	4b07      	ldr	r3, [pc, #28]	@ (80042e8 <HAL_RCC_GetClockConfig+0x60>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 020f 	and.w	r2, r3, #15
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	601a      	str	r2, [r3, #0]
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40023800 	.word	0x40023800
 80042e8:	40023c00 	.word	0x40023c00

080042ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f0:	b0ae      	sub	sp, #184	@ 0xb8
 80042f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004306:	2300      	movs	r3, #0
 8004308:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004312:	4bcb      	ldr	r3, [pc, #812]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x354>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
 800431a:	2b0c      	cmp	r3, #12
 800431c:	f200 8206 	bhi.w	800472c <HAL_RCC_GetSysClockFreq+0x440>
 8004320:	a201      	add	r2, pc, #4	@ (adr r2, 8004328 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004326:	bf00      	nop
 8004328:	0800435d 	.word	0x0800435d
 800432c:	0800472d 	.word	0x0800472d
 8004330:	0800472d 	.word	0x0800472d
 8004334:	0800472d 	.word	0x0800472d
 8004338:	08004365 	.word	0x08004365
 800433c:	0800472d 	.word	0x0800472d
 8004340:	0800472d 	.word	0x0800472d
 8004344:	0800472d 	.word	0x0800472d
 8004348:	0800436d 	.word	0x0800436d
 800434c:	0800472d 	.word	0x0800472d
 8004350:	0800472d 	.word	0x0800472d
 8004354:	0800472d 	.word	0x0800472d
 8004358:	0800455d 	.word	0x0800455d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800435c:	4bb9      	ldr	r3, [pc, #740]	@ (8004644 <HAL_RCC_GetSysClockFreq+0x358>)
 800435e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004362:	e1e7      	b.n	8004734 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004364:	4bb8      	ldr	r3, [pc, #736]	@ (8004648 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004366:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800436a:	e1e3      	b.n	8004734 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800436c:	4bb4      	ldr	r3, [pc, #720]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x354>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004374:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004378:	4bb1      	ldr	r3, [pc, #708]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x354>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d071      	beq.n	8004468 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004384:	4bae      	ldr	r3, [pc, #696]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x354>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	099b      	lsrs	r3, r3, #6
 800438a:	2200      	movs	r2, #0
 800438c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004390:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004394:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800439c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043a0:	2300      	movs	r3, #0
 80043a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80043a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80043aa:	4622      	mov	r2, r4
 80043ac:	462b      	mov	r3, r5
 80043ae:	f04f 0000 	mov.w	r0, #0
 80043b2:	f04f 0100 	mov.w	r1, #0
 80043b6:	0159      	lsls	r1, r3, #5
 80043b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043bc:	0150      	lsls	r0, r2, #5
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	4621      	mov	r1, r4
 80043c4:	1a51      	subs	r1, r2, r1
 80043c6:	6439      	str	r1, [r7, #64]	@ 0x40
 80043c8:	4629      	mov	r1, r5
 80043ca:	eb63 0301 	sbc.w	r3, r3, r1
 80043ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80043dc:	4649      	mov	r1, r9
 80043de:	018b      	lsls	r3, r1, #6
 80043e0:	4641      	mov	r1, r8
 80043e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043e6:	4641      	mov	r1, r8
 80043e8:	018a      	lsls	r2, r1, #6
 80043ea:	4641      	mov	r1, r8
 80043ec:	1a51      	subs	r1, r2, r1
 80043ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80043f0:	4649      	mov	r1, r9
 80043f2:	eb63 0301 	sbc.w	r3, r3, r1
 80043f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004404:	4649      	mov	r1, r9
 8004406:	00cb      	lsls	r3, r1, #3
 8004408:	4641      	mov	r1, r8
 800440a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800440e:	4641      	mov	r1, r8
 8004410:	00ca      	lsls	r2, r1, #3
 8004412:	4610      	mov	r0, r2
 8004414:	4619      	mov	r1, r3
 8004416:	4603      	mov	r3, r0
 8004418:	4622      	mov	r2, r4
 800441a:	189b      	adds	r3, r3, r2
 800441c:	633b      	str	r3, [r7, #48]	@ 0x30
 800441e:	462b      	mov	r3, r5
 8004420:	460a      	mov	r2, r1
 8004422:	eb42 0303 	adc.w	r3, r2, r3
 8004426:	637b      	str	r3, [r7, #52]	@ 0x34
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004434:	4629      	mov	r1, r5
 8004436:	024b      	lsls	r3, r1, #9
 8004438:	4621      	mov	r1, r4
 800443a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800443e:	4621      	mov	r1, r4
 8004440:	024a      	lsls	r2, r1, #9
 8004442:	4610      	mov	r0, r2
 8004444:	4619      	mov	r1, r3
 8004446:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800444a:	2200      	movs	r2, #0
 800444c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004450:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004454:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004458:	f7fc fbc6 	bl	8000be8 <__aeabi_uldivmod>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4613      	mov	r3, r2
 8004462:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004466:	e067      	b.n	8004538 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004468:	4b75      	ldr	r3, [pc, #468]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x354>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	099b      	lsrs	r3, r3, #6
 800446e:	2200      	movs	r2, #0
 8004470:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004474:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004478:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800447c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004480:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004482:	2300      	movs	r3, #0
 8004484:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004486:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800448a:	4622      	mov	r2, r4
 800448c:	462b      	mov	r3, r5
 800448e:	f04f 0000 	mov.w	r0, #0
 8004492:	f04f 0100 	mov.w	r1, #0
 8004496:	0159      	lsls	r1, r3, #5
 8004498:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800449c:	0150      	lsls	r0, r2, #5
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	4621      	mov	r1, r4
 80044a4:	1a51      	subs	r1, r2, r1
 80044a6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80044a8:	4629      	mov	r1, r5
 80044aa:	eb63 0301 	sbc.w	r3, r3, r1
 80044ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80044bc:	4649      	mov	r1, r9
 80044be:	018b      	lsls	r3, r1, #6
 80044c0:	4641      	mov	r1, r8
 80044c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044c6:	4641      	mov	r1, r8
 80044c8:	018a      	lsls	r2, r1, #6
 80044ca:	4641      	mov	r1, r8
 80044cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80044d0:	4649      	mov	r1, r9
 80044d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044ea:	4692      	mov	sl, r2
 80044ec:	469b      	mov	fp, r3
 80044ee:	4623      	mov	r3, r4
 80044f0:	eb1a 0303 	adds.w	r3, sl, r3
 80044f4:	623b      	str	r3, [r7, #32]
 80044f6:	462b      	mov	r3, r5
 80044f8:	eb4b 0303 	adc.w	r3, fp, r3
 80044fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800450a:	4629      	mov	r1, r5
 800450c:	028b      	lsls	r3, r1, #10
 800450e:	4621      	mov	r1, r4
 8004510:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004514:	4621      	mov	r1, r4
 8004516:	028a      	lsls	r2, r1, #10
 8004518:	4610      	mov	r0, r2
 800451a:	4619      	mov	r1, r3
 800451c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004520:	2200      	movs	r2, #0
 8004522:	673b      	str	r3, [r7, #112]	@ 0x70
 8004524:	677a      	str	r2, [r7, #116]	@ 0x74
 8004526:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800452a:	f7fc fb5d 	bl	8000be8 <__aeabi_uldivmod>
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	4613      	mov	r3, r2
 8004534:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004538:	4b41      	ldr	r3, [pc, #260]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x354>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	0c1b      	lsrs	r3, r3, #16
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	3301      	adds	r3, #1
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800454a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800454e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004552:	fbb2 f3f3 	udiv	r3, r2, r3
 8004556:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800455a:	e0eb      	b.n	8004734 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800455c:	4b38      	ldr	r3, [pc, #224]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x354>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004564:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004568:	4b35      	ldr	r3, [pc, #212]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x354>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d06b      	beq.n	800464c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004574:	4b32      	ldr	r3, [pc, #200]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x354>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	099b      	lsrs	r3, r3, #6
 800457a:	2200      	movs	r2, #0
 800457c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800457e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004580:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004586:	663b      	str	r3, [r7, #96]	@ 0x60
 8004588:	2300      	movs	r3, #0
 800458a:	667b      	str	r3, [r7, #100]	@ 0x64
 800458c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004590:	4622      	mov	r2, r4
 8004592:	462b      	mov	r3, r5
 8004594:	f04f 0000 	mov.w	r0, #0
 8004598:	f04f 0100 	mov.w	r1, #0
 800459c:	0159      	lsls	r1, r3, #5
 800459e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045a2:	0150      	lsls	r0, r2, #5
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
 80045a8:	4621      	mov	r1, r4
 80045aa:	1a51      	subs	r1, r2, r1
 80045ac:	61b9      	str	r1, [r7, #24]
 80045ae:	4629      	mov	r1, r5
 80045b0:	eb63 0301 	sbc.w	r3, r3, r1
 80045b4:	61fb      	str	r3, [r7, #28]
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	f04f 0300 	mov.w	r3, #0
 80045be:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80045c2:	4659      	mov	r1, fp
 80045c4:	018b      	lsls	r3, r1, #6
 80045c6:	4651      	mov	r1, sl
 80045c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045cc:	4651      	mov	r1, sl
 80045ce:	018a      	lsls	r2, r1, #6
 80045d0:	4651      	mov	r1, sl
 80045d2:	ebb2 0801 	subs.w	r8, r2, r1
 80045d6:	4659      	mov	r1, fp
 80045d8:	eb63 0901 	sbc.w	r9, r3, r1
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045f0:	4690      	mov	r8, r2
 80045f2:	4699      	mov	r9, r3
 80045f4:	4623      	mov	r3, r4
 80045f6:	eb18 0303 	adds.w	r3, r8, r3
 80045fa:	613b      	str	r3, [r7, #16]
 80045fc:	462b      	mov	r3, r5
 80045fe:	eb49 0303 	adc.w	r3, r9, r3
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004610:	4629      	mov	r1, r5
 8004612:	024b      	lsls	r3, r1, #9
 8004614:	4621      	mov	r1, r4
 8004616:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800461a:	4621      	mov	r1, r4
 800461c:	024a      	lsls	r2, r1, #9
 800461e:	4610      	mov	r0, r2
 8004620:	4619      	mov	r1, r3
 8004622:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004626:	2200      	movs	r2, #0
 8004628:	65bb      	str	r3, [r7, #88]	@ 0x58
 800462a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800462c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004630:	f7fc fada 	bl	8000be8 <__aeabi_uldivmod>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4613      	mov	r3, r2
 800463a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800463e:	e065      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x420>
 8004640:	40023800 	.word	0x40023800
 8004644:	00f42400 	.word	0x00f42400
 8004648:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800464c:	4b3d      	ldr	r3, [pc, #244]	@ (8004744 <HAL_RCC_GetSysClockFreq+0x458>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	099b      	lsrs	r3, r3, #6
 8004652:	2200      	movs	r2, #0
 8004654:	4618      	mov	r0, r3
 8004656:	4611      	mov	r1, r2
 8004658:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800465c:	653b      	str	r3, [r7, #80]	@ 0x50
 800465e:	2300      	movs	r3, #0
 8004660:	657b      	str	r3, [r7, #84]	@ 0x54
 8004662:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004666:	4642      	mov	r2, r8
 8004668:	464b      	mov	r3, r9
 800466a:	f04f 0000 	mov.w	r0, #0
 800466e:	f04f 0100 	mov.w	r1, #0
 8004672:	0159      	lsls	r1, r3, #5
 8004674:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004678:	0150      	lsls	r0, r2, #5
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	4641      	mov	r1, r8
 8004680:	1a51      	subs	r1, r2, r1
 8004682:	60b9      	str	r1, [r7, #8]
 8004684:	4649      	mov	r1, r9
 8004686:	eb63 0301 	sbc.w	r3, r3, r1
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004698:	4659      	mov	r1, fp
 800469a:	018b      	lsls	r3, r1, #6
 800469c:	4651      	mov	r1, sl
 800469e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046a2:	4651      	mov	r1, sl
 80046a4:	018a      	lsls	r2, r1, #6
 80046a6:	4651      	mov	r1, sl
 80046a8:	1a54      	subs	r4, r2, r1
 80046aa:	4659      	mov	r1, fp
 80046ac:	eb63 0501 	sbc.w	r5, r3, r1
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	f04f 0300 	mov.w	r3, #0
 80046b8:	00eb      	lsls	r3, r5, #3
 80046ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046be:	00e2      	lsls	r2, r4, #3
 80046c0:	4614      	mov	r4, r2
 80046c2:	461d      	mov	r5, r3
 80046c4:	4643      	mov	r3, r8
 80046c6:	18e3      	adds	r3, r4, r3
 80046c8:	603b      	str	r3, [r7, #0]
 80046ca:	464b      	mov	r3, r9
 80046cc:	eb45 0303 	adc.w	r3, r5, r3
 80046d0:	607b      	str	r3, [r7, #4]
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046de:	4629      	mov	r1, r5
 80046e0:	028b      	lsls	r3, r1, #10
 80046e2:	4621      	mov	r1, r4
 80046e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046e8:	4621      	mov	r1, r4
 80046ea:	028a      	lsls	r2, r1, #10
 80046ec:	4610      	mov	r0, r2
 80046ee:	4619      	mov	r1, r3
 80046f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046f4:	2200      	movs	r2, #0
 80046f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046f8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80046fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046fe:	f7fc fa73 	bl	8000be8 <__aeabi_uldivmod>
 8004702:	4602      	mov	r2, r0
 8004704:	460b      	mov	r3, r1
 8004706:	4613      	mov	r3, r2
 8004708:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800470c:	4b0d      	ldr	r3, [pc, #52]	@ (8004744 <HAL_RCC_GetSysClockFreq+0x458>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	0f1b      	lsrs	r3, r3, #28
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800471a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800471e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004722:	fbb2 f3f3 	udiv	r3, r2, r3
 8004726:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800472a:	e003      	b.n	8004734 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800472c:	4b06      	ldr	r3, [pc, #24]	@ (8004748 <HAL_RCC_GetSysClockFreq+0x45c>)
 800472e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004732:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004734:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004738:	4618      	mov	r0, r3
 800473a:	37b8      	adds	r7, #184	@ 0xb8
 800473c:	46bd      	mov	sp, r7
 800473e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004742:	bf00      	nop
 8004744:	40023800 	.word	0x40023800
 8004748:	00f42400 	.word	0x00f42400

0800474c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e28d      	b.n	8004c7a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 8083 	beq.w	8004872 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800476c:	4b94      	ldr	r3, [pc, #592]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 030c 	and.w	r3, r3, #12
 8004774:	2b04      	cmp	r3, #4
 8004776:	d019      	beq.n	80047ac <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004778:	4b91      	ldr	r3, [pc, #580]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 030c 	and.w	r3, r3, #12
        || \
 8004780:	2b08      	cmp	r3, #8
 8004782:	d106      	bne.n	8004792 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004784:	4b8e      	ldr	r3, [pc, #568]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800478c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004790:	d00c      	beq.n	80047ac <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004792:	4b8b      	ldr	r3, [pc, #556]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800479a:	2b0c      	cmp	r3, #12
 800479c:	d112      	bne.n	80047c4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800479e:	4b88      	ldr	r3, [pc, #544]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047aa:	d10b      	bne.n	80047c4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ac:	4b84      	ldr	r3, [pc, #528]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d05b      	beq.n	8004870 <HAL_RCC_OscConfig+0x124>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d157      	bne.n	8004870 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e25a      	b.n	8004c7a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047cc:	d106      	bne.n	80047dc <HAL_RCC_OscConfig+0x90>
 80047ce:	4b7c      	ldr	r3, [pc, #496]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a7b      	ldr	r2, [pc, #492]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 80047d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	e01d      	b.n	8004818 <HAL_RCC_OscConfig+0xcc>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047e4:	d10c      	bne.n	8004800 <HAL_RCC_OscConfig+0xb4>
 80047e6:	4b76      	ldr	r3, [pc, #472]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a75      	ldr	r2, [pc, #468]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 80047ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	4b73      	ldr	r3, [pc, #460]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a72      	ldr	r2, [pc, #456]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 80047f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	e00b      	b.n	8004818 <HAL_RCC_OscConfig+0xcc>
 8004800:	4b6f      	ldr	r3, [pc, #444]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a6e      	ldr	r2, [pc, #440]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 8004806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800480a:	6013      	str	r3, [r2, #0]
 800480c:	4b6c      	ldr	r3, [pc, #432]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a6b      	ldr	r2, [pc, #428]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 8004812:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d013      	beq.n	8004848 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004820:	f7fd fd92 	bl	8002348 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004828:	f7fd fd8e 	bl	8002348 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b64      	cmp	r3, #100	@ 0x64
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e21f      	b.n	8004c7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483a:	4b61      	ldr	r3, [pc, #388]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0f0      	beq.n	8004828 <HAL_RCC_OscConfig+0xdc>
 8004846:	e014      	b.n	8004872 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004848:	f7fd fd7e 	bl	8002348 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004850:	f7fd fd7a 	bl	8002348 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b64      	cmp	r3, #100	@ 0x64
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e20b      	b.n	8004c7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004862:	4b57      	ldr	r3, [pc, #348]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <HAL_RCC_OscConfig+0x104>
 800486e:	e000      	b.n	8004872 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d06f      	beq.n	800495e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800487e:	4b50      	ldr	r3, [pc, #320]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 030c 	and.w	r3, r3, #12
 8004886:	2b00      	cmp	r3, #0
 8004888:	d017      	beq.n	80048ba <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800488a:	4b4d      	ldr	r3, [pc, #308]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 030c 	and.w	r3, r3, #12
        || \
 8004892:	2b08      	cmp	r3, #8
 8004894:	d105      	bne.n	80048a2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004896:	4b4a      	ldr	r3, [pc, #296]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00b      	beq.n	80048ba <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048a2:	4b47      	ldr	r3, [pc, #284]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80048aa:	2b0c      	cmp	r3, #12
 80048ac:	d11c      	bne.n	80048e8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ae:	4b44      	ldr	r3, [pc, #272]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d116      	bne.n	80048e8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ba:	4b41      	ldr	r3, [pc, #260]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <HAL_RCC_OscConfig+0x186>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d001      	beq.n	80048d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e1d3      	b.n	8004c7a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d2:	4b3b      	ldr	r3, [pc, #236]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	4937      	ldr	r1, [pc, #220]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048e6:	e03a      	b.n	800495e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d020      	beq.n	8004932 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048f0:	4b34      	ldr	r3, [pc, #208]	@ (80049c4 <HAL_RCC_OscConfig+0x278>)
 80048f2:	2201      	movs	r2, #1
 80048f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f6:	f7fd fd27 	bl	8002348 <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048fe:	f7fd fd23 	bl	8002348 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e1b4      	b.n	8004c7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004910:	4b2b      	ldr	r3, [pc, #172]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0f0      	beq.n	80048fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800491c:	4b28      	ldr	r3, [pc, #160]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	4925      	ldr	r1, [pc, #148]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 800492c:	4313      	orrs	r3, r2
 800492e:	600b      	str	r3, [r1, #0]
 8004930:	e015      	b.n	800495e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004932:	4b24      	ldr	r3, [pc, #144]	@ (80049c4 <HAL_RCC_OscConfig+0x278>)
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004938:	f7fd fd06 	bl	8002348 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004940:	f7fd fd02 	bl	8002348 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e193      	b.n	8004c7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004952:	4b1b      	ldr	r3, [pc, #108]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f0      	bne.n	8004940 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d036      	beq.n	80049d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d016      	beq.n	80049a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004972:	4b15      	ldr	r3, [pc, #84]	@ (80049c8 <HAL_RCC_OscConfig+0x27c>)
 8004974:	2201      	movs	r2, #1
 8004976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004978:	f7fd fce6 	bl	8002348 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004980:	f7fd fce2 	bl	8002348 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e173      	b.n	8004c7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004992:	4b0b      	ldr	r3, [pc, #44]	@ (80049c0 <HAL_RCC_OscConfig+0x274>)
 8004994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f0      	beq.n	8004980 <HAL_RCC_OscConfig+0x234>
 800499e:	e01b      	b.n	80049d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049a0:	4b09      	ldr	r3, [pc, #36]	@ (80049c8 <HAL_RCC_OscConfig+0x27c>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a6:	f7fd fccf 	bl	8002348 <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049ac:	e00e      	b.n	80049cc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ae:	f7fd fccb 	bl	8002348 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d907      	bls.n	80049cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e15c      	b.n	8004c7a <HAL_RCC_OscConfig+0x52e>
 80049c0:	40023800 	.word	0x40023800
 80049c4:	42470000 	.word	0x42470000
 80049c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049cc:	4b8a      	ldr	r3, [pc, #552]	@ (8004bf8 <HAL_RCC_OscConfig+0x4ac>)
 80049ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1ea      	bne.n	80049ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 8097 	beq.w	8004b14 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049e6:	2300      	movs	r3, #0
 80049e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ea:	4b83      	ldr	r3, [pc, #524]	@ (8004bf8 <HAL_RCC_OscConfig+0x4ac>)
 80049ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10f      	bne.n	8004a16 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049f6:	2300      	movs	r3, #0
 80049f8:	60bb      	str	r3, [r7, #8]
 80049fa:	4b7f      	ldr	r3, [pc, #508]	@ (8004bf8 <HAL_RCC_OscConfig+0x4ac>)
 80049fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fe:	4a7e      	ldr	r2, [pc, #504]	@ (8004bf8 <HAL_RCC_OscConfig+0x4ac>)
 8004a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a06:	4b7c      	ldr	r3, [pc, #496]	@ (8004bf8 <HAL_RCC_OscConfig+0x4ac>)
 8004a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a0e:	60bb      	str	r3, [r7, #8]
 8004a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a12:	2301      	movs	r3, #1
 8004a14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a16:	4b79      	ldr	r3, [pc, #484]	@ (8004bfc <HAL_RCC_OscConfig+0x4b0>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d118      	bne.n	8004a54 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a22:	4b76      	ldr	r3, [pc, #472]	@ (8004bfc <HAL_RCC_OscConfig+0x4b0>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a75      	ldr	r2, [pc, #468]	@ (8004bfc <HAL_RCC_OscConfig+0x4b0>)
 8004a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a2e:	f7fd fc8b 	bl	8002348 <HAL_GetTick>
 8004a32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a34:	e008      	b.n	8004a48 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a36:	f7fd fc87 	bl	8002348 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e118      	b.n	8004c7a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a48:	4b6c      	ldr	r3, [pc, #432]	@ (8004bfc <HAL_RCC_OscConfig+0x4b0>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0f0      	beq.n	8004a36 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d106      	bne.n	8004a6a <HAL_RCC_OscConfig+0x31e>
 8004a5c:	4b66      	ldr	r3, [pc, #408]	@ (8004bf8 <HAL_RCC_OscConfig+0x4ac>)
 8004a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a60:	4a65      	ldr	r2, [pc, #404]	@ (8004bf8 <HAL_RCC_OscConfig+0x4ac>)
 8004a62:	f043 0301 	orr.w	r3, r3, #1
 8004a66:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a68:	e01c      	b.n	8004aa4 <HAL_RCC_OscConfig+0x358>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	2b05      	cmp	r3, #5
 8004a70:	d10c      	bne.n	8004a8c <HAL_RCC_OscConfig+0x340>
 8004a72:	4b61      	ldr	r3, [pc, #388]	@ (8004bf8 <HAL_RCC_OscConfig+0x4ac>)
 8004a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a76:	4a60      	ldr	r2, [pc, #384]	@ (8004bf8 <HAL_RCC_OscConfig+0x4ac>)
 8004a78:	f043 0304 	orr.w	r3, r3, #4
 8004a7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a7e:	4b5e      	ldr	r3, [pc, #376]	@ (8004bf8 <HAL_RCC_OscConfig+0x4ac>)
 8004a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a82:	4a5d      	ldr	r2, [pc, #372]	@ (8004bf8 <HAL_RCC_OscConfig+0x4ac>)
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a8a:	e00b      	b.n	8004aa4 <HAL_RCC_OscConfig+0x358>
 8004a8c:	4b5a      	ldr	r3, [pc, #360]	@ (8004bf8 <HAL_RCC_OscConfig+0x4ac>)
 8004a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a90:	4a59      	ldr	r2, [pc, #356]	@ (8004bf8 <HAL_RCC_OscConfig+0x4ac>)
 8004a92:	f023 0301 	bic.w	r3, r3, #1
 8004a96:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a98:	4b57      	ldr	r3, [pc, #348]	@ (8004bf8 <HAL_RCC_OscConfig+0x4ac>)
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a9c:	4a56      	ldr	r2, [pc, #344]	@ (8004bf8 <HAL_RCC_OscConfig+0x4ac>)
 8004a9e:	f023 0304 	bic.w	r3, r3, #4
 8004aa2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d015      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aac:	f7fd fc4c 	bl	8002348 <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab2:	e00a      	b.n	8004aca <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ab4:	f7fd fc48 	bl	8002348 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e0d7      	b.n	8004c7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aca:	4b4b      	ldr	r3, [pc, #300]	@ (8004bf8 <HAL_RCC_OscConfig+0x4ac>)
 8004acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0ee      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x368>
 8004ad6:	e014      	b.n	8004b02 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad8:	f7fd fc36 	bl	8002348 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ade:	e00a      	b.n	8004af6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ae0:	f7fd fc32 	bl	8002348 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e0c1      	b.n	8004c7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af6:	4b40      	ldr	r3, [pc, #256]	@ (8004bf8 <HAL_RCC_OscConfig+0x4ac>)
 8004af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1ee      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b02:	7dfb      	ldrb	r3, [r7, #23]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d105      	bne.n	8004b14 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b08:	4b3b      	ldr	r3, [pc, #236]	@ (8004bf8 <HAL_RCC_OscConfig+0x4ac>)
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0c:	4a3a      	ldr	r2, [pc, #232]	@ (8004bf8 <HAL_RCC_OscConfig+0x4ac>)
 8004b0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 80ad 	beq.w	8004c78 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b1e:	4b36      	ldr	r3, [pc, #216]	@ (8004bf8 <HAL_RCC_OscConfig+0x4ac>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	d060      	beq.n	8004bec <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d145      	bne.n	8004bbe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b32:	4b33      	ldr	r3, [pc, #204]	@ (8004c00 <HAL_RCC_OscConfig+0x4b4>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b38:	f7fd fc06 	bl	8002348 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b40:	f7fd fc02 	bl	8002348 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e093      	b.n	8004c7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b52:	4b29      	ldr	r3, [pc, #164]	@ (8004bf8 <HAL_RCC_OscConfig+0x4ac>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1f0      	bne.n	8004b40 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69da      	ldr	r2, [r3, #28]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6c:	019b      	lsls	r3, r3, #6
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b74:	085b      	lsrs	r3, r3, #1
 8004b76:	3b01      	subs	r3, #1
 8004b78:	041b      	lsls	r3, r3, #16
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b80:	061b      	lsls	r3, r3, #24
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b88:	071b      	lsls	r3, r3, #28
 8004b8a:	491b      	ldr	r1, [pc, #108]	@ (8004bf8 <HAL_RCC_OscConfig+0x4ac>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b90:	4b1b      	ldr	r3, [pc, #108]	@ (8004c00 <HAL_RCC_OscConfig+0x4b4>)
 8004b92:	2201      	movs	r2, #1
 8004b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b96:	f7fd fbd7 	bl	8002348 <HAL_GetTick>
 8004b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b9c:	e008      	b.n	8004bb0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b9e:	f7fd fbd3 	bl	8002348 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d901      	bls.n	8004bb0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e064      	b.n	8004c7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bb0:	4b11      	ldr	r3, [pc, #68]	@ (8004bf8 <HAL_RCC_OscConfig+0x4ac>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0f0      	beq.n	8004b9e <HAL_RCC_OscConfig+0x452>
 8004bbc:	e05c      	b.n	8004c78 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bbe:	4b10      	ldr	r3, [pc, #64]	@ (8004c00 <HAL_RCC_OscConfig+0x4b4>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc4:	f7fd fbc0 	bl	8002348 <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bcc:	f7fd fbbc 	bl	8002348 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e04d      	b.n	8004c7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bde:	4b06      	ldr	r3, [pc, #24]	@ (8004bf8 <HAL_RCC_OscConfig+0x4ac>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f0      	bne.n	8004bcc <HAL_RCC_OscConfig+0x480>
 8004bea:	e045      	b.n	8004c78 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d107      	bne.n	8004c04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e040      	b.n	8004c7a <HAL_RCC_OscConfig+0x52e>
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	40007000 	.word	0x40007000
 8004c00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c04:	4b1f      	ldr	r3, [pc, #124]	@ (8004c84 <HAL_RCC_OscConfig+0x538>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d030      	beq.n	8004c74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d129      	bne.n	8004c74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d122      	bne.n	8004c74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004c34:	4013      	ands	r3, r2
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d119      	bne.n	8004c74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4a:	085b      	lsrs	r3, r3, #1
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d10f      	bne.n	8004c74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d107      	bne.n	8004c74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c6e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d001      	beq.n	8004c78 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e000      	b.n	8004c7a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3718      	adds	r7, #24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	40023800 	.word	0x40023800

08004c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e041      	b.n	8004d1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f839 	bl	8004d26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3304      	adds	r3, #4
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	f000 f9c0 	bl	800504c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
	...

08004d3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d001      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e04e      	b.n	8004df2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a23      	ldr	r2, [pc, #140]	@ (8004e00 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d022      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d7e:	d01d      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a1f      	ldr	r2, [pc, #124]	@ (8004e04 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d018      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8004e08 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d013      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1c      	ldr	r2, [pc, #112]	@ (8004e0c <HAL_TIM_Base_Start_IT+0xd0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00e      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a1b      	ldr	r2, [pc, #108]	@ (8004e10 <HAL_TIM_Base_Start_IT+0xd4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d009      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a19      	ldr	r2, [pc, #100]	@ (8004e14 <HAL_TIM_Base_Start_IT+0xd8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d004      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a18      	ldr	r2, [pc, #96]	@ (8004e18 <HAL_TIM_Base_Start_IT+0xdc>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d111      	bne.n	8004de0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b06      	cmp	r3, #6
 8004dcc:	d010      	beq.n	8004df0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 0201 	orr.w	r2, r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dde:	e007      	b.n	8004df0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40010000 	.word	0x40010000
 8004e04:	40000400 	.word	0x40000400
 8004e08:	40000800 	.word	0x40000800
 8004e0c:	40000c00 	.word	0x40000c00
 8004e10:	40010400 	.word	0x40010400
 8004e14:	40014000 	.word	0x40014000
 8004e18:	40001800 	.word	0x40001800

08004e1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d020      	beq.n	8004e80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d01b      	beq.n	8004e80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f06f 0202 	mvn.w	r2, #2
 8004e50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f8d2 	bl	8005010 <HAL_TIM_IC_CaptureCallback>
 8004e6c:	e005      	b.n	8004e7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f8c4 	bl	8004ffc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f8d5 	bl	8005024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d020      	beq.n	8004ecc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d01b      	beq.n	8004ecc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f06f 0204 	mvn.w	r2, #4
 8004e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f8ac 	bl	8005010 <HAL_TIM_IC_CaptureCallback>
 8004eb8:	e005      	b.n	8004ec6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f89e 	bl	8004ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f8af 	bl	8005024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f003 0308 	and.w	r3, r3, #8
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d020      	beq.n	8004f18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f003 0308 	and.w	r3, r3, #8
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d01b      	beq.n	8004f18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f06f 0208 	mvn.w	r2, #8
 8004ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2204      	movs	r2, #4
 8004eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f886 	bl	8005010 <HAL_TIM_IC_CaptureCallback>
 8004f04:	e005      	b.n	8004f12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f878 	bl	8004ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f889 	bl	8005024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	f003 0310 	and.w	r3, r3, #16
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d020      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f003 0310 	and.w	r3, r3, #16
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d01b      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0210 	mvn.w	r2, #16
 8004f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2208      	movs	r2, #8
 8004f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f860 	bl	8005010 <HAL_TIM_IC_CaptureCallback>
 8004f50:	e005      	b.n	8004f5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f852 	bl	8004ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f863 	bl	8005024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00c      	beq.n	8004f88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d007      	beq.n	8004f88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0201 	mvn.w	r2, #1
 8004f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7fc feec 	bl	8001d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00c      	beq.n	8004fac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d007      	beq.n	8004fac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f906 	bl	80051b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00c      	beq.n	8004fd0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d007      	beq.n	8004fd0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f834 	bl	8005038 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f003 0320 	and.w	r3, r3, #32
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00c      	beq.n	8004ff4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f003 0320 	and.w	r3, r3, #32
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d007      	beq.n	8004ff4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f06f 0220 	mvn.w	r2, #32
 8004fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f8d8 	bl	80051a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ff4:	bf00      	nop
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a46      	ldr	r2, [pc, #280]	@ (8005178 <TIM_Base_SetConfig+0x12c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d013      	beq.n	800508c <TIM_Base_SetConfig+0x40>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800506a:	d00f      	beq.n	800508c <TIM_Base_SetConfig+0x40>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a43      	ldr	r2, [pc, #268]	@ (800517c <TIM_Base_SetConfig+0x130>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d00b      	beq.n	800508c <TIM_Base_SetConfig+0x40>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a42      	ldr	r2, [pc, #264]	@ (8005180 <TIM_Base_SetConfig+0x134>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d007      	beq.n	800508c <TIM_Base_SetConfig+0x40>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a41      	ldr	r2, [pc, #260]	@ (8005184 <TIM_Base_SetConfig+0x138>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d003      	beq.n	800508c <TIM_Base_SetConfig+0x40>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a40      	ldr	r2, [pc, #256]	@ (8005188 <TIM_Base_SetConfig+0x13c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d108      	bne.n	800509e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a35      	ldr	r2, [pc, #212]	@ (8005178 <TIM_Base_SetConfig+0x12c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d02b      	beq.n	80050fe <TIM_Base_SetConfig+0xb2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ac:	d027      	beq.n	80050fe <TIM_Base_SetConfig+0xb2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a32      	ldr	r2, [pc, #200]	@ (800517c <TIM_Base_SetConfig+0x130>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d023      	beq.n	80050fe <TIM_Base_SetConfig+0xb2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a31      	ldr	r2, [pc, #196]	@ (8005180 <TIM_Base_SetConfig+0x134>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d01f      	beq.n	80050fe <TIM_Base_SetConfig+0xb2>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a30      	ldr	r2, [pc, #192]	@ (8005184 <TIM_Base_SetConfig+0x138>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d01b      	beq.n	80050fe <TIM_Base_SetConfig+0xb2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a2f      	ldr	r2, [pc, #188]	@ (8005188 <TIM_Base_SetConfig+0x13c>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d017      	beq.n	80050fe <TIM_Base_SetConfig+0xb2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a2e      	ldr	r2, [pc, #184]	@ (800518c <TIM_Base_SetConfig+0x140>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d013      	beq.n	80050fe <TIM_Base_SetConfig+0xb2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a2d      	ldr	r2, [pc, #180]	@ (8005190 <TIM_Base_SetConfig+0x144>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00f      	beq.n	80050fe <TIM_Base_SetConfig+0xb2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a2c      	ldr	r2, [pc, #176]	@ (8005194 <TIM_Base_SetConfig+0x148>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d00b      	beq.n	80050fe <TIM_Base_SetConfig+0xb2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a2b      	ldr	r2, [pc, #172]	@ (8005198 <TIM_Base_SetConfig+0x14c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d007      	beq.n	80050fe <TIM_Base_SetConfig+0xb2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a2a      	ldr	r2, [pc, #168]	@ (800519c <TIM_Base_SetConfig+0x150>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d003      	beq.n	80050fe <TIM_Base_SetConfig+0xb2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a29      	ldr	r2, [pc, #164]	@ (80051a0 <TIM_Base_SetConfig+0x154>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d108      	bne.n	8005110 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	4313      	orrs	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a10      	ldr	r2, [pc, #64]	@ (8005178 <TIM_Base_SetConfig+0x12c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d003      	beq.n	8005144 <TIM_Base_SetConfig+0xf8>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a12      	ldr	r2, [pc, #72]	@ (8005188 <TIM_Base_SetConfig+0x13c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d103      	bne.n	800514c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	691a      	ldr	r2, [r3, #16]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b01      	cmp	r3, #1
 800515c:	d105      	bne.n	800516a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	f023 0201 	bic.w	r2, r3, #1
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	611a      	str	r2, [r3, #16]
  }
}
 800516a:	bf00      	nop
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	40010000 	.word	0x40010000
 800517c:	40000400 	.word	0x40000400
 8005180:	40000800 	.word	0x40000800
 8005184:	40000c00 	.word	0x40000c00
 8005188:	40010400 	.word	0x40010400
 800518c:	40014000 	.word	0x40014000
 8005190:	40014400 	.word	0x40014400
 8005194:	40014800 	.word	0x40014800
 8005198:	40001800 	.word	0x40001800
 800519c:	40001c00 	.word	0x40001c00
 80051a0:	40002000 	.word	0x40002000

080051a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e042      	b.n	8005264 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d106      	bne.n	80051f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7fc fe40 	bl	8001e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2224      	movs	r2, #36	@ 0x24
 80051fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800520e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 fdbd 	bl	8005d90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	691a      	ldr	r2, [r3, #16]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005224:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	695a      	ldr	r2, [r3, #20]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005234:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005244:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2220      	movs	r2, #32
 8005250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2220      	movs	r2, #32
 8005258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b08a      	sub	sp, #40	@ 0x28
 8005270:	af02      	add	r7, sp, #8
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	603b      	str	r3, [r7, #0]
 8005278:	4613      	mov	r3, r2
 800527a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b20      	cmp	r3, #32
 800528a:	d175      	bne.n	8005378 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d002      	beq.n	8005298 <HAL_UART_Transmit+0x2c>
 8005292:	88fb      	ldrh	r3, [r7, #6]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e06e      	b.n	800537a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2221      	movs	r2, #33	@ 0x21
 80052a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052aa:	f7fd f84d 	bl	8002348 <HAL_GetTick>
 80052ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	88fa      	ldrh	r2, [r7, #6]
 80052b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	88fa      	ldrh	r2, [r7, #6]
 80052ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052c4:	d108      	bne.n	80052d8 <HAL_UART_Transmit+0x6c>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d104      	bne.n	80052d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	61bb      	str	r3, [r7, #24]
 80052d6:	e003      	b.n	80052e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052dc:	2300      	movs	r3, #0
 80052de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052e0:	e02e      	b.n	8005340 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2200      	movs	r2, #0
 80052ea:	2180      	movs	r1, #128	@ 0x80
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 fb1f 	bl	8005930 <UART_WaitOnFlagUntilTimeout>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d005      	beq.n	8005304 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e03a      	b.n	800537a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10b      	bne.n	8005322 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005318:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	3302      	adds	r3, #2
 800531e:	61bb      	str	r3, [r7, #24]
 8005320:	e007      	b.n	8005332 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	781a      	ldrb	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	3301      	adds	r3, #1
 8005330:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005336:	b29b      	uxth	r3, r3
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005344:	b29b      	uxth	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1cb      	bne.n	80052e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	2200      	movs	r2, #0
 8005352:	2140      	movs	r1, #64	@ 0x40
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 faeb 	bl	8005930 <UART_WaitOnFlagUntilTimeout>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d005      	beq.n	800536c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2220      	movs	r2, #32
 8005364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e006      	b.n	800537a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2220      	movs	r2, #32
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005374:	2300      	movs	r3, #0
 8005376:	e000      	b.n	800537a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005378:	2302      	movs	r3, #2
  }
}
 800537a:	4618      	mov	r0, r3
 800537c:	3720      	adds	r7, #32
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	60f8      	str	r0, [r7, #12]
 800538a:	60b9      	str	r1, [r7, #8]
 800538c:	4613      	mov	r3, r2
 800538e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b20      	cmp	r3, #32
 800539a:	d112      	bne.n	80053c2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d002      	beq.n	80053a8 <HAL_UART_Receive_IT+0x26>
 80053a2:	88fb      	ldrh	r3, [r7, #6]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e00b      	b.n	80053c4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	461a      	mov	r2, r3
 80053b6:	68b9      	ldr	r1, [r7, #8]
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 fb12 	bl	80059e2 <UART_Start_Receive_IT>
 80053be:	4603      	mov	r3, r0
 80053c0:	e000      	b.n	80053c4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80053c2:	2302      	movs	r3, #2
  }
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b0ba      	sub	sp, #232	@ 0xe8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005402:	f003 030f 	and.w	r3, r3, #15
 8005406:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800540a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10f      	bne.n	8005432 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b00      	cmp	r3, #0
 800541c:	d009      	beq.n	8005432 <HAL_UART_IRQHandler+0x66>
 800541e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fbf2 	bl	8005c14 <UART_Receive_IT>
      return;
 8005430:	e25b      	b.n	80058ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005432:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 80de 	beq.w	80055f8 <HAL_UART_IRQHandler+0x22c>
 800543c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	d106      	bne.n	8005456 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800544c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 80d1 	beq.w	80055f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00b      	beq.n	800547a <HAL_UART_IRQHandler+0xae>
 8005462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800546a:	2b00      	cmp	r3, #0
 800546c:	d005      	beq.n	800547a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005472:	f043 0201 	orr.w	r2, r3, #1
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800547a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800547e:	f003 0304 	and.w	r3, r3, #4
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00b      	beq.n	800549e <HAL_UART_IRQHandler+0xd2>
 8005486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d005      	beq.n	800549e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005496:	f043 0202 	orr.w	r2, r3, #2
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800549e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00b      	beq.n	80054c2 <HAL_UART_IRQHandler+0xf6>
 80054aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d005      	beq.n	80054c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ba:	f043 0204 	orr.w	r2, r3, #4
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80054c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d011      	beq.n	80054f2 <HAL_UART_IRQHandler+0x126>
 80054ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d105      	bne.n	80054e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d005      	beq.n	80054f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ea:	f043 0208 	orr.w	r2, r3, #8
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f000 81f2 	beq.w	80058e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005500:	f003 0320 	and.w	r3, r3, #32
 8005504:	2b00      	cmp	r3, #0
 8005506:	d008      	beq.n	800551a <HAL_UART_IRQHandler+0x14e>
 8005508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800550c:	f003 0320 	and.w	r3, r3, #32
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fb7d 	bl	8005c14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005524:	2b40      	cmp	r3, #64	@ 0x40
 8005526:	bf0c      	ite	eq
 8005528:	2301      	moveq	r3, #1
 800552a:	2300      	movne	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d103      	bne.n	8005546 <HAL_UART_IRQHandler+0x17a>
 800553e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005542:	2b00      	cmp	r3, #0
 8005544:	d04f      	beq.n	80055e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fa85 	bl	8005a56 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005556:	2b40      	cmp	r3, #64	@ 0x40
 8005558:	d141      	bne.n	80055de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3314      	adds	r3, #20
 8005560:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005564:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005568:	e853 3f00 	ldrex	r3, [r3]
 800556c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005570:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005574:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005578:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3314      	adds	r3, #20
 8005582:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005586:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800558a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005592:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800559e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1d9      	bne.n	800555a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d013      	beq.n	80055d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b2:	4a7e      	ldr	r2, [pc, #504]	@ (80057ac <HAL_UART_IRQHandler+0x3e0>)
 80055b4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fd f8f4 	bl	80027a8 <HAL_DMA_Abort_IT>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d016      	beq.n	80055f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80055d0:	4610      	mov	r0, r2
 80055d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d4:	e00e      	b.n	80055f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f994 	bl	8005904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055dc:	e00a      	b.n	80055f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f990 	bl	8005904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e4:	e006      	b.n	80055f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f98c 	bl	8005904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80055f2:	e175      	b.n	80058e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f4:	bf00      	nop
    return;
 80055f6:	e173      	b.n	80058e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	f040 814f 	bne.w	80058a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005606:	f003 0310 	and.w	r3, r3, #16
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 8148 	beq.w	80058a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 8141 	beq.w	80058a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800561e:	2300      	movs	r3, #0
 8005620:	60bb      	str	r3, [r7, #8]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	60bb      	str	r3, [r7, #8]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	60bb      	str	r3, [r7, #8]
 8005632:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563e:	2b40      	cmp	r3, #64	@ 0x40
 8005640:	f040 80b6 	bne.w	80057b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005650:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 8145 	beq.w	80058e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800565e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005662:	429a      	cmp	r2, r3
 8005664:	f080 813e 	bcs.w	80058e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800566e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800567a:	f000 8088 	beq.w	800578e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	330c      	adds	r3, #12
 8005684:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005688:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005694:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800569c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	330c      	adds	r3, #12
 80056a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80056aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80056b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80056ba:	e841 2300 	strex	r3, r2, [r1]
 80056be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1d9      	bne.n	800567e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	3314      	adds	r3, #20
 80056d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056d4:	e853 3f00 	ldrex	r3, [r3]
 80056d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056dc:	f023 0301 	bic.w	r3, r3, #1
 80056e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	3314      	adds	r3, #20
 80056ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80056f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005700:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e1      	bne.n	80056ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3314      	adds	r3, #20
 800570c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005710:	e853 3f00 	ldrex	r3, [r3]
 8005714:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005716:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005718:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800571c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	3314      	adds	r3, #20
 8005726:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800572a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800572c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005730:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005732:	e841 2300 	strex	r3, r2, [r1]
 8005736:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005738:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1e3      	bne.n	8005706 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2220      	movs	r2, #32
 8005742:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	330c      	adds	r3, #12
 8005752:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005756:	e853 3f00 	ldrex	r3, [r3]
 800575a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800575c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800575e:	f023 0310 	bic.w	r3, r3, #16
 8005762:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	330c      	adds	r3, #12
 800576c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005770:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005772:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005774:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005776:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005778:	e841 2300 	strex	r3, r2, [r1]
 800577c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800577e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1e3      	bne.n	800574c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005788:	4618      	mov	r0, r3
 800578a:	f7fc ff9d 	bl	80026c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2202      	movs	r2, #2
 8005792:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800579c:	b29b      	uxth	r3, r3
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	4619      	mov	r1, r3
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f8b7 	bl	8005918 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057aa:	e09b      	b.n	80058e4 <HAL_UART_IRQHandler+0x518>
 80057ac:	08005b1d 	.word	0x08005b1d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f000 808e 	beq.w	80058e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80057cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 8089 	beq.w	80058e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	330c      	adds	r3, #12
 80057dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e0:	e853 3f00 	ldrex	r3, [r3]
 80057e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	330c      	adds	r3, #12
 80057f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80057fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80057fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005800:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005802:	e841 2300 	strex	r3, r2, [r1]
 8005806:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1e3      	bne.n	80057d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3314      	adds	r3, #20
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005818:	e853 3f00 	ldrex	r3, [r3]
 800581c:	623b      	str	r3, [r7, #32]
   return(result);
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	f023 0301 	bic.w	r3, r3, #1
 8005824:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3314      	adds	r3, #20
 800582e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005832:	633a      	str	r2, [r7, #48]	@ 0x30
 8005834:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005838:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e3      	bne.n	800580e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2220      	movs	r2, #32
 800584a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	330c      	adds	r3, #12
 800585a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	e853 3f00 	ldrex	r3, [r3]
 8005862:	60fb      	str	r3, [r7, #12]
   return(result);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f023 0310 	bic.w	r3, r3, #16
 800586a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	330c      	adds	r3, #12
 8005874:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005878:	61fa      	str	r2, [r7, #28]
 800587a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	69b9      	ldr	r1, [r7, #24]
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	e841 2300 	strex	r3, r2, [r1]
 8005884:	617b      	str	r3, [r7, #20]
   return(result);
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e3      	bne.n	8005854 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005892:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005896:	4619      	mov	r1, r3
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f83d 	bl	8005918 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800589e:	e023      	b.n	80058e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d009      	beq.n	80058c0 <HAL_UART_IRQHandler+0x4f4>
 80058ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d003      	beq.n	80058c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f943 	bl	8005b44 <UART_Transmit_IT>
    return;
 80058be:	e014      	b.n	80058ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00e      	beq.n	80058ea <HAL_UART_IRQHandler+0x51e>
 80058cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d008      	beq.n	80058ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f983 	bl	8005be4 <UART_EndTransmit_IT>
    return;
 80058de:	e004      	b.n	80058ea <HAL_UART_IRQHandler+0x51e>
    return;
 80058e0:	bf00      	nop
 80058e2:	e002      	b.n	80058ea <HAL_UART_IRQHandler+0x51e>
      return;
 80058e4:	bf00      	nop
 80058e6:	e000      	b.n	80058ea <HAL_UART_IRQHandler+0x51e>
      return;
 80058e8:	bf00      	nop
  }
}
 80058ea:	37e8      	adds	r7, #232	@ 0xe8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	460b      	mov	r3, r1
 8005922:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	603b      	str	r3, [r7, #0]
 800593c:	4613      	mov	r3, r2
 800593e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005940:	e03b      	b.n	80059ba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005948:	d037      	beq.n	80059ba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800594a:	f7fc fcfd 	bl	8002348 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	6a3a      	ldr	r2, [r7, #32]
 8005956:	429a      	cmp	r2, r3
 8005958:	d302      	bcc.n	8005960 <UART_WaitOnFlagUntilTimeout+0x30>
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e03a      	b.n	80059da <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f003 0304 	and.w	r3, r3, #4
 800596e:	2b00      	cmp	r3, #0
 8005970:	d023      	beq.n	80059ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2b80      	cmp	r3, #128	@ 0x80
 8005976:	d020      	beq.n	80059ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b40      	cmp	r3, #64	@ 0x40
 800597c:	d01d      	beq.n	80059ba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0308 	and.w	r3, r3, #8
 8005988:	2b08      	cmp	r3, #8
 800598a:	d116      	bne.n	80059ba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800598c:	2300      	movs	r3, #0
 800598e:	617b      	str	r3, [r7, #20]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	617b      	str	r3, [r7, #20]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	617b      	str	r3, [r7, #20]
 80059a0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 f857 	bl	8005a56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2208      	movs	r2, #8
 80059ac:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e00f      	b.n	80059da <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	4013      	ands	r3, r2
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	bf0c      	ite	eq
 80059ca:	2301      	moveq	r3, #1
 80059cc:	2300      	movne	r3, #0
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	461a      	mov	r2, r3
 80059d2:	79fb      	ldrb	r3, [r7, #7]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d0b4      	beq.n	8005942 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b085      	sub	sp, #20
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	60f8      	str	r0, [r7, #12]
 80059ea:	60b9      	str	r1, [r7, #8]
 80059ec:	4613      	mov	r3, r2
 80059ee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	88fa      	ldrh	r2, [r7, #6]
 80059fa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	88fa      	ldrh	r2, [r7, #6]
 8005a00:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2222      	movs	r2, #34	@ 0x22
 8005a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d007      	beq.n	8005a28 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a26:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695a      	ldr	r2, [r3, #20]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0201 	orr.w	r2, r2, #1
 8005a36:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0220 	orr.w	r2, r2, #32
 8005a46:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b095      	sub	sp, #84	@ 0x54
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	330c      	adds	r3, #12
 8005a64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a68:	e853 3f00 	ldrex	r3, [r3]
 8005a6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	330c      	adds	r3, #12
 8005a7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a7e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a86:	e841 2300 	strex	r3, r2, [r1]
 8005a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1e5      	bne.n	8005a5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3314      	adds	r3, #20
 8005a98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	e853 3f00 	ldrex	r3, [r3]
 8005aa0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	f023 0301 	bic.w	r3, r3, #1
 8005aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3314      	adds	r3, #20
 8005ab0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ab2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ab8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e5      	bne.n	8005a92 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d119      	bne.n	8005b02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	330c      	adds	r3, #12
 8005ad4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	e853 3f00 	ldrex	r3, [r3]
 8005adc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f023 0310 	bic.w	r3, r3, #16
 8005ae4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	330c      	adds	r3, #12
 8005aec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005aee:	61ba      	str	r2, [r7, #24]
 8005af0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	6979      	ldr	r1, [r7, #20]
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	613b      	str	r3, [r7, #16]
   return(result);
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e5      	bne.n	8005ace <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2220      	movs	r2, #32
 8005b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b10:	bf00      	nop
 8005b12:	3754      	adds	r7, #84	@ 0x54
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f7ff fee4 	bl	8005904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b3c:	bf00      	nop
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b21      	cmp	r3, #33	@ 0x21
 8005b56:	d13e      	bne.n	8005bd6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b60:	d114      	bne.n	8005b8c <UART_Transmit_IT+0x48>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d110      	bne.n	8005b8c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	461a      	mov	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b7e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	1c9a      	adds	r2, r3, #2
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	621a      	str	r2, [r3, #32]
 8005b8a:	e008      	b.n	8005b9e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	1c59      	adds	r1, r3, #1
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	6211      	str	r1, [r2, #32]
 8005b96:	781a      	ldrb	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	4619      	mov	r1, r3
 8005bac:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10f      	bne.n	8005bd2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005bc0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bd0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	e000      	b.n	8005bd8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bd6:	2302      	movs	r3, #2
  }
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bfa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff fe73 	bl	80058f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08c      	sub	sp, #48	@ 0x30
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b22      	cmp	r3, #34	@ 0x22
 8005c26:	f040 80ae 	bne.w	8005d86 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c32:	d117      	bne.n	8005c64 <UART_Receive_IT+0x50>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d113      	bne.n	8005c64 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c44:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5c:	1c9a      	adds	r2, r3, #2
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c62:	e026      	b.n	8005cb2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c76:	d007      	beq.n	8005c88 <UART_Receive_IT+0x74>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10a      	bne.n	8005c96 <UART_Receive_IT+0x82>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d106      	bne.n	8005c96 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	b2da      	uxtb	r2, r3
 8005c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c92:	701a      	strb	r2, [r3, #0]
 8005c94:	e008      	b.n	8005ca8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ca6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cac:	1c5a      	adds	r2, r3, #1
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d15d      	bne.n	8005d82 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0220 	bic.w	r2, r2, #32
 8005cd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68da      	ldr	r2, [r3, #12]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ce4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	695a      	ldr	r2, [r3, #20]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0201 	bic.w	r2, r2, #1
 8005cf4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d135      	bne.n	8005d78 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	330c      	adds	r3, #12
 8005d18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	e853 3f00 	ldrex	r3, [r3]
 8005d20:	613b      	str	r3, [r7, #16]
   return(result);
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	f023 0310 	bic.w	r3, r3, #16
 8005d28:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	330c      	adds	r3, #12
 8005d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d32:	623a      	str	r2, [r7, #32]
 8005d34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d36:	69f9      	ldr	r1, [r7, #28]
 8005d38:	6a3a      	ldr	r2, [r7, #32]
 8005d3a:	e841 2300 	strex	r3, r2, [r1]
 8005d3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1e5      	bne.n	8005d12 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0310 	and.w	r3, r3, #16
 8005d50:	2b10      	cmp	r3, #16
 8005d52:	d10a      	bne.n	8005d6a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d54:	2300      	movs	r3, #0
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d6e:	4619      	mov	r1, r3
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7ff fdd1 	bl	8005918 <HAL_UARTEx_RxEventCallback>
 8005d76:	e002      	b.n	8005d7e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7fb fc57 	bl	800162c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	e002      	b.n	8005d88 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	e000      	b.n	8005d88 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d86:	2302      	movs	r3, #2
  }
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3730      	adds	r7, #48	@ 0x30
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d94:	b0c0      	sub	sp, #256	@ 0x100
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dac:	68d9      	ldr	r1, [r3, #12]
 8005dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	ea40 0301 	orr.w	r3, r0, r1
 8005db8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005de8:	f021 010c 	bic.w	r1, r1, #12
 8005dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005df6:	430b      	orrs	r3, r1
 8005df8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e0a:	6999      	ldr	r1, [r3, #24]
 8005e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	ea40 0301 	orr.w	r3, r0, r1
 8005e16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	4b8f      	ldr	r3, [pc, #572]	@ (800605c <UART_SetConfig+0x2cc>)
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d005      	beq.n	8005e30 <UART_SetConfig+0xa0>
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	4b8d      	ldr	r3, [pc, #564]	@ (8006060 <UART_SetConfig+0x2d0>)
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d104      	bne.n	8005e3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e30:	f7fe fa16 	bl	8004260 <HAL_RCC_GetPCLK2Freq>
 8005e34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e38:	e003      	b.n	8005e42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e3a:	f7fe f9fd 	bl	8004238 <HAL_RCC_GetPCLK1Freq>
 8005e3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e4c:	f040 810c 	bne.w	8006068 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e54:	2200      	movs	r2, #0
 8005e56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e62:	4622      	mov	r2, r4
 8005e64:	462b      	mov	r3, r5
 8005e66:	1891      	adds	r1, r2, r2
 8005e68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e6a:	415b      	adcs	r3, r3
 8005e6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e72:	4621      	mov	r1, r4
 8005e74:	eb12 0801 	adds.w	r8, r2, r1
 8005e78:	4629      	mov	r1, r5
 8005e7a:	eb43 0901 	adc.w	r9, r3, r1
 8005e7e:	f04f 0200 	mov.w	r2, #0
 8005e82:	f04f 0300 	mov.w	r3, #0
 8005e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e92:	4690      	mov	r8, r2
 8005e94:	4699      	mov	r9, r3
 8005e96:	4623      	mov	r3, r4
 8005e98:	eb18 0303 	adds.w	r3, r8, r3
 8005e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ea0:	462b      	mov	r3, r5
 8005ea2:	eb49 0303 	adc.w	r3, r9, r3
 8005ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005eb6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005eba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	18db      	adds	r3, r3, r3
 8005ec2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	eb42 0303 	adc.w	r3, r2, r3
 8005eca:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ecc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ed0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ed4:	f7fa fe88 	bl	8000be8 <__aeabi_uldivmod>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	4b61      	ldr	r3, [pc, #388]	@ (8006064 <UART_SetConfig+0x2d4>)
 8005ede:	fba3 2302 	umull	r2, r3, r3, r2
 8005ee2:	095b      	lsrs	r3, r3, #5
 8005ee4:	011c      	lsls	r4, r3, #4
 8005ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eea:	2200      	movs	r2, #0
 8005eec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ef0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ef4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ef8:	4642      	mov	r2, r8
 8005efa:	464b      	mov	r3, r9
 8005efc:	1891      	adds	r1, r2, r2
 8005efe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005f00:	415b      	adcs	r3, r3
 8005f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005f08:	4641      	mov	r1, r8
 8005f0a:	eb12 0a01 	adds.w	sl, r2, r1
 8005f0e:	4649      	mov	r1, r9
 8005f10:	eb43 0b01 	adc.w	fp, r3, r1
 8005f14:	f04f 0200 	mov.w	r2, #0
 8005f18:	f04f 0300 	mov.w	r3, #0
 8005f1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f28:	4692      	mov	sl, r2
 8005f2a:	469b      	mov	fp, r3
 8005f2c:	4643      	mov	r3, r8
 8005f2e:	eb1a 0303 	adds.w	r3, sl, r3
 8005f32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f36:	464b      	mov	r3, r9
 8005f38:	eb4b 0303 	adc.w	r3, fp, r3
 8005f3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005f50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f54:	460b      	mov	r3, r1
 8005f56:	18db      	adds	r3, r3, r3
 8005f58:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	eb42 0303 	adc.w	r3, r2, r3
 8005f60:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f6a:	f7fa fe3d 	bl	8000be8 <__aeabi_uldivmod>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	460b      	mov	r3, r1
 8005f72:	4611      	mov	r1, r2
 8005f74:	4b3b      	ldr	r3, [pc, #236]	@ (8006064 <UART_SetConfig+0x2d4>)
 8005f76:	fba3 2301 	umull	r2, r3, r3, r1
 8005f7a:	095b      	lsrs	r3, r3, #5
 8005f7c:	2264      	movs	r2, #100	@ 0x64
 8005f7e:	fb02 f303 	mul.w	r3, r2, r3
 8005f82:	1acb      	subs	r3, r1, r3
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f8a:	4b36      	ldr	r3, [pc, #216]	@ (8006064 <UART_SetConfig+0x2d4>)
 8005f8c:	fba3 2302 	umull	r2, r3, r3, r2
 8005f90:	095b      	lsrs	r3, r3, #5
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f98:	441c      	add	r4, r3
 8005f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005fa4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005fa8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005fac:	4642      	mov	r2, r8
 8005fae:	464b      	mov	r3, r9
 8005fb0:	1891      	adds	r1, r2, r2
 8005fb2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005fb4:	415b      	adcs	r3, r3
 8005fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005fbc:	4641      	mov	r1, r8
 8005fbe:	1851      	adds	r1, r2, r1
 8005fc0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005fc2:	4649      	mov	r1, r9
 8005fc4:	414b      	adcs	r3, r1
 8005fc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fc8:	f04f 0200 	mov.w	r2, #0
 8005fcc:	f04f 0300 	mov.w	r3, #0
 8005fd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005fd4:	4659      	mov	r1, fp
 8005fd6:	00cb      	lsls	r3, r1, #3
 8005fd8:	4651      	mov	r1, sl
 8005fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fde:	4651      	mov	r1, sl
 8005fe0:	00ca      	lsls	r2, r1, #3
 8005fe2:	4610      	mov	r0, r2
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	4642      	mov	r2, r8
 8005fea:	189b      	adds	r3, r3, r2
 8005fec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ff0:	464b      	mov	r3, r9
 8005ff2:	460a      	mov	r2, r1
 8005ff4:	eb42 0303 	adc.w	r3, r2, r3
 8005ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006008:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800600c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006010:	460b      	mov	r3, r1
 8006012:	18db      	adds	r3, r3, r3
 8006014:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006016:	4613      	mov	r3, r2
 8006018:	eb42 0303 	adc.w	r3, r2, r3
 800601c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800601e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006022:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006026:	f7fa fddf 	bl	8000be8 <__aeabi_uldivmod>
 800602a:	4602      	mov	r2, r0
 800602c:	460b      	mov	r3, r1
 800602e:	4b0d      	ldr	r3, [pc, #52]	@ (8006064 <UART_SetConfig+0x2d4>)
 8006030:	fba3 1302 	umull	r1, r3, r3, r2
 8006034:	095b      	lsrs	r3, r3, #5
 8006036:	2164      	movs	r1, #100	@ 0x64
 8006038:	fb01 f303 	mul.w	r3, r1, r3
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	3332      	adds	r3, #50	@ 0x32
 8006042:	4a08      	ldr	r2, [pc, #32]	@ (8006064 <UART_SetConfig+0x2d4>)
 8006044:	fba2 2303 	umull	r2, r3, r2, r3
 8006048:	095b      	lsrs	r3, r3, #5
 800604a:	f003 0207 	and.w	r2, r3, #7
 800604e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4422      	add	r2, r4
 8006056:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006058:	e106      	b.n	8006268 <UART_SetConfig+0x4d8>
 800605a:	bf00      	nop
 800605c:	40011000 	.word	0x40011000
 8006060:	40011400 	.word	0x40011400
 8006064:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800606c:	2200      	movs	r2, #0
 800606e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006072:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006076:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800607a:	4642      	mov	r2, r8
 800607c:	464b      	mov	r3, r9
 800607e:	1891      	adds	r1, r2, r2
 8006080:	6239      	str	r1, [r7, #32]
 8006082:	415b      	adcs	r3, r3
 8006084:	627b      	str	r3, [r7, #36]	@ 0x24
 8006086:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800608a:	4641      	mov	r1, r8
 800608c:	1854      	adds	r4, r2, r1
 800608e:	4649      	mov	r1, r9
 8006090:	eb43 0501 	adc.w	r5, r3, r1
 8006094:	f04f 0200 	mov.w	r2, #0
 8006098:	f04f 0300 	mov.w	r3, #0
 800609c:	00eb      	lsls	r3, r5, #3
 800609e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060a2:	00e2      	lsls	r2, r4, #3
 80060a4:	4614      	mov	r4, r2
 80060a6:	461d      	mov	r5, r3
 80060a8:	4643      	mov	r3, r8
 80060aa:	18e3      	adds	r3, r4, r3
 80060ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80060b0:	464b      	mov	r3, r9
 80060b2:	eb45 0303 	adc.w	r3, r5, r3
 80060b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80060ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	f04f 0300 	mov.w	r3, #0
 80060d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80060d6:	4629      	mov	r1, r5
 80060d8:	008b      	lsls	r3, r1, #2
 80060da:	4621      	mov	r1, r4
 80060dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060e0:	4621      	mov	r1, r4
 80060e2:	008a      	lsls	r2, r1, #2
 80060e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80060e8:	f7fa fd7e 	bl	8000be8 <__aeabi_uldivmod>
 80060ec:	4602      	mov	r2, r0
 80060ee:	460b      	mov	r3, r1
 80060f0:	4b60      	ldr	r3, [pc, #384]	@ (8006274 <UART_SetConfig+0x4e4>)
 80060f2:	fba3 2302 	umull	r2, r3, r3, r2
 80060f6:	095b      	lsrs	r3, r3, #5
 80060f8:	011c      	lsls	r4, r3, #4
 80060fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060fe:	2200      	movs	r2, #0
 8006100:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006104:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006108:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800610c:	4642      	mov	r2, r8
 800610e:	464b      	mov	r3, r9
 8006110:	1891      	adds	r1, r2, r2
 8006112:	61b9      	str	r1, [r7, #24]
 8006114:	415b      	adcs	r3, r3
 8006116:	61fb      	str	r3, [r7, #28]
 8006118:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800611c:	4641      	mov	r1, r8
 800611e:	1851      	adds	r1, r2, r1
 8006120:	6139      	str	r1, [r7, #16]
 8006122:	4649      	mov	r1, r9
 8006124:	414b      	adcs	r3, r1
 8006126:	617b      	str	r3, [r7, #20]
 8006128:	f04f 0200 	mov.w	r2, #0
 800612c:	f04f 0300 	mov.w	r3, #0
 8006130:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006134:	4659      	mov	r1, fp
 8006136:	00cb      	lsls	r3, r1, #3
 8006138:	4651      	mov	r1, sl
 800613a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800613e:	4651      	mov	r1, sl
 8006140:	00ca      	lsls	r2, r1, #3
 8006142:	4610      	mov	r0, r2
 8006144:	4619      	mov	r1, r3
 8006146:	4603      	mov	r3, r0
 8006148:	4642      	mov	r2, r8
 800614a:	189b      	adds	r3, r3, r2
 800614c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006150:	464b      	mov	r3, r9
 8006152:	460a      	mov	r2, r1
 8006154:	eb42 0303 	adc.w	r3, r2, r3
 8006158:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800615c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006166:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006168:	f04f 0200 	mov.w	r2, #0
 800616c:	f04f 0300 	mov.w	r3, #0
 8006170:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006174:	4649      	mov	r1, r9
 8006176:	008b      	lsls	r3, r1, #2
 8006178:	4641      	mov	r1, r8
 800617a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800617e:	4641      	mov	r1, r8
 8006180:	008a      	lsls	r2, r1, #2
 8006182:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006186:	f7fa fd2f 	bl	8000be8 <__aeabi_uldivmod>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	4611      	mov	r1, r2
 8006190:	4b38      	ldr	r3, [pc, #224]	@ (8006274 <UART_SetConfig+0x4e4>)
 8006192:	fba3 2301 	umull	r2, r3, r3, r1
 8006196:	095b      	lsrs	r3, r3, #5
 8006198:	2264      	movs	r2, #100	@ 0x64
 800619a:	fb02 f303 	mul.w	r3, r2, r3
 800619e:	1acb      	subs	r3, r1, r3
 80061a0:	011b      	lsls	r3, r3, #4
 80061a2:	3332      	adds	r3, #50	@ 0x32
 80061a4:	4a33      	ldr	r2, [pc, #204]	@ (8006274 <UART_SetConfig+0x4e4>)
 80061a6:	fba2 2303 	umull	r2, r3, r2, r3
 80061aa:	095b      	lsrs	r3, r3, #5
 80061ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061b0:	441c      	add	r4, r3
 80061b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061b6:	2200      	movs	r2, #0
 80061b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80061ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80061bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80061c0:	4642      	mov	r2, r8
 80061c2:	464b      	mov	r3, r9
 80061c4:	1891      	adds	r1, r2, r2
 80061c6:	60b9      	str	r1, [r7, #8]
 80061c8:	415b      	adcs	r3, r3
 80061ca:	60fb      	str	r3, [r7, #12]
 80061cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061d0:	4641      	mov	r1, r8
 80061d2:	1851      	adds	r1, r2, r1
 80061d4:	6039      	str	r1, [r7, #0]
 80061d6:	4649      	mov	r1, r9
 80061d8:	414b      	adcs	r3, r1
 80061da:	607b      	str	r3, [r7, #4]
 80061dc:	f04f 0200 	mov.w	r2, #0
 80061e0:	f04f 0300 	mov.w	r3, #0
 80061e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061e8:	4659      	mov	r1, fp
 80061ea:	00cb      	lsls	r3, r1, #3
 80061ec:	4651      	mov	r1, sl
 80061ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061f2:	4651      	mov	r1, sl
 80061f4:	00ca      	lsls	r2, r1, #3
 80061f6:	4610      	mov	r0, r2
 80061f8:	4619      	mov	r1, r3
 80061fa:	4603      	mov	r3, r0
 80061fc:	4642      	mov	r2, r8
 80061fe:	189b      	adds	r3, r3, r2
 8006200:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006202:	464b      	mov	r3, r9
 8006204:	460a      	mov	r2, r1
 8006206:	eb42 0303 	adc.w	r3, r2, r3
 800620a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800620c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	663b      	str	r3, [r7, #96]	@ 0x60
 8006216:	667a      	str	r2, [r7, #100]	@ 0x64
 8006218:	f04f 0200 	mov.w	r2, #0
 800621c:	f04f 0300 	mov.w	r3, #0
 8006220:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006224:	4649      	mov	r1, r9
 8006226:	008b      	lsls	r3, r1, #2
 8006228:	4641      	mov	r1, r8
 800622a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800622e:	4641      	mov	r1, r8
 8006230:	008a      	lsls	r2, r1, #2
 8006232:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006236:	f7fa fcd7 	bl	8000be8 <__aeabi_uldivmod>
 800623a:	4602      	mov	r2, r0
 800623c:	460b      	mov	r3, r1
 800623e:	4b0d      	ldr	r3, [pc, #52]	@ (8006274 <UART_SetConfig+0x4e4>)
 8006240:	fba3 1302 	umull	r1, r3, r3, r2
 8006244:	095b      	lsrs	r3, r3, #5
 8006246:	2164      	movs	r1, #100	@ 0x64
 8006248:	fb01 f303 	mul.w	r3, r1, r3
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	011b      	lsls	r3, r3, #4
 8006250:	3332      	adds	r3, #50	@ 0x32
 8006252:	4a08      	ldr	r2, [pc, #32]	@ (8006274 <UART_SetConfig+0x4e4>)
 8006254:	fba2 2303 	umull	r2, r3, r2, r3
 8006258:	095b      	lsrs	r3, r3, #5
 800625a:	f003 020f 	and.w	r2, r3, #15
 800625e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4422      	add	r2, r4
 8006266:	609a      	str	r2, [r3, #8]
}
 8006268:	bf00      	nop
 800626a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800626e:	46bd      	mov	sp, r7
 8006270:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006274:	51eb851f 	.word	0x51eb851f

08006278 <__NVIC_SetPriority>:
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	4603      	mov	r3, r0
 8006280:	6039      	str	r1, [r7, #0]
 8006282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006288:	2b00      	cmp	r3, #0
 800628a:	db0a      	blt.n	80062a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	b2da      	uxtb	r2, r3
 8006290:	490c      	ldr	r1, [pc, #48]	@ (80062c4 <__NVIC_SetPriority+0x4c>)
 8006292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006296:	0112      	lsls	r2, r2, #4
 8006298:	b2d2      	uxtb	r2, r2
 800629a:	440b      	add	r3, r1
 800629c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80062a0:	e00a      	b.n	80062b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	4908      	ldr	r1, [pc, #32]	@ (80062c8 <__NVIC_SetPriority+0x50>)
 80062a8:	79fb      	ldrb	r3, [r7, #7]
 80062aa:	f003 030f 	and.w	r3, r3, #15
 80062ae:	3b04      	subs	r3, #4
 80062b0:	0112      	lsls	r2, r2, #4
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	440b      	add	r3, r1
 80062b6:	761a      	strb	r2, [r3, #24]
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr
 80062c4:	e000e100 	.word	0xe000e100
 80062c8:	e000ed00 	.word	0xe000ed00

080062cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80062d0:	4b05      	ldr	r3, [pc, #20]	@ (80062e8 <SysTick_Handler+0x1c>)
 80062d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80062d4:	f002 f8c0 	bl	8008458 <xTaskGetSchedulerState>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d001      	beq.n	80062e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80062de:	f002 ffbb 	bl	8009258 <xPortSysTickHandler>
  }
}
 80062e2:	bf00      	nop
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	e000e010 	.word	0xe000e010

080062ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80062ec:	b580      	push	{r7, lr}
 80062ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80062f0:	2100      	movs	r1, #0
 80062f2:	f06f 0004 	mvn.w	r0, #4
 80062f6:	f7ff ffbf 	bl	8006278 <__NVIC_SetPriority>
#endif
}
 80062fa:	bf00      	nop
 80062fc:	bd80      	pop	{r7, pc}
	...

08006300 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006306:	f3ef 8305 	mrs	r3, IPSR
 800630a:	603b      	str	r3, [r7, #0]
  return(result);
 800630c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006312:	f06f 0305 	mvn.w	r3, #5
 8006316:	607b      	str	r3, [r7, #4]
 8006318:	e00c      	b.n	8006334 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800631a:	4b0a      	ldr	r3, [pc, #40]	@ (8006344 <osKernelInitialize+0x44>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d105      	bne.n	800632e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006322:	4b08      	ldr	r3, [pc, #32]	@ (8006344 <osKernelInitialize+0x44>)
 8006324:	2201      	movs	r2, #1
 8006326:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006328:	2300      	movs	r3, #0
 800632a:	607b      	str	r3, [r7, #4]
 800632c:	e002      	b.n	8006334 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800632e:	f04f 33ff 	mov.w	r3, #4294967295
 8006332:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006334:	687b      	ldr	r3, [r7, #4]
}
 8006336:	4618      	mov	r0, r3
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	20000360 	.word	0x20000360

08006348 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800634e:	f3ef 8305 	mrs	r3, IPSR
 8006352:	603b      	str	r3, [r7, #0]
  return(result);
 8006354:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <osKernelStart+0x1a>
    stat = osErrorISR;
 800635a:	f06f 0305 	mvn.w	r3, #5
 800635e:	607b      	str	r3, [r7, #4]
 8006360:	e010      	b.n	8006384 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006362:	4b0b      	ldr	r3, [pc, #44]	@ (8006390 <osKernelStart+0x48>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d109      	bne.n	800637e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800636a:	f7ff ffbf 	bl	80062ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800636e:	4b08      	ldr	r3, [pc, #32]	@ (8006390 <osKernelStart+0x48>)
 8006370:	2202      	movs	r2, #2
 8006372:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006374:	f001 fc0c 	bl	8007b90 <vTaskStartScheduler>
      stat = osOK;
 8006378:	2300      	movs	r3, #0
 800637a:	607b      	str	r3, [r7, #4]
 800637c:	e002      	b.n	8006384 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800637e:	f04f 33ff 	mov.w	r3, #4294967295
 8006382:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006384:	687b      	ldr	r3, [r7, #4]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	20000360 	.word	0x20000360

08006394 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006394:	b580      	push	{r7, lr}
 8006396:	b08e      	sub	sp, #56	@ 0x38
 8006398:	af04      	add	r7, sp, #16
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80063a0:	2300      	movs	r3, #0
 80063a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063a4:	f3ef 8305 	mrs	r3, IPSR
 80063a8:	617b      	str	r3, [r7, #20]
  return(result);
 80063aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d17e      	bne.n	80064ae <osThreadNew+0x11a>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d07b      	beq.n	80064ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80063b6:	2380      	movs	r3, #128	@ 0x80
 80063b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80063ba:	2318      	movs	r3, #24
 80063bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80063be:	2300      	movs	r3, #0
 80063c0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80063c2:	f04f 33ff 	mov.w	r3, #4294967295
 80063c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d045      	beq.n	800645a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <osThreadNew+0x48>
        name = attr->name;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d008      	beq.n	8006402 <osThreadNew+0x6e>
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	2b38      	cmp	r3, #56	@ 0x38
 80063f4:	d805      	bhi.n	8006402 <osThreadNew+0x6e>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <osThreadNew+0x72>
        return (NULL);
 8006402:	2300      	movs	r3, #0
 8006404:	e054      	b.n	80064b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	089b      	lsrs	r3, r3, #2
 8006414:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00e      	beq.n	800643c <osThreadNew+0xa8>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	2ba7      	cmp	r3, #167	@ 0xa7
 8006424:	d90a      	bls.n	800643c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800642a:	2b00      	cmp	r3, #0
 800642c:	d006      	beq.n	800643c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <osThreadNew+0xa8>
        mem = 1;
 8006436:	2301      	movs	r3, #1
 8006438:	61bb      	str	r3, [r7, #24]
 800643a:	e010      	b.n	800645e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10c      	bne.n	800645e <osThreadNew+0xca>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d108      	bne.n	800645e <osThreadNew+0xca>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d104      	bne.n	800645e <osThreadNew+0xca>
          mem = 0;
 8006454:	2300      	movs	r3, #0
 8006456:	61bb      	str	r3, [r7, #24]
 8006458:	e001      	b.n	800645e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d110      	bne.n	8006486 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800646c:	9202      	str	r2, [sp, #8]
 800646e:	9301      	str	r3, [sp, #4]
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	6a3a      	ldr	r2, [r7, #32]
 8006478:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f001 f994 	bl	80077a8 <xTaskCreateStatic>
 8006480:	4603      	mov	r3, r0
 8006482:	613b      	str	r3, [r7, #16]
 8006484:	e013      	b.n	80064ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d110      	bne.n	80064ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	b29a      	uxth	r2, r3
 8006490:	f107 0310 	add.w	r3, r7, #16
 8006494:	9301      	str	r3, [sp, #4]
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f001 f9e2 	bl	8007868 <xTaskCreate>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d001      	beq.n	80064ae <osThreadNew+0x11a>
            hTask = NULL;
 80064aa:	2300      	movs	r3, #0
 80064ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80064ae:	693b      	ldr	r3, [r7, #16]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3728      	adds	r7, #40	@ 0x28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064c0:	f3ef 8305 	mrs	r3, IPSR
 80064c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80064c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d003      	beq.n	80064d4 <osDelay+0x1c>
    stat = osErrorISR;
 80064cc:	f06f 0305 	mvn.w	r3, #5
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	e007      	b.n	80064e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80064d4:	2300      	movs	r3, #0
 80064d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f001 fb20 	bl	8007b24 <vTaskDelay>
    }
  }

  return (stat);
 80064e4:	68fb      	ldr	r3, [r7, #12]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b088      	sub	sp, #32
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80064f6:	2300      	movs	r3, #0
 80064f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064fa:	f3ef 8305 	mrs	r3, IPSR
 80064fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8006500:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006502:	2b00      	cmp	r3, #0
 8006504:	d174      	bne.n	80065f0 <osMutexNew+0x102>
    if (attr != NULL) {
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <osMutexNew+0x26>
      type = attr->attr_bits;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	61bb      	str	r3, [r7, #24]
 8006512:	e001      	b.n	8006518 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006514:	2300      	movs	r3, #0
 8006516:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d002      	beq.n	8006528 <osMutexNew+0x3a>
      rmtx = 1U;
 8006522:	2301      	movs	r3, #1
 8006524:	617b      	str	r3, [r7, #20]
 8006526:	e001      	b.n	800652c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006528:	2300      	movs	r3, #0
 800652a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	f003 0308 	and.w	r3, r3, #8
 8006532:	2b00      	cmp	r3, #0
 8006534:	d15c      	bne.n	80065f0 <osMutexNew+0x102>
      mem = -1;
 8006536:	f04f 33ff 	mov.w	r3, #4294967295
 800653a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d015      	beq.n	800656e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d006      	beq.n	8006558 <osMutexNew+0x6a>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	2b4f      	cmp	r3, #79	@ 0x4f
 8006550:	d902      	bls.n	8006558 <osMutexNew+0x6a>
          mem = 1;
 8006552:	2301      	movs	r3, #1
 8006554:	613b      	str	r3, [r7, #16]
 8006556:	e00c      	b.n	8006572 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d108      	bne.n	8006572 <osMutexNew+0x84>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d104      	bne.n	8006572 <osMutexNew+0x84>
            mem = 0;
 8006568:	2300      	movs	r3, #0
 800656a:	613b      	str	r3, [r7, #16]
 800656c:	e001      	b.n	8006572 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800656e:	2300      	movs	r3, #0
 8006570:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d112      	bne.n	800659e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d007      	beq.n	800658e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	4619      	mov	r1, r3
 8006584:	2004      	movs	r0, #4
 8006586:	f000 fb20 	bl	8006bca <xQueueCreateMutexStatic>
 800658a:	61f8      	str	r0, [r7, #28]
 800658c:	e016      	b.n	80065bc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	4619      	mov	r1, r3
 8006594:	2001      	movs	r0, #1
 8006596:	f000 fb18 	bl	8006bca <xQueueCreateMutexStatic>
 800659a:	61f8      	str	r0, [r7, #28]
 800659c:	e00e      	b.n	80065bc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10b      	bne.n	80065bc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d004      	beq.n	80065b4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80065aa:	2004      	movs	r0, #4
 80065ac:	f000 faf5 	bl	8006b9a <xQueueCreateMutex>
 80065b0:	61f8      	str	r0, [r7, #28]
 80065b2:	e003      	b.n	80065bc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80065b4:	2001      	movs	r0, #1
 80065b6:	f000 faf0 	bl	8006b9a <xQueueCreateMutex>
 80065ba:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00c      	beq.n	80065dc <osMutexNew+0xee>
        if (attr != NULL) {
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <osMutexNew+0xe2>
          name = attr->name;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	60fb      	str	r3, [r7, #12]
 80065ce:	e001      	b.n	80065d4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80065d4:	68f9      	ldr	r1, [r7, #12]
 80065d6:	69f8      	ldr	r0, [r7, #28]
 80065d8:	f001 f85e 	bl	8007698 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d006      	beq.n	80065f0 <osMutexNew+0x102>
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	f043 0301 	orr.w	r3, r3, #1
 80065ee:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80065f0:	69fb      	ldr	r3, [r7, #28]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3720      	adds	r7, #32
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b08a      	sub	sp, #40	@ 0x28
 80065fe:	af02      	add	r7, sp, #8
 8006600:	60f8      	str	r0, [r7, #12]
 8006602:	60b9      	str	r1, [r7, #8]
 8006604:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006606:	2300      	movs	r3, #0
 8006608:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800660a:	f3ef 8305 	mrs	r3, IPSR
 800660e:	613b      	str	r3, [r7, #16]
  return(result);
 8006610:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006612:	2b00      	cmp	r3, #0
 8006614:	d175      	bne.n	8006702 <osSemaphoreNew+0x108>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d072      	beq.n	8006702 <osSemaphoreNew+0x108>
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	429a      	cmp	r2, r3
 8006622:	d86e      	bhi.n	8006702 <osSemaphoreNew+0x108>
    mem = -1;
 8006624:	f04f 33ff 	mov.w	r3, #4294967295
 8006628:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d015      	beq.n	800665c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d006      	beq.n	8006646 <osSemaphoreNew+0x4c>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	2b4f      	cmp	r3, #79	@ 0x4f
 800663e:	d902      	bls.n	8006646 <osSemaphoreNew+0x4c>
        mem = 1;
 8006640:	2301      	movs	r3, #1
 8006642:	61bb      	str	r3, [r7, #24]
 8006644:	e00c      	b.n	8006660 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d108      	bne.n	8006660 <osSemaphoreNew+0x66>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d104      	bne.n	8006660 <osSemaphoreNew+0x66>
          mem = 0;
 8006656:	2300      	movs	r3, #0
 8006658:	61bb      	str	r3, [r7, #24]
 800665a:	e001      	b.n	8006660 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800665c:	2300      	movs	r3, #0
 800665e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006666:	d04c      	beq.n	8006702 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d128      	bne.n	80066c0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d10a      	bne.n	800668a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	2203      	movs	r2, #3
 800667a:	9200      	str	r2, [sp, #0]
 800667c:	2200      	movs	r2, #0
 800667e:	2100      	movs	r1, #0
 8006680:	2001      	movs	r0, #1
 8006682:	f000 f995 	bl	80069b0 <xQueueGenericCreateStatic>
 8006686:	61f8      	str	r0, [r7, #28]
 8006688:	e005      	b.n	8006696 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800668a:	2203      	movs	r2, #3
 800668c:	2100      	movs	r1, #0
 800668e:	2001      	movs	r0, #1
 8006690:	f000 fa0b 	bl	8006aaa <xQueueGenericCreate>
 8006694:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d022      	beq.n	80066e2 <osSemaphoreNew+0xe8>
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d01f      	beq.n	80066e2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80066a2:	2300      	movs	r3, #0
 80066a4:	2200      	movs	r2, #0
 80066a6:	2100      	movs	r1, #0
 80066a8:	69f8      	ldr	r0, [r7, #28]
 80066aa:	f000 fb17 	bl	8006cdc <xQueueGenericSend>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d016      	beq.n	80066e2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80066b4:	69f8      	ldr	r0, [r7, #28]
 80066b6:	f000 fea3 	bl	8007400 <vQueueDelete>
            hSemaphore = NULL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	61fb      	str	r3, [r7, #28]
 80066be:	e010      	b.n	80066e2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d108      	bne.n	80066d8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	461a      	mov	r2, r3
 80066cc:	68b9      	ldr	r1, [r7, #8]
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 fa96 	bl	8006c00 <xQueueCreateCountingSemaphoreStatic>
 80066d4:	61f8      	str	r0, [r7, #28]
 80066d6:	e004      	b.n	80066e2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80066d8:	68b9      	ldr	r1, [r7, #8]
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 fac9 	bl	8006c72 <xQueueCreateCountingSemaphore>
 80066e0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00c      	beq.n	8006702 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	617b      	str	r3, [r7, #20]
 80066f4:	e001      	b.n	80066fa <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80066f6:	2300      	movs	r3, #0
 80066f8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80066fa:	6979      	ldr	r1, [r7, #20]
 80066fc:	69f8      	ldr	r0, [r7, #28]
 80066fe:	f000 ffcb 	bl	8007698 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006702:	69fb      	ldr	r3, [r7, #28]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3720      	adds	r7, #32
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4a07      	ldr	r2, [pc, #28]	@ (8006738 <vApplicationGetIdleTaskMemory+0x2c>)
 800671c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	4a06      	ldr	r2, [pc, #24]	@ (800673c <vApplicationGetIdleTaskMemory+0x30>)
 8006722:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2280      	movs	r2, #128	@ 0x80
 8006728:	601a      	str	r2, [r3, #0]
}
 800672a:	bf00      	nop
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	20000364 	.word	0x20000364
 800673c:	2000040c 	.word	0x2000040c

08006740 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4a07      	ldr	r2, [pc, #28]	@ (800676c <vApplicationGetTimerTaskMemory+0x2c>)
 8006750:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	4a06      	ldr	r2, [pc, #24]	@ (8006770 <vApplicationGetTimerTaskMemory+0x30>)
 8006756:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800675e:	601a      	str	r2, [r3, #0]
}
 8006760:	bf00      	nop
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	2000060c 	.word	0x2000060c
 8006770:	200006b4 	.word	0x200006b4

08006774 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f103 0208 	add.w	r2, r3, #8
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f04f 32ff 	mov.w	r2, #4294967295
 800678c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f103 0208 	add.w	r2, r3, #8
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f103 0208 	add.w	r2, r3, #8
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067c2:	bf00      	nop
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067ce:	b480      	push	{r7}
 80067d0:	b085      	sub	sp, #20
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	689a      	ldr	r2, [r3, #8]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	601a      	str	r2, [r3, #0]
}
 800680a:	bf00      	nop
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006816:	b480      	push	{r7}
 8006818:	b085      	sub	sp, #20
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800682c:	d103      	bne.n	8006836 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	e00c      	b.n	8006850 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	3308      	adds	r3, #8
 800683a:	60fb      	str	r3, [r7, #12]
 800683c:	e002      	b.n	8006844 <vListInsert+0x2e>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	429a      	cmp	r2, r3
 800684e:	d2f6      	bcs.n	800683e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	601a      	str	r2, [r3, #0]
}
 800687c:	bf00      	nop
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	6892      	ldr	r2, [r2, #8]
 800689e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	6852      	ldr	r2, [r2, #4]
 80068a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d103      	bne.n	80068bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689a      	ldr	r2, [r3, #8]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	1e5a      	subs	r2, r3, #1
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10b      	bne.n	8006908 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80068f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006902:	bf00      	nop
 8006904:	bf00      	nop
 8006906:	e7fd      	b.n	8006904 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006908:	f002 fc16 	bl	8009138 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006914:	68f9      	ldr	r1, [r7, #12]
 8006916:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006918:	fb01 f303 	mul.w	r3, r1, r3
 800691c:	441a      	add	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006938:	3b01      	subs	r3, #1
 800693a:	68f9      	ldr	r1, [r7, #12]
 800693c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800693e:	fb01 f303 	mul.w	r3, r1, r3
 8006942:	441a      	add	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	22ff      	movs	r2, #255	@ 0xff
 800694c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	22ff      	movs	r2, #255	@ 0xff
 8006954:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d114      	bne.n	8006988 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d01a      	beq.n	800699c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	3310      	adds	r3, #16
 800696a:	4618      	mov	r0, r3
 800696c:	f001 fbae 	bl	80080cc <xTaskRemoveFromEventList>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d012      	beq.n	800699c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006976:	4b0d      	ldr	r3, [pc, #52]	@ (80069ac <xQueueGenericReset+0xd0>)
 8006978:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	e009      	b.n	800699c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3310      	adds	r3, #16
 800698c:	4618      	mov	r0, r3
 800698e:	f7ff fef1 	bl	8006774 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3324      	adds	r3, #36	@ 0x24
 8006996:	4618      	mov	r0, r3
 8006998:	f7ff feec 	bl	8006774 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800699c:	f002 fbfe 	bl	800919c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069a0:	2301      	movs	r3, #1
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	e000ed04 	.word	0xe000ed04

080069b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08e      	sub	sp, #56	@ 0x38
 80069b4:	af02      	add	r7, sp, #8
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
 80069bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10b      	bne.n	80069dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80069d6:	bf00      	nop
 80069d8:	bf00      	nop
 80069da:	e7fd      	b.n	80069d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10b      	bne.n	80069fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80069e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80069f4:	bf00      	nop
 80069f6:	bf00      	nop
 80069f8:	e7fd      	b.n	80069f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d002      	beq.n	8006a06 <xQueueGenericCreateStatic+0x56>
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <xQueueGenericCreateStatic+0x5a>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e000      	b.n	8006a0c <xQueueGenericCreateStatic+0x5c>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10b      	bne.n	8006a28 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	623b      	str	r3, [r7, #32]
}
 8006a22:	bf00      	nop
 8006a24:	bf00      	nop
 8006a26:	e7fd      	b.n	8006a24 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d102      	bne.n	8006a34 <xQueueGenericCreateStatic+0x84>
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d101      	bne.n	8006a38 <xQueueGenericCreateStatic+0x88>
 8006a34:	2301      	movs	r3, #1
 8006a36:	e000      	b.n	8006a3a <xQueueGenericCreateStatic+0x8a>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10b      	bne.n	8006a56 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a42:	f383 8811 	msr	BASEPRI, r3
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	61fb      	str	r3, [r7, #28]
}
 8006a50:	bf00      	nop
 8006a52:	bf00      	nop
 8006a54:	e7fd      	b.n	8006a52 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a56:	2350      	movs	r3, #80	@ 0x50
 8006a58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2b50      	cmp	r3, #80	@ 0x50
 8006a5e:	d00b      	beq.n	8006a78 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	61bb      	str	r3, [r7, #24]
}
 8006a72:	bf00      	nop
 8006a74:	bf00      	nop
 8006a76:	e7fd      	b.n	8006a74 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a78:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00d      	beq.n	8006aa0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a8c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	4613      	mov	r3, r2
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	68b9      	ldr	r1, [r7, #8]
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f000 f840 	bl	8006b20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3730      	adds	r7, #48	@ 0x30
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b08a      	sub	sp, #40	@ 0x28
 8006aae:	af02      	add	r7, sp, #8
 8006ab0:	60f8      	str	r0, [r7, #12]
 8006ab2:	60b9      	str	r1, [r7, #8]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10b      	bne.n	8006ad6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	613b      	str	r3, [r7, #16]
}
 8006ad0:	bf00      	nop
 8006ad2:	bf00      	nop
 8006ad4:	e7fd      	b.n	8006ad2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	fb02 f303 	mul.w	r3, r2, r3
 8006ade:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	3350      	adds	r3, #80	@ 0x50
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f002 fc49 	bl	800937c <pvPortMalloc>
 8006aea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d011      	beq.n	8006b16 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	3350      	adds	r3, #80	@ 0x50
 8006afa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b04:	79fa      	ldrb	r2, [r7, #7]
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	68b9      	ldr	r1, [r7, #8]
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 f805 	bl	8006b20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b16:	69bb      	ldr	r3, [r7, #24]
	}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3720      	adds	r7, #32
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d103      	bne.n	8006b3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	e002      	b.n	8006b42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b4e:	2101      	movs	r1, #1
 8006b50:	69b8      	ldr	r0, [r7, #24]
 8006b52:	f7ff fec3 	bl	80068dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	78fa      	ldrb	r2, [r7, #3]
 8006b5a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b5e:	bf00      	nop
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b082      	sub	sp, #8
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00e      	beq.n	8006b92 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006b86:	2300      	movs	r3, #0
 8006b88:	2200      	movs	r2, #0
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 f8a5 	bl	8006cdc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006b92:	bf00      	nop
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b086      	sub	sp, #24
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	617b      	str	r3, [r7, #20]
 8006ba8:	2300      	movs	r3, #0
 8006baa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006bac:	79fb      	ldrb	r3, [r7, #7]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	6939      	ldr	r1, [r7, #16]
 8006bb2:	6978      	ldr	r0, [r7, #20]
 8006bb4:	f7ff ff79 	bl	8006aaa <xQueueGenericCreate>
 8006bb8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f7ff ffd3 	bl	8006b66 <prvInitialiseMutex>

		return xNewQueue;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
	}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3718      	adds	r7, #24
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b088      	sub	sp, #32
 8006bce:	af02      	add	r7, sp, #8
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	6039      	str	r1, [r7, #0]
 8006bd4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	617b      	str	r3, [r7, #20]
 8006bda:	2300      	movs	r3, #0
 8006bdc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006bde:	79fb      	ldrb	r3, [r7, #7]
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	2200      	movs	r2, #0
 8006be6:	6939      	ldr	r1, [r7, #16]
 8006be8:	6978      	ldr	r0, [r7, #20]
 8006bea:	f7ff fee1 	bl	80069b0 <xQueueGenericCreateStatic>
 8006bee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f7ff ffb8 	bl	8006b66 <prvInitialiseMutex>

		return xNewQueue;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
	}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3718      	adds	r7, #24
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b08a      	sub	sp, #40	@ 0x28
 8006c04:	af02      	add	r7, sp, #8
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10b      	bne.n	8006c2a <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8006c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c16:	f383 8811 	msr	BASEPRI, r3
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	61bb      	str	r3, [r7, #24]
}
 8006c24:	bf00      	nop
 8006c26:	bf00      	nop
 8006c28:	e7fd      	b.n	8006c26 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d90b      	bls.n	8006c4a <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8006c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c36:	f383 8811 	msr	BASEPRI, r3
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	617b      	str	r3, [r7, #20]
}
 8006c44:	bf00      	nop
 8006c46:	bf00      	nop
 8006c48:	e7fd      	b.n	8006c46 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	2100      	movs	r1, #0
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f7ff feab 	bl	80069b0 <xQueueGenericCreateStatic>
 8006c5a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006c68:	69fb      	ldr	r3, [r7, #28]
	}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3720      	adds	r7, #32
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b086      	sub	sp, #24
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10b      	bne.n	8006c9a <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8006c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	613b      	str	r3, [r7, #16]
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop
 8006c98:	e7fd      	b.n	8006c96 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d90b      	bls.n	8006cba <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8006ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca6:	f383 8811 	msr	BASEPRI, r3
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	60fb      	str	r3, [r7, #12]
}
 8006cb4:	bf00      	nop
 8006cb6:	bf00      	nop
 8006cb8:	e7fd      	b.n	8006cb6 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006cba:	2202      	movs	r2, #2
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7ff fef3 	bl	8006aaa <xQueueGenericCreate>
 8006cc4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d002      	beq.n	8006cd2 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006cd2:	697b      	ldr	r3, [r7, #20]
	}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3718      	adds	r7, #24
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b08e      	sub	sp, #56	@ 0x38
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006cea:	2300      	movs	r3, #0
 8006cec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10b      	bne.n	8006d10 <xQueueGenericSend+0x34>
	__asm volatile
 8006cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfc:	f383 8811 	msr	BASEPRI, r3
 8006d00:	f3bf 8f6f 	isb	sy
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d0a:	bf00      	nop
 8006d0c:	bf00      	nop
 8006d0e:	e7fd      	b.n	8006d0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d103      	bne.n	8006d1e <xQueueGenericSend+0x42>
 8006d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <xQueueGenericSend+0x46>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e000      	b.n	8006d24 <xQueueGenericSend+0x48>
 8006d22:	2300      	movs	r3, #0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10b      	bne.n	8006d40 <xQueueGenericSend+0x64>
	__asm volatile
 8006d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d2c:	f383 8811 	msr	BASEPRI, r3
 8006d30:	f3bf 8f6f 	isb	sy
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d3a:	bf00      	nop
 8006d3c:	bf00      	nop
 8006d3e:	e7fd      	b.n	8006d3c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d103      	bne.n	8006d4e <xQueueGenericSend+0x72>
 8006d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d101      	bne.n	8006d52 <xQueueGenericSend+0x76>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e000      	b.n	8006d54 <xQueueGenericSend+0x78>
 8006d52:	2300      	movs	r3, #0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10b      	bne.n	8006d70 <xQueueGenericSend+0x94>
	__asm volatile
 8006d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d5c:	f383 8811 	msr	BASEPRI, r3
 8006d60:	f3bf 8f6f 	isb	sy
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	623b      	str	r3, [r7, #32]
}
 8006d6a:	bf00      	nop
 8006d6c:	bf00      	nop
 8006d6e:	e7fd      	b.n	8006d6c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d70:	f001 fb72 	bl	8008458 <xTaskGetSchedulerState>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d102      	bne.n	8006d80 <xQueueGenericSend+0xa4>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d101      	bne.n	8006d84 <xQueueGenericSend+0xa8>
 8006d80:	2301      	movs	r3, #1
 8006d82:	e000      	b.n	8006d86 <xQueueGenericSend+0xaa>
 8006d84:	2300      	movs	r3, #0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10b      	bne.n	8006da2 <xQueueGenericSend+0xc6>
	__asm volatile
 8006d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d8e:	f383 8811 	msr	BASEPRI, r3
 8006d92:	f3bf 8f6f 	isb	sy
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	61fb      	str	r3, [r7, #28]
}
 8006d9c:	bf00      	nop
 8006d9e:	bf00      	nop
 8006da0:	e7fd      	b.n	8006d9e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006da2:	f002 f9c9 	bl	8009138 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d302      	bcc.n	8006db8 <xQueueGenericSend+0xdc>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d129      	bne.n	8006e0c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006db8:	683a      	ldr	r2, [r7, #0]
 8006dba:	68b9      	ldr	r1, [r7, #8]
 8006dbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006dbe:	f000 fb5b 	bl	8007478 <prvCopyDataToQueue>
 8006dc2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d010      	beq.n	8006dee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dce:	3324      	adds	r3, #36	@ 0x24
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f001 f97b 	bl	80080cc <xTaskRemoveFromEventList>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d013      	beq.n	8006e04 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ddc:	4b3f      	ldr	r3, [pc, #252]	@ (8006edc <xQueueGenericSend+0x200>)
 8006dde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	e00a      	b.n	8006e04 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d007      	beq.n	8006e04 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006df4:	4b39      	ldr	r3, [pc, #228]	@ (8006edc <xQueueGenericSend+0x200>)
 8006df6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e04:	f002 f9ca 	bl	800919c <vPortExitCritical>
				return pdPASS;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e063      	b.n	8006ed4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d103      	bne.n	8006e1a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e12:	f002 f9c3 	bl	800919c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e16:	2300      	movs	r3, #0
 8006e18:	e05c      	b.n	8006ed4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d106      	bne.n	8006e2e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e20:	f107 0314 	add.w	r3, r7, #20
 8006e24:	4618      	mov	r0, r3
 8006e26:	f001 f9b5 	bl	8008194 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e2e:	f002 f9b5 	bl	800919c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e32:	f000 ff1d 	bl	8007c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e36:	f002 f97f 	bl	8009138 <vPortEnterCritical>
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e40:	b25b      	sxtb	r3, r3
 8006e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e46:	d103      	bne.n	8006e50 <xQueueGenericSend+0x174>
 8006e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e56:	b25b      	sxtb	r3, r3
 8006e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5c:	d103      	bne.n	8006e66 <xQueueGenericSend+0x18a>
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e66:	f002 f999 	bl	800919c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e6a:	1d3a      	adds	r2, r7, #4
 8006e6c:	f107 0314 	add.w	r3, r7, #20
 8006e70:	4611      	mov	r1, r2
 8006e72:	4618      	mov	r0, r3
 8006e74:	f001 f9a4 	bl	80081c0 <xTaskCheckForTimeOut>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d124      	bne.n	8006ec8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e80:	f000 fbf2 	bl	8007668 <prvIsQueueFull>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d018      	beq.n	8006ebc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8c:	3310      	adds	r3, #16
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	4611      	mov	r1, r2
 8006e92:	4618      	mov	r0, r3
 8006e94:	f001 f8c8 	bl	8008028 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e9a:	f000 fb7d 	bl	8007598 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e9e:	f000 fef5 	bl	8007c8c <xTaskResumeAll>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f47f af7c 	bne.w	8006da2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8006edc <xQueueGenericSend+0x200>)
 8006eac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006eb0:	601a      	str	r2, [r3, #0]
 8006eb2:	f3bf 8f4f 	dsb	sy
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	e772      	b.n	8006da2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ebc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ebe:	f000 fb6b 	bl	8007598 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ec2:	f000 fee3 	bl	8007c8c <xTaskResumeAll>
 8006ec6:	e76c      	b.n	8006da2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ec8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006eca:	f000 fb65 	bl	8007598 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ece:	f000 fedd 	bl	8007c8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ed2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3738      	adds	r7, #56	@ 0x38
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	e000ed04 	.word	0xe000ed04

08006ee0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b090      	sub	sp, #64	@ 0x40
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
 8006eec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10b      	bne.n	8006f10 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efc:	f383 8811 	msr	BASEPRI, r3
 8006f00:	f3bf 8f6f 	isb	sy
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006f0a:	bf00      	nop
 8006f0c:	bf00      	nop
 8006f0e:	e7fd      	b.n	8006f0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d103      	bne.n	8006f1e <xQueueGenericSendFromISR+0x3e>
 8006f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <xQueueGenericSendFromISR+0x42>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e000      	b.n	8006f24 <xQueueGenericSendFromISR+0x44>
 8006f22:	2300      	movs	r3, #0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10b      	bne.n	8006f40 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006f3a:	bf00      	nop
 8006f3c:	bf00      	nop
 8006f3e:	e7fd      	b.n	8006f3c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d103      	bne.n	8006f4e <xQueueGenericSendFromISR+0x6e>
 8006f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d101      	bne.n	8006f52 <xQueueGenericSendFromISR+0x72>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e000      	b.n	8006f54 <xQueueGenericSendFromISR+0x74>
 8006f52:	2300      	movs	r3, #0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10b      	bne.n	8006f70 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	623b      	str	r3, [r7, #32]
}
 8006f6a:	bf00      	nop
 8006f6c:	bf00      	nop
 8006f6e:	e7fd      	b.n	8006f6c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f70:	f002 f9c2 	bl	80092f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f74:	f3ef 8211 	mrs	r2, BASEPRI
 8006f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f7c:	f383 8811 	msr	BASEPRI, r3
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	61fa      	str	r2, [r7, #28]
 8006f8a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f8c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f8e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d302      	bcc.n	8006fa2 <xQueueGenericSendFromISR+0xc2>
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d12f      	bne.n	8007002 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fa8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	68b9      	ldr	r1, [r7, #8]
 8006fb6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006fb8:	f000 fa5e 	bl	8007478 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006fbc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc4:	d112      	bne.n	8006fec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d016      	beq.n	8006ffc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd0:	3324      	adds	r3, #36	@ 0x24
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f001 f87a 	bl	80080cc <xTaskRemoveFromEventList>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00e      	beq.n	8006ffc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00b      	beq.n	8006ffc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	e007      	b.n	8006ffc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006fec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	b25a      	sxtb	r2, r3
 8006ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007000:	e001      	b.n	8007006 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007002:	2300      	movs	r3, #0
 8007004:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007008:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007010:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007014:	4618      	mov	r0, r3
 8007016:	3740      	adds	r7, #64	@ 0x40
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b08c      	sub	sp, #48	@ 0x30
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007028:	2300      	movs	r3, #0
 800702a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10b      	bne.n	800704e <xQueueReceive+0x32>
	__asm volatile
 8007036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	623b      	str	r3, [r7, #32]
}
 8007048:	bf00      	nop
 800704a:	bf00      	nop
 800704c:	e7fd      	b.n	800704a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d103      	bne.n	800705c <xQueueReceive+0x40>
 8007054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007058:	2b00      	cmp	r3, #0
 800705a:	d101      	bne.n	8007060 <xQueueReceive+0x44>
 800705c:	2301      	movs	r3, #1
 800705e:	e000      	b.n	8007062 <xQueueReceive+0x46>
 8007060:	2300      	movs	r3, #0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10b      	bne.n	800707e <xQueueReceive+0x62>
	__asm volatile
 8007066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800706a:	f383 8811 	msr	BASEPRI, r3
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f3bf 8f4f 	dsb	sy
 8007076:	61fb      	str	r3, [r7, #28]
}
 8007078:	bf00      	nop
 800707a:	bf00      	nop
 800707c:	e7fd      	b.n	800707a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800707e:	f001 f9eb 	bl	8008458 <xTaskGetSchedulerState>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d102      	bne.n	800708e <xQueueReceive+0x72>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <xQueueReceive+0x76>
 800708e:	2301      	movs	r3, #1
 8007090:	e000      	b.n	8007094 <xQueueReceive+0x78>
 8007092:	2300      	movs	r3, #0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10b      	bne.n	80070b0 <xQueueReceive+0x94>
	__asm volatile
 8007098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709c:	f383 8811 	msr	BASEPRI, r3
 80070a0:	f3bf 8f6f 	isb	sy
 80070a4:	f3bf 8f4f 	dsb	sy
 80070a8:	61bb      	str	r3, [r7, #24]
}
 80070aa:	bf00      	nop
 80070ac:	bf00      	nop
 80070ae:	e7fd      	b.n	80070ac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070b0:	f002 f842 	bl	8009138 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d01f      	beq.n	8007100 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070c0:	68b9      	ldr	r1, [r7, #8]
 80070c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070c4:	f000 fa42 	bl	800754c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ca:	1e5a      	subs	r2, r3, #1
 80070cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00f      	beq.n	80070f8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070da:	3310      	adds	r3, #16
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 fff5 	bl	80080cc <xTaskRemoveFromEventList>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d007      	beq.n	80070f8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070e8:	4b3c      	ldr	r3, [pc, #240]	@ (80071dc <xQueueReceive+0x1c0>)
 80070ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070ee:	601a      	str	r2, [r3, #0]
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070f8:	f002 f850 	bl	800919c <vPortExitCritical>
				return pdPASS;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e069      	b.n	80071d4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d103      	bne.n	800710e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007106:	f002 f849 	bl	800919c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800710a:	2300      	movs	r3, #0
 800710c:	e062      	b.n	80071d4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800710e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007110:	2b00      	cmp	r3, #0
 8007112:	d106      	bne.n	8007122 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007114:	f107 0310 	add.w	r3, r7, #16
 8007118:	4618      	mov	r0, r3
 800711a:	f001 f83b 	bl	8008194 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800711e:	2301      	movs	r3, #1
 8007120:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007122:	f002 f83b 	bl	800919c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007126:	f000 fda3 	bl	8007c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800712a:	f002 f805 	bl	8009138 <vPortEnterCritical>
 800712e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007130:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007134:	b25b      	sxtb	r3, r3
 8007136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800713a:	d103      	bne.n	8007144 <xQueueReceive+0x128>
 800713c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713e:	2200      	movs	r2, #0
 8007140:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007146:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800714a:	b25b      	sxtb	r3, r3
 800714c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007150:	d103      	bne.n	800715a <xQueueReceive+0x13e>
 8007152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007154:	2200      	movs	r2, #0
 8007156:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800715a:	f002 f81f 	bl	800919c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800715e:	1d3a      	adds	r2, r7, #4
 8007160:	f107 0310 	add.w	r3, r7, #16
 8007164:	4611      	mov	r1, r2
 8007166:	4618      	mov	r0, r3
 8007168:	f001 f82a 	bl	80081c0 <xTaskCheckForTimeOut>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d123      	bne.n	80071ba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007172:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007174:	f000 fa62 	bl	800763c <prvIsQueueEmpty>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d017      	beq.n	80071ae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800717e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007180:	3324      	adds	r3, #36	@ 0x24
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	4611      	mov	r1, r2
 8007186:	4618      	mov	r0, r3
 8007188:	f000 ff4e 	bl	8008028 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800718c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800718e:	f000 fa03 	bl	8007598 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007192:	f000 fd7b 	bl	8007c8c <xTaskResumeAll>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d189      	bne.n	80070b0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800719c:	4b0f      	ldr	r3, [pc, #60]	@ (80071dc <xQueueReceive+0x1c0>)
 800719e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	f3bf 8f4f 	dsb	sy
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	e780      	b.n	80070b0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80071ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071b0:	f000 f9f2 	bl	8007598 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071b4:	f000 fd6a 	bl	8007c8c <xTaskResumeAll>
 80071b8:	e77a      	b.n	80070b0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80071ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071bc:	f000 f9ec 	bl	8007598 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071c0:	f000 fd64 	bl	8007c8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071c6:	f000 fa39 	bl	800763c <prvIsQueueEmpty>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f43f af6f 	beq.w	80070b0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80071d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3730      	adds	r7, #48	@ 0x30
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	e000ed04 	.word	0xe000ed04

080071e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08e      	sub	sp, #56	@ 0x38
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80071ea:	2300      	movs	r3, #0
 80071ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80071f2:	2300      	movs	r3, #0
 80071f4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10b      	bne.n	8007214 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	623b      	str	r3, [r7, #32]
}
 800720e:	bf00      	nop
 8007210:	bf00      	nop
 8007212:	e7fd      	b.n	8007210 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00b      	beq.n	8007234 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800721c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007220:	f383 8811 	msr	BASEPRI, r3
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	f3bf 8f4f 	dsb	sy
 800722c:	61fb      	str	r3, [r7, #28]
}
 800722e:	bf00      	nop
 8007230:	bf00      	nop
 8007232:	e7fd      	b.n	8007230 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007234:	f001 f910 	bl	8008458 <xTaskGetSchedulerState>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d102      	bne.n	8007244 <xQueueSemaphoreTake+0x64>
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <xQueueSemaphoreTake+0x68>
 8007244:	2301      	movs	r3, #1
 8007246:	e000      	b.n	800724a <xQueueSemaphoreTake+0x6a>
 8007248:	2300      	movs	r3, #0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10b      	bne.n	8007266 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	61bb      	str	r3, [r7, #24]
}
 8007260:	bf00      	nop
 8007262:	bf00      	nop
 8007264:	e7fd      	b.n	8007262 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007266:	f001 ff67 	bl	8009138 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800726a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800726c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800726e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007272:	2b00      	cmp	r3, #0
 8007274:	d024      	beq.n	80072c0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007278:	1e5a      	subs	r2, r3, #1
 800727a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800727c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800727e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d104      	bne.n	8007290 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007286:	f001 fa61 	bl	800874c <pvTaskIncrementMutexHeldCount>
 800728a:	4602      	mov	r2, r0
 800728c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800728e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00f      	beq.n	80072b8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729a:	3310      	adds	r3, #16
 800729c:	4618      	mov	r0, r3
 800729e:	f000 ff15 	bl	80080cc <xTaskRemoveFromEventList>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d007      	beq.n	80072b8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80072a8:	4b54      	ldr	r3, [pc, #336]	@ (80073fc <xQueueSemaphoreTake+0x21c>)
 80072aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072ae:	601a      	str	r2, [r3, #0]
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80072b8:	f001 ff70 	bl	800919c <vPortExitCritical>
				return pdPASS;
 80072bc:	2301      	movs	r3, #1
 80072be:	e098      	b.n	80073f2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d112      	bne.n	80072ec <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80072c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00b      	beq.n	80072e4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80072cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d0:	f383 8811 	msr	BASEPRI, r3
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	617b      	str	r3, [r7, #20]
}
 80072de:	bf00      	nop
 80072e0:	bf00      	nop
 80072e2:	e7fd      	b.n	80072e0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80072e4:	f001 ff5a 	bl	800919c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80072e8:	2300      	movs	r3, #0
 80072ea:	e082      	b.n	80073f2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d106      	bne.n	8007300 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072f2:	f107 030c 	add.w	r3, r7, #12
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 ff4c 	bl	8008194 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072fc:	2301      	movs	r3, #1
 80072fe:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007300:	f001 ff4c 	bl	800919c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007304:	f000 fcb4 	bl	8007c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007308:	f001 ff16 	bl	8009138 <vPortEnterCritical>
 800730c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800730e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007312:	b25b      	sxtb	r3, r3
 8007314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007318:	d103      	bne.n	8007322 <xQueueSemaphoreTake+0x142>
 800731a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731c:	2200      	movs	r2, #0
 800731e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007324:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007328:	b25b      	sxtb	r3, r3
 800732a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800732e:	d103      	bne.n	8007338 <xQueueSemaphoreTake+0x158>
 8007330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007332:	2200      	movs	r2, #0
 8007334:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007338:	f001 ff30 	bl	800919c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800733c:	463a      	mov	r2, r7
 800733e:	f107 030c 	add.w	r3, r7, #12
 8007342:	4611      	mov	r1, r2
 8007344:	4618      	mov	r0, r3
 8007346:	f000 ff3b 	bl	80081c0 <xTaskCheckForTimeOut>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d132      	bne.n	80073b6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007350:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007352:	f000 f973 	bl	800763c <prvIsQueueEmpty>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d026      	beq.n	80073aa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800735c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d109      	bne.n	8007378 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007364:	f001 fee8 	bl	8009138 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	4618      	mov	r0, r3
 800736e:	f001 f891 	bl	8008494 <xTaskPriorityInherit>
 8007372:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007374:	f001 ff12 	bl	800919c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800737a:	3324      	adds	r3, #36	@ 0x24
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	4611      	mov	r1, r2
 8007380:	4618      	mov	r0, r3
 8007382:	f000 fe51 	bl	8008028 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007386:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007388:	f000 f906 	bl	8007598 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800738c:	f000 fc7e 	bl	8007c8c <xTaskResumeAll>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	f47f af67 	bne.w	8007266 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007398:	4b18      	ldr	r3, [pc, #96]	@ (80073fc <xQueueSemaphoreTake+0x21c>)
 800739a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800739e:	601a      	str	r2, [r3, #0]
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	f3bf 8f6f 	isb	sy
 80073a8:	e75d      	b.n	8007266 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80073aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80073ac:	f000 f8f4 	bl	8007598 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073b0:	f000 fc6c 	bl	8007c8c <xTaskResumeAll>
 80073b4:	e757      	b.n	8007266 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80073b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80073b8:	f000 f8ee 	bl	8007598 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073bc:	f000 fc66 	bl	8007c8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80073c2:	f000 f93b 	bl	800763c <prvIsQueueEmpty>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f43f af4c 	beq.w	8007266 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80073ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00d      	beq.n	80073f0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80073d4:	f001 feb0 	bl	8009138 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80073d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80073da:	f000 f835 	bl	8007448 <prvGetDisinheritPriorityAfterTimeout>
 80073de:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80073e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80073e6:	4618      	mov	r0, r3
 80073e8:	f001 f92c 	bl	8008644 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80073ec:	f001 fed6 	bl	800919c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80073f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3738      	adds	r7, #56	@ 0x38
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	e000ed04 	.word	0xe000ed04

08007400 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10b      	bne.n	800742a <vQueueDelete+0x2a>
	__asm volatile
 8007412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007416:	f383 8811 	msr	BASEPRI, r3
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	60bb      	str	r3, [r7, #8]
}
 8007424:	bf00      	nop
 8007426:	bf00      	nop
 8007428:	e7fd      	b.n	8007426 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f000 f95e 	bl	80076ec <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007436:	2b00      	cmp	r3, #0
 8007438:	d102      	bne.n	8007440 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f002 f86c 	bl	8009518 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007440:	bf00      	nop
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007454:	2b00      	cmp	r3, #0
 8007456:	d006      	beq.n	8007466 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	e001      	b.n	800746a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007466:	2300      	movs	r3, #0
 8007468:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800746a:	68fb      	ldr	r3, [r7, #12]
	}
 800746c:	4618      	mov	r0, r3
 800746e:	3714      	adds	r7, #20
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007484:	2300      	movs	r3, #0
 8007486:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800748c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007492:	2b00      	cmp	r3, #0
 8007494:	d10d      	bne.n	80074b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d14d      	bne.n	800753a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	4618      	mov	r0, r3
 80074a4:	f001 f85e 	bl	8008564 <xTaskPriorityDisinherit>
 80074a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	609a      	str	r2, [r3, #8]
 80074b0:	e043      	b.n	800753a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d119      	bne.n	80074ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6858      	ldr	r0, [r3, #4]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c0:	461a      	mov	r2, r3
 80074c2:	68b9      	ldr	r1, [r7, #8]
 80074c4:	f003 f86f 	bl	800a5a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074d0:	441a      	add	r2, r3
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	685a      	ldr	r2, [r3, #4]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d32b      	bcc.n	800753a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	605a      	str	r2, [r3, #4]
 80074ea:	e026      	b.n	800753a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	68d8      	ldr	r0, [r3, #12]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f4:	461a      	mov	r2, r3
 80074f6:	68b9      	ldr	r1, [r7, #8]
 80074f8:	f003 f855 	bl	800a5a6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	68da      	ldr	r2, [r3, #12]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007504:	425b      	negs	r3, r3
 8007506:	441a      	add	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	68da      	ldr	r2, [r3, #12]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	429a      	cmp	r2, r3
 8007516:	d207      	bcs.n	8007528 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	689a      	ldr	r2, [r3, #8]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007520:	425b      	negs	r3, r3
 8007522:	441a      	add	r2, r3
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b02      	cmp	r3, #2
 800752c:	d105      	bne.n	800753a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	3b01      	subs	r3, #1
 8007538:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	1c5a      	adds	r2, r3, #1
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007542:	697b      	ldr	r3, [r7, #20]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3718      	adds	r7, #24
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800755a:	2b00      	cmp	r3, #0
 800755c:	d018      	beq.n	8007590 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68da      	ldr	r2, [r3, #12]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007566:	441a      	add	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68da      	ldr	r2, [r3, #12]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	429a      	cmp	r2, r3
 8007576:	d303      	bcc.n	8007580 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	68d9      	ldr	r1, [r3, #12]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007588:	461a      	mov	r2, r3
 800758a:	6838      	ldr	r0, [r7, #0]
 800758c:	f003 f80b 	bl	800a5a6 <memcpy>
	}
}
 8007590:	bf00      	nop
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80075a0:	f001 fdca 	bl	8009138 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075ac:	e011      	b.n	80075d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d012      	beq.n	80075dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	3324      	adds	r3, #36	@ 0x24
 80075ba:	4618      	mov	r0, r3
 80075bc:	f000 fd86 	bl	80080cc <xTaskRemoveFromEventList>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80075c6:	f000 fe5f 	bl	8008288 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
 80075cc:	3b01      	subs	r3, #1
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	dce9      	bgt.n	80075ae <prvUnlockQueue+0x16>
 80075da:	e000      	b.n	80075de <prvUnlockQueue+0x46>
					break;
 80075dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	22ff      	movs	r2, #255	@ 0xff
 80075e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80075e6:	f001 fdd9 	bl	800919c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80075ea:	f001 fda5 	bl	8009138 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80075f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80075f6:	e011      	b.n	800761c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d012      	beq.n	8007626 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	3310      	adds	r3, #16
 8007604:	4618      	mov	r0, r3
 8007606:	f000 fd61 	bl	80080cc <xTaskRemoveFromEventList>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007610:	f000 fe3a 	bl	8008288 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007614:	7bbb      	ldrb	r3, [r7, #14]
 8007616:	3b01      	subs	r3, #1
 8007618:	b2db      	uxtb	r3, r3
 800761a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800761c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007620:	2b00      	cmp	r3, #0
 8007622:	dce9      	bgt.n	80075f8 <prvUnlockQueue+0x60>
 8007624:	e000      	b.n	8007628 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007626:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	22ff      	movs	r2, #255	@ 0xff
 800762c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007630:	f001 fdb4 	bl	800919c <vPortExitCritical>
}
 8007634:	bf00      	nop
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007644:	f001 fd78 	bl	8009138 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800764c:	2b00      	cmp	r3, #0
 800764e:	d102      	bne.n	8007656 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007650:	2301      	movs	r3, #1
 8007652:	60fb      	str	r3, [r7, #12]
 8007654:	e001      	b.n	800765a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007656:	2300      	movs	r3, #0
 8007658:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800765a:	f001 fd9f 	bl	800919c <vPortExitCritical>

	return xReturn;
 800765e:	68fb      	ldr	r3, [r7, #12]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007670:	f001 fd62 	bl	8009138 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800767c:	429a      	cmp	r2, r3
 800767e:	d102      	bne.n	8007686 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007680:	2301      	movs	r3, #1
 8007682:	60fb      	str	r3, [r7, #12]
 8007684:	e001      	b.n	800768a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007686:	2300      	movs	r3, #0
 8007688:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800768a:	f001 fd87 	bl	800919c <vPortExitCritical>

	return xReturn;
 800768e:	68fb      	ldr	r3, [r7, #12]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80076a2:	2300      	movs	r3, #0
 80076a4:	60fb      	str	r3, [r7, #12]
 80076a6:	e014      	b.n	80076d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80076a8:	4a0f      	ldr	r2, [pc, #60]	@ (80076e8 <vQueueAddToRegistry+0x50>)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10b      	bne.n	80076cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80076b4:	490c      	ldr	r1, [pc, #48]	@ (80076e8 <vQueueAddToRegistry+0x50>)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80076be:	4a0a      	ldr	r2, [pc, #40]	@ (80076e8 <vQueueAddToRegistry+0x50>)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	00db      	lsls	r3, r3, #3
 80076c4:	4413      	add	r3, r2
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80076ca:	e006      	b.n	80076da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	3301      	adds	r3, #1
 80076d0:	60fb      	str	r3, [r7, #12]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2b07      	cmp	r3, #7
 80076d6:	d9e7      	bls.n	80076a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80076d8:	bf00      	nop
 80076da:	bf00      	nop
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	20000ab4 	.word	0x20000ab4

080076ec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80076f4:	2300      	movs	r3, #0
 80076f6:	60fb      	str	r3, [r7, #12]
 80076f8:	e016      	b.n	8007728 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80076fa:	4a10      	ldr	r2, [pc, #64]	@ (800773c <vQueueUnregisterQueue+0x50>)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	00db      	lsls	r3, r3, #3
 8007700:	4413      	add	r3, r2
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	429a      	cmp	r2, r3
 8007708:	d10b      	bne.n	8007722 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800770a:	4a0c      	ldr	r2, [pc, #48]	@ (800773c <vQueueUnregisterQueue+0x50>)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2100      	movs	r1, #0
 8007710:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007714:	4a09      	ldr	r2, [pc, #36]	@ (800773c <vQueueUnregisterQueue+0x50>)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	00db      	lsls	r3, r3, #3
 800771a:	4413      	add	r3, r2
 800771c:	2200      	movs	r2, #0
 800771e:	605a      	str	r2, [r3, #4]
				break;
 8007720:	e006      	b.n	8007730 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	3301      	adds	r3, #1
 8007726:	60fb      	str	r3, [r7, #12]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2b07      	cmp	r3, #7
 800772c:	d9e5      	bls.n	80076fa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800772e:	bf00      	nop
 8007730:	bf00      	nop
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	20000ab4 	.word	0x20000ab4

08007740 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007750:	f001 fcf2 	bl	8009138 <vPortEnterCritical>
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800775a:	b25b      	sxtb	r3, r3
 800775c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007760:	d103      	bne.n	800776a <vQueueWaitForMessageRestricted+0x2a>
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007770:	b25b      	sxtb	r3, r3
 8007772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007776:	d103      	bne.n	8007780 <vQueueWaitForMessageRestricted+0x40>
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007780:	f001 fd0c 	bl	800919c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007788:	2b00      	cmp	r3, #0
 800778a:	d106      	bne.n	800779a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	3324      	adds	r3, #36	@ 0x24
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	68b9      	ldr	r1, [r7, #8]
 8007794:	4618      	mov	r0, r3
 8007796:	f000 fc6d 	bl	8008074 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800779a:	6978      	ldr	r0, [r7, #20]
 800779c:	f7ff fefc 	bl	8007598 <prvUnlockQueue>
	}
 80077a0:	bf00      	nop
 80077a2:	3718      	adds	r7, #24
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b08e      	sub	sp, #56	@ 0x38
 80077ac:	af04      	add	r7, sp, #16
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
 80077b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80077b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10b      	bne.n	80077d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	623b      	str	r3, [r7, #32]
}
 80077ce:	bf00      	nop
 80077d0:	bf00      	nop
 80077d2:	e7fd      	b.n	80077d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80077d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10b      	bne.n	80077f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80077da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	61fb      	str	r3, [r7, #28]
}
 80077ec:	bf00      	nop
 80077ee:	bf00      	nop
 80077f0:	e7fd      	b.n	80077ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80077f2:	23a8      	movs	r3, #168	@ 0xa8
 80077f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	2ba8      	cmp	r3, #168	@ 0xa8
 80077fa:	d00b      	beq.n	8007814 <xTaskCreateStatic+0x6c>
	__asm volatile
 80077fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007800:	f383 8811 	msr	BASEPRI, r3
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	61bb      	str	r3, [r7, #24]
}
 800780e:	bf00      	nop
 8007810:	bf00      	nop
 8007812:	e7fd      	b.n	8007810 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007814:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007818:	2b00      	cmp	r3, #0
 800781a:	d01e      	beq.n	800785a <xTaskCreateStatic+0xb2>
 800781c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800781e:	2b00      	cmp	r3, #0
 8007820:	d01b      	beq.n	800785a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007824:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007828:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800782a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800782c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782e:	2202      	movs	r2, #2
 8007830:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007834:	2300      	movs	r3, #0
 8007836:	9303      	str	r3, [sp, #12]
 8007838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783a:	9302      	str	r3, [sp, #8]
 800783c:	f107 0314 	add.w	r3, r7, #20
 8007840:	9301      	str	r3, [sp, #4]
 8007842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	68b9      	ldr	r1, [r7, #8]
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f000 f851 	bl	80078f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007852:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007854:	f000 f8f6 	bl	8007a44 <prvAddNewTaskToReadyList>
 8007858:	e001      	b.n	800785e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800785a:	2300      	movs	r3, #0
 800785c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800785e:	697b      	ldr	r3, [r7, #20]
	}
 8007860:	4618      	mov	r0, r3
 8007862:	3728      	adds	r7, #40	@ 0x28
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007868:	b580      	push	{r7, lr}
 800786a:	b08c      	sub	sp, #48	@ 0x30
 800786c:	af04      	add	r7, sp, #16
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	603b      	str	r3, [r7, #0]
 8007874:	4613      	mov	r3, r2
 8007876:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007878:	88fb      	ldrh	r3, [r7, #6]
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4618      	mov	r0, r3
 800787e:	f001 fd7d 	bl	800937c <pvPortMalloc>
 8007882:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00e      	beq.n	80078a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800788a:	20a8      	movs	r0, #168	@ 0xa8
 800788c:	f001 fd76 	bl	800937c <pvPortMalloc>
 8007890:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	631a      	str	r2, [r3, #48]	@ 0x30
 800789e:	e005      	b.n	80078ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80078a0:	6978      	ldr	r0, [r7, #20]
 80078a2:	f001 fe39 	bl	8009518 <vPortFree>
 80078a6:	e001      	b.n	80078ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80078a8:	2300      	movs	r3, #0
 80078aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d017      	beq.n	80078e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80078ba:	88fa      	ldrh	r2, [r7, #6]
 80078bc:	2300      	movs	r3, #0
 80078be:	9303      	str	r3, [sp, #12]
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	9302      	str	r3, [sp, #8]
 80078c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078c6:	9301      	str	r3, [sp, #4]
 80078c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	68b9      	ldr	r1, [r7, #8]
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f000 f80f 	bl	80078f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078d6:	69f8      	ldr	r0, [r7, #28]
 80078d8:	f000 f8b4 	bl	8007a44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80078dc:	2301      	movs	r3, #1
 80078de:	61bb      	str	r3, [r7, #24]
 80078e0:	e002      	b.n	80078e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80078e2:	f04f 33ff 	mov.w	r3, #4294967295
 80078e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80078e8:	69bb      	ldr	r3, [r7, #24]
	}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3720      	adds	r7, #32
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
	...

080078f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b088      	sub	sp, #32
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
 8007900:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007904:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	461a      	mov	r2, r3
 800790c:	21a5      	movs	r1, #165	@ 0xa5
 800790e:	f002 fd56 	bl	800a3be <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007914:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800791c:	3b01      	subs	r3, #1
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4413      	add	r3, r2
 8007922:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	f023 0307 	bic.w	r3, r3, #7
 800792a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	f003 0307 	and.w	r3, r3, #7
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00b      	beq.n	800794e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	617b      	str	r3, [r7, #20]
}
 8007948:	bf00      	nop
 800794a:	bf00      	nop
 800794c:	e7fd      	b.n	800794a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d01f      	beq.n	8007994 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007954:	2300      	movs	r3, #0
 8007956:	61fb      	str	r3, [r7, #28]
 8007958:	e012      	b.n	8007980 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	4413      	add	r3, r2
 8007960:	7819      	ldrb	r1, [r3, #0]
 8007962:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	4413      	add	r3, r2
 8007968:	3334      	adds	r3, #52	@ 0x34
 800796a:	460a      	mov	r2, r1
 800796c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	4413      	add	r3, r2
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d006      	beq.n	8007988 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	3301      	adds	r3, #1
 800797e:	61fb      	str	r3, [r7, #28]
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	2b0f      	cmp	r3, #15
 8007984:	d9e9      	bls.n	800795a <prvInitialiseNewTask+0x66>
 8007986:	e000      	b.n	800798a <prvInitialiseNewTask+0x96>
			{
				break;
 8007988:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800798a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798c:	2200      	movs	r2, #0
 800798e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007992:	e003      	b.n	800799c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007996:	2200      	movs	r2, #0
 8007998:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800799c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799e:	2b37      	cmp	r3, #55	@ 0x37
 80079a0:	d901      	bls.n	80079a6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80079a2:	2337      	movs	r3, #55	@ 0x37
 80079a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80079a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80079ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079b0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80079b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b4:	2200      	movs	r2, #0
 80079b6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80079b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ba:	3304      	adds	r3, #4
 80079bc:	4618      	mov	r0, r3
 80079be:	f7fe fef9 	bl	80067b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80079c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c4:	3318      	adds	r3, #24
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7fe fef4 	bl	80067b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80079cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80079d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80079dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079e0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80079e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e4:	2200      	movs	r2, #0
 80079e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80079ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80079f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f4:	3354      	adds	r3, #84	@ 0x54
 80079f6:	224c      	movs	r2, #76	@ 0x4c
 80079f8:	2100      	movs	r1, #0
 80079fa:	4618      	mov	r0, r3
 80079fc:	f002 fcdf 	bl	800a3be <memset>
 8007a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a02:	4a0d      	ldr	r2, [pc, #52]	@ (8007a38 <prvInitialiseNewTask+0x144>)
 8007a04:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a08:	4a0c      	ldr	r2, [pc, #48]	@ (8007a3c <prvInitialiseNewTask+0x148>)
 8007a0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8007a40 <prvInitialiseNewTask+0x14c>)
 8007a10:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	68f9      	ldr	r1, [r7, #12]
 8007a16:	69b8      	ldr	r0, [r7, #24]
 8007a18:	f001 fa5a 	bl	8008ed0 <pxPortInitialiseStack>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d002      	beq.n	8007a2e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a2e:	bf00      	nop
 8007a30:	3720      	adds	r7, #32
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20004d50 	.word	0x20004d50
 8007a3c:	20004db8 	.word	0x20004db8
 8007a40:	20004e20 	.word	0x20004e20

08007a44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a4c:	f001 fb74 	bl	8009138 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a50:	4b2d      	ldr	r3, [pc, #180]	@ (8007b08 <prvAddNewTaskToReadyList+0xc4>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	3301      	adds	r3, #1
 8007a56:	4a2c      	ldr	r2, [pc, #176]	@ (8007b08 <prvAddNewTaskToReadyList+0xc4>)
 8007a58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a5a:	4b2c      	ldr	r3, [pc, #176]	@ (8007b0c <prvAddNewTaskToReadyList+0xc8>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d109      	bne.n	8007a76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a62:	4a2a      	ldr	r2, [pc, #168]	@ (8007b0c <prvAddNewTaskToReadyList+0xc8>)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a68:	4b27      	ldr	r3, [pc, #156]	@ (8007b08 <prvAddNewTaskToReadyList+0xc4>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d110      	bne.n	8007a92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a70:	f000 fc2e 	bl	80082d0 <prvInitialiseTaskLists>
 8007a74:	e00d      	b.n	8007a92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a76:	4b26      	ldr	r3, [pc, #152]	@ (8007b10 <prvAddNewTaskToReadyList+0xcc>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d109      	bne.n	8007a92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a7e:	4b23      	ldr	r3, [pc, #140]	@ (8007b0c <prvAddNewTaskToReadyList+0xc8>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d802      	bhi.n	8007a92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8007b0c <prvAddNewTaskToReadyList+0xc8>)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007a92:	4b20      	ldr	r3, [pc, #128]	@ (8007b14 <prvAddNewTaskToReadyList+0xd0>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	3301      	adds	r3, #1
 8007a98:	4a1e      	ldr	r2, [pc, #120]	@ (8007b14 <prvAddNewTaskToReadyList+0xd0>)
 8007a9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8007b14 <prvAddNewTaskToReadyList+0xd0>)
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8007b18 <prvAddNewTaskToReadyList+0xd4>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d903      	bls.n	8007ab8 <prvAddNewTaskToReadyList+0x74>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab4:	4a18      	ldr	r2, [pc, #96]	@ (8007b18 <prvAddNewTaskToReadyList+0xd4>)
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007abc:	4613      	mov	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	4a15      	ldr	r2, [pc, #84]	@ (8007b1c <prvAddNewTaskToReadyList+0xd8>)
 8007ac6:	441a      	add	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	3304      	adds	r3, #4
 8007acc:	4619      	mov	r1, r3
 8007ace:	4610      	mov	r0, r2
 8007ad0:	f7fe fe7d 	bl	80067ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ad4:	f001 fb62 	bl	800919c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8007b10 <prvAddNewTaskToReadyList+0xcc>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00e      	beq.n	8007afe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8007b0c <prvAddNewTaskToReadyList+0xc8>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d207      	bcs.n	8007afe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007aee:	4b0c      	ldr	r3, [pc, #48]	@ (8007b20 <prvAddNewTaskToReadyList+0xdc>)
 8007af0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007af4:	601a      	str	r2, [r3, #0]
 8007af6:	f3bf 8f4f 	dsb	sy
 8007afa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007afe:	bf00      	nop
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	20000fc8 	.word	0x20000fc8
 8007b0c:	20000af4 	.word	0x20000af4
 8007b10:	20000fd4 	.word	0x20000fd4
 8007b14:	20000fe4 	.word	0x20000fe4
 8007b18:	20000fd0 	.word	0x20000fd0
 8007b1c:	20000af8 	.word	0x20000af8
 8007b20:	e000ed04 	.word	0xe000ed04

08007b24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d018      	beq.n	8007b68 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b36:	4b14      	ldr	r3, [pc, #80]	@ (8007b88 <vTaskDelay+0x64>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00b      	beq.n	8007b56 <vTaskDelay+0x32>
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	60bb      	str	r3, [r7, #8]
}
 8007b50:	bf00      	nop
 8007b52:	bf00      	nop
 8007b54:	e7fd      	b.n	8007b52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007b56:	f000 f88b 	bl	8007c70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fe09 	bl	8008774 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b62:	f000 f893 	bl	8007c8c <xTaskResumeAll>
 8007b66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d107      	bne.n	8007b7e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007b6e:	4b07      	ldr	r3, [pc, #28]	@ (8007b8c <vTaskDelay+0x68>)
 8007b70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b7e:	bf00      	nop
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	20000ff0 	.word	0x20000ff0
 8007b8c:	e000ed04 	.word	0xe000ed04

08007b90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08a      	sub	sp, #40	@ 0x28
 8007b94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007b96:	2300      	movs	r3, #0
 8007b98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b9e:	463a      	mov	r2, r7
 8007ba0:	1d39      	adds	r1, r7, #4
 8007ba2:	f107 0308 	add.w	r3, r7, #8
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fe fdb0 	bl	800670c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	9202      	str	r2, [sp, #8]
 8007bb4:	9301      	str	r3, [sp, #4]
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	460a      	mov	r2, r1
 8007bbe:	4924      	ldr	r1, [pc, #144]	@ (8007c50 <vTaskStartScheduler+0xc0>)
 8007bc0:	4824      	ldr	r0, [pc, #144]	@ (8007c54 <vTaskStartScheduler+0xc4>)
 8007bc2:	f7ff fdf1 	bl	80077a8 <xTaskCreateStatic>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	4a23      	ldr	r2, [pc, #140]	@ (8007c58 <vTaskStartScheduler+0xc8>)
 8007bca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007bcc:	4b22      	ldr	r3, [pc, #136]	@ (8007c58 <vTaskStartScheduler+0xc8>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d002      	beq.n	8007bda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	617b      	str	r3, [r7, #20]
 8007bd8:	e001      	b.n	8007bde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d102      	bne.n	8007bea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007be4:	f000 fe1a 	bl	800881c <xTimerCreateTimerTask>
 8007be8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d11b      	bne.n	8007c28 <vTaskStartScheduler+0x98>
	__asm volatile
 8007bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf4:	f383 8811 	msr	BASEPRI, r3
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	613b      	str	r3, [r7, #16]
}
 8007c02:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c04:	4b15      	ldr	r3, [pc, #84]	@ (8007c5c <vTaskStartScheduler+0xcc>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	3354      	adds	r3, #84	@ 0x54
 8007c0a:	4a15      	ldr	r2, [pc, #84]	@ (8007c60 <vTaskStartScheduler+0xd0>)
 8007c0c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c0e:	4b15      	ldr	r3, [pc, #84]	@ (8007c64 <vTaskStartScheduler+0xd4>)
 8007c10:	f04f 32ff 	mov.w	r2, #4294967295
 8007c14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c16:	4b14      	ldr	r3, [pc, #80]	@ (8007c68 <vTaskStartScheduler+0xd8>)
 8007c18:	2201      	movs	r2, #1
 8007c1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c1c:	4b13      	ldr	r3, [pc, #76]	@ (8007c6c <vTaskStartScheduler+0xdc>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c22:	f001 f9e5 	bl	8008ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c26:	e00f      	b.n	8007c48 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2e:	d10b      	bne.n	8007c48 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	60fb      	str	r3, [r7, #12]
}
 8007c42:	bf00      	nop
 8007c44:	bf00      	nop
 8007c46:	e7fd      	b.n	8007c44 <vTaskStartScheduler+0xb4>
}
 8007c48:	bf00      	nop
 8007c4a:	3718      	adds	r7, #24
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	0800c5a0 	.word	0x0800c5a0
 8007c54:	080082a1 	.word	0x080082a1
 8007c58:	20000fec 	.word	0x20000fec
 8007c5c:	20000af4 	.word	0x20000af4
 8007c60:	2000001c 	.word	0x2000001c
 8007c64:	20000fe8 	.word	0x20000fe8
 8007c68:	20000fd4 	.word	0x20000fd4
 8007c6c:	20000fcc 	.word	0x20000fcc

08007c70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c70:	b480      	push	{r7}
 8007c72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007c74:	4b04      	ldr	r3, [pc, #16]	@ (8007c88 <vTaskSuspendAll+0x18>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	4a03      	ldr	r2, [pc, #12]	@ (8007c88 <vTaskSuspendAll+0x18>)
 8007c7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007c7e:	bf00      	nop
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	20000ff0 	.word	0x20000ff0

08007c8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c92:	2300      	movs	r3, #0
 8007c94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c96:	2300      	movs	r3, #0
 8007c98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c9a:	4b42      	ldr	r3, [pc, #264]	@ (8007da4 <xTaskResumeAll+0x118>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10b      	bne.n	8007cba <xTaskResumeAll+0x2e>
	__asm volatile
 8007ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca6:	f383 8811 	msr	BASEPRI, r3
 8007caa:	f3bf 8f6f 	isb	sy
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	603b      	str	r3, [r7, #0]
}
 8007cb4:	bf00      	nop
 8007cb6:	bf00      	nop
 8007cb8:	e7fd      	b.n	8007cb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007cba:	f001 fa3d 	bl	8009138 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007cbe:	4b39      	ldr	r3, [pc, #228]	@ (8007da4 <xTaskResumeAll+0x118>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	4a37      	ldr	r2, [pc, #220]	@ (8007da4 <xTaskResumeAll+0x118>)
 8007cc6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cc8:	4b36      	ldr	r3, [pc, #216]	@ (8007da4 <xTaskResumeAll+0x118>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d162      	bne.n	8007d96 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007cd0:	4b35      	ldr	r3, [pc, #212]	@ (8007da8 <xTaskResumeAll+0x11c>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d05e      	beq.n	8007d96 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cd8:	e02f      	b.n	8007d3a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cda:	4b34      	ldr	r3, [pc, #208]	@ (8007dac <xTaskResumeAll+0x120>)
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	3318      	adds	r3, #24
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fe fdce 	bl	8006888 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	3304      	adds	r3, #4
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fe fdc9 	bl	8006888 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8007db0 <xTaskResumeAll+0x124>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d903      	bls.n	8007d0a <xTaskResumeAll+0x7e>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d06:	4a2a      	ldr	r2, [pc, #168]	@ (8007db0 <xTaskResumeAll+0x124>)
 8007d08:	6013      	str	r3, [r2, #0]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d0e:	4613      	mov	r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	4413      	add	r3, r2
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4a27      	ldr	r2, [pc, #156]	@ (8007db4 <xTaskResumeAll+0x128>)
 8007d18:	441a      	add	r2, r3
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	3304      	adds	r3, #4
 8007d1e:	4619      	mov	r1, r3
 8007d20:	4610      	mov	r0, r2
 8007d22:	f7fe fd54 	bl	80067ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d2a:	4b23      	ldr	r3, [pc, #140]	@ (8007db8 <xTaskResumeAll+0x12c>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d302      	bcc.n	8007d3a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007d34:	4b21      	ldr	r3, [pc, #132]	@ (8007dbc <xTaskResumeAll+0x130>)
 8007d36:	2201      	movs	r2, #1
 8007d38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8007dac <xTaskResumeAll+0x120>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1cb      	bne.n	8007cda <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d48:	f000 fb66 	bl	8008418 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8007dc0 <xTaskResumeAll+0x134>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d010      	beq.n	8007d7a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d58:	f000 f846 	bl	8007de8 <xTaskIncrementTick>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d002      	beq.n	8007d68 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007d62:	4b16      	ldr	r3, [pc, #88]	@ (8007dbc <xTaskResumeAll+0x130>)
 8007d64:	2201      	movs	r2, #1
 8007d66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1f1      	bne.n	8007d58 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007d74:	4b12      	ldr	r3, [pc, #72]	@ (8007dc0 <xTaskResumeAll+0x134>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d7a:	4b10      	ldr	r3, [pc, #64]	@ (8007dbc <xTaskResumeAll+0x130>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d009      	beq.n	8007d96 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007d82:	2301      	movs	r3, #1
 8007d84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d86:	4b0f      	ldr	r3, [pc, #60]	@ (8007dc4 <xTaskResumeAll+0x138>)
 8007d88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d8c:	601a      	str	r2, [r3, #0]
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d96:	f001 fa01 	bl	800919c <vPortExitCritical>

	return xAlreadyYielded;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	20000ff0 	.word	0x20000ff0
 8007da8:	20000fc8 	.word	0x20000fc8
 8007dac:	20000f88 	.word	0x20000f88
 8007db0:	20000fd0 	.word	0x20000fd0
 8007db4:	20000af8 	.word	0x20000af8
 8007db8:	20000af4 	.word	0x20000af4
 8007dbc:	20000fdc 	.word	0x20000fdc
 8007dc0:	20000fd8 	.word	0x20000fd8
 8007dc4:	e000ed04 	.word	0xe000ed04

08007dc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007dce:	4b05      	ldr	r3, [pc, #20]	@ (8007de4 <xTaskGetTickCount+0x1c>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007dd4:	687b      	ldr	r3, [r7, #4]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	20000fcc 	.word	0x20000fcc

08007de8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007dee:	2300      	movs	r3, #0
 8007df0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007df2:	4b4f      	ldr	r3, [pc, #316]	@ (8007f30 <xTaskIncrementTick+0x148>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f040 8090 	bne.w	8007f1c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007dfc:	4b4d      	ldr	r3, [pc, #308]	@ (8007f34 <xTaskIncrementTick+0x14c>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3301      	adds	r3, #1
 8007e02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e04:	4a4b      	ldr	r2, [pc, #300]	@ (8007f34 <xTaskIncrementTick+0x14c>)
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d121      	bne.n	8007e54 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e10:	4b49      	ldr	r3, [pc, #292]	@ (8007f38 <xTaskIncrementTick+0x150>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00b      	beq.n	8007e32 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	603b      	str	r3, [r7, #0]
}
 8007e2c:	bf00      	nop
 8007e2e:	bf00      	nop
 8007e30:	e7fd      	b.n	8007e2e <xTaskIncrementTick+0x46>
 8007e32:	4b41      	ldr	r3, [pc, #260]	@ (8007f38 <xTaskIncrementTick+0x150>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	60fb      	str	r3, [r7, #12]
 8007e38:	4b40      	ldr	r3, [pc, #256]	@ (8007f3c <xTaskIncrementTick+0x154>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a3e      	ldr	r2, [pc, #248]	@ (8007f38 <xTaskIncrementTick+0x150>)
 8007e3e:	6013      	str	r3, [r2, #0]
 8007e40:	4a3e      	ldr	r2, [pc, #248]	@ (8007f3c <xTaskIncrementTick+0x154>)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6013      	str	r3, [r2, #0]
 8007e46:	4b3e      	ldr	r3, [pc, #248]	@ (8007f40 <xTaskIncrementTick+0x158>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	4a3c      	ldr	r2, [pc, #240]	@ (8007f40 <xTaskIncrementTick+0x158>)
 8007e4e:	6013      	str	r3, [r2, #0]
 8007e50:	f000 fae2 	bl	8008418 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e54:	4b3b      	ldr	r3, [pc, #236]	@ (8007f44 <xTaskIncrementTick+0x15c>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d349      	bcc.n	8007ef2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e5e:	4b36      	ldr	r3, [pc, #216]	@ (8007f38 <xTaskIncrementTick+0x150>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d104      	bne.n	8007e72 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e68:	4b36      	ldr	r3, [pc, #216]	@ (8007f44 <xTaskIncrementTick+0x15c>)
 8007e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e6e:	601a      	str	r2, [r3, #0]
					break;
 8007e70:	e03f      	b.n	8007ef2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e72:	4b31      	ldr	r3, [pc, #196]	@ (8007f38 <xTaskIncrementTick+0x150>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d203      	bcs.n	8007e92 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e8a:	4a2e      	ldr	r2, [pc, #184]	@ (8007f44 <xTaskIncrementTick+0x15c>)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007e90:	e02f      	b.n	8007ef2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	3304      	adds	r3, #4
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fe fcf6 	bl	8006888 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d004      	beq.n	8007eae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	3318      	adds	r3, #24
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7fe fced 	bl	8006888 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eb2:	4b25      	ldr	r3, [pc, #148]	@ (8007f48 <xTaskIncrementTick+0x160>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d903      	bls.n	8007ec2 <xTaskIncrementTick+0xda>
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ebe:	4a22      	ldr	r2, [pc, #136]	@ (8007f48 <xTaskIncrementTick+0x160>)
 8007ec0:	6013      	str	r3, [r2, #0]
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4a1f      	ldr	r2, [pc, #124]	@ (8007f4c <xTaskIncrementTick+0x164>)
 8007ed0:	441a      	add	r2, r3
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	4610      	mov	r0, r2
 8007eda:	f7fe fc78 	bl	80067ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8007f50 <xTaskIncrementTick+0x168>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d3b8      	bcc.n	8007e5e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007eec:	2301      	movs	r3, #1
 8007eee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ef0:	e7b5      	b.n	8007e5e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ef2:	4b17      	ldr	r3, [pc, #92]	@ (8007f50 <xTaskIncrementTick+0x168>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ef8:	4914      	ldr	r1, [pc, #80]	@ (8007f4c <xTaskIncrementTick+0x164>)
 8007efa:	4613      	mov	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	440b      	add	r3, r1
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d901      	bls.n	8007f0e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007f0e:	4b11      	ldr	r3, [pc, #68]	@ (8007f54 <xTaskIncrementTick+0x16c>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d007      	beq.n	8007f26 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007f16:	2301      	movs	r3, #1
 8007f18:	617b      	str	r3, [r7, #20]
 8007f1a:	e004      	b.n	8007f26 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8007f58 <xTaskIncrementTick+0x170>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	3301      	adds	r3, #1
 8007f22:	4a0d      	ldr	r2, [pc, #52]	@ (8007f58 <xTaskIncrementTick+0x170>)
 8007f24:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007f26:	697b      	ldr	r3, [r7, #20]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3718      	adds	r7, #24
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	20000ff0 	.word	0x20000ff0
 8007f34:	20000fcc 	.word	0x20000fcc
 8007f38:	20000f80 	.word	0x20000f80
 8007f3c:	20000f84 	.word	0x20000f84
 8007f40:	20000fe0 	.word	0x20000fe0
 8007f44:	20000fe8 	.word	0x20000fe8
 8007f48:	20000fd0 	.word	0x20000fd0
 8007f4c:	20000af8 	.word	0x20000af8
 8007f50:	20000af4 	.word	0x20000af4
 8007f54:	20000fdc 	.word	0x20000fdc
 8007f58:	20000fd8 	.word	0x20000fd8

08007f5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f62:	4b2b      	ldr	r3, [pc, #172]	@ (8008010 <vTaskSwitchContext+0xb4>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8008014 <vTaskSwitchContext+0xb8>)
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f70:	e047      	b.n	8008002 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007f72:	4b28      	ldr	r3, [pc, #160]	@ (8008014 <vTaskSwitchContext+0xb8>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f78:	4b27      	ldr	r3, [pc, #156]	@ (8008018 <vTaskSwitchContext+0xbc>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	60fb      	str	r3, [r7, #12]
 8007f7e:	e011      	b.n	8007fa4 <vTaskSwitchContext+0x48>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10b      	bne.n	8007f9e <vTaskSwitchContext+0x42>
	__asm volatile
 8007f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	607b      	str	r3, [r7, #4]
}
 8007f98:	bf00      	nop
 8007f9a:	bf00      	nop
 8007f9c:	e7fd      	b.n	8007f9a <vTaskSwitchContext+0x3e>
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	60fb      	str	r3, [r7, #12]
 8007fa4:	491d      	ldr	r1, [pc, #116]	@ (800801c <vTaskSwitchContext+0xc0>)
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	4413      	add	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	440b      	add	r3, r1
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d0e3      	beq.n	8007f80 <vTaskSwitchContext+0x24>
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4a16      	ldr	r2, [pc, #88]	@ (800801c <vTaskSwitchContext+0xc0>)
 8007fc4:	4413      	add	r3, r2
 8007fc6:	60bb      	str	r3, [r7, #8]
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	685a      	ldr	r2, [r3, #4]
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	605a      	str	r2, [r3, #4]
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	685a      	ldr	r2, [r3, #4]
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	3308      	adds	r3, #8
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d104      	bne.n	8007fe8 <vTaskSwitchContext+0x8c>
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	685a      	ldr	r2, [r3, #4]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	605a      	str	r2, [r3, #4]
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	4a0c      	ldr	r2, [pc, #48]	@ (8008020 <vTaskSwitchContext+0xc4>)
 8007ff0:	6013      	str	r3, [r2, #0]
 8007ff2:	4a09      	ldr	r2, [pc, #36]	@ (8008018 <vTaskSwitchContext+0xbc>)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ff8:	4b09      	ldr	r3, [pc, #36]	@ (8008020 <vTaskSwitchContext+0xc4>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	3354      	adds	r3, #84	@ 0x54
 8007ffe:	4a09      	ldr	r2, [pc, #36]	@ (8008024 <vTaskSwitchContext+0xc8>)
 8008000:	6013      	str	r3, [r2, #0]
}
 8008002:	bf00      	nop
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	20000ff0 	.word	0x20000ff0
 8008014:	20000fdc 	.word	0x20000fdc
 8008018:	20000fd0 	.word	0x20000fd0
 800801c:	20000af8 	.word	0x20000af8
 8008020:	20000af4 	.word	0x20000af4
 8008024:	2000001c 	.word	0x2000001c

08008028 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10b      	bne.n	8008050 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800803c:	f383 8811 	msr	BASEPRI, r3
 8008040:	f3bf 8f6f 	isb	sy
 8008044:	f3bf 8f4f 	dsb	sy
 8008048:	60fb      	str	r3, [r7, #12]
}
 800804a:	bf00      	nop
 800804c:	bf00      	nop
 800804e:	e7fd      	b.n	800804c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008050:	4b07      	ldr	r3, [pc, #28]	@ (8008070 <vTaskPlaceOnEventList+0x48>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	3318      	adds	r3, #24
 8008056:	4619      	mov	r1, r3
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f7fe fbdc 	bl	8006816 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800805e:	2101      	movs	r1, #1
 8008060:	6838      	ldr	r0, [r7, #0]
 8008062:	f000 fb87 	bl	8008774 <prvAddCurrentTaskToDelayedList>
}
 8008066:	bf00      	nop
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20000af4 	.word	0x20000af4

08008074 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10b      	bne.n	800809e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800808a:	f383 8811 	msr	BASEPRI, r3
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	f3bf 8f4f 	dsb	sy
 8008096:	617b      	str	r3, [r7, #20]
}
 8008098:	bf00      	nop
 800809a:	bf00      	nop
 800809c:	e7fd      	b.n	800809a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800809e:	4b0a      	ldr	r3, [pc, #40]	@ (80080c8 <vTaskPlaceOnEventListRestricted+0x54>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3318      	adds	r3, #24
 80080a4:	4619      	mov	r1, r3
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f7fe fb91 	bl	80067ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d002      	beq.n	80080b8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80080b2:	f04f 33ff 	mov.w	r3, #4294967295
 80080b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80080b8:	6879      	ldr	r1, [r7, #4]
 80080ba:	68b8      	ldr	r0, [r7, #8]
 80080bc:	f000 fb5a 	bl	8008774 <prvAddCurrentTaskToDelayedList>
	}
 80080c0:	bf00      	nop
 80080c2:	3718      	adds	r7, #24
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	20000af4 	.word	0x20000af4

080080cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b086      	sub	sp, #24
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10b      	bne.n	80080fa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80080e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	60fb      	str	r3, [r7, #12]
}
 80080f4:	bf00      	nop
 80080f6:	bf00      	nop
 80080f8:	e7fd      	b.n	80080f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	3318      	adds	r3, #24
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fe fbc2 	bl	8006888 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008104:	4b1d      	ldr	r3, [pc, #116]	@ (800817c <xTaskRemoveFromEventList+0xb0>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d11d      	bne.n	8008148 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	3304      	adds	r3, #4
 8008110:	4618      	mov	r0, r3
 8008112:	f7fe fbb9 	bl	8006888 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800811a:	4b19      	ldr	r3, [pc, #100]	@ (8008180 <xTaskRemoveFromEventList+0xb4>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	429a      	cmp	r2, r3
 8008120:	d903      	bls.n	800812a <xTaskRemoveFromEventList+0x5e>
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008126:	4a16      	ldr	r2, [pc, #88]	@ (8008180 <xTaskRemoveFromEventList+0xb4>)
 8008128:	6013      	str	r3, [r2, #0]
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800812e:	4613      	mov	r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4a13      	ldr	r2, [pc, #76]	@ (8008184 <xTaskRemoveFromEventList+0xb8>)
 8008138:	441a      	add	r2, r3
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	3304      	adds	r3, #4
 800813e:	4619      	mov	r1, r3
 8008140:	4610      	mov	r0, r2
 8008142:	f7fe fb44 	bl	80067ce <vListInsertEnd>
 8008146:	e005      	b.n	8008154 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	3318      	adds	r3, #24
 800814c:	4619      	mov	r1, r3
 800814e:	480e      	ldr	r0, [pc, #56]	@ (8008188 <xTaskRemoveFromEventList+0xbc>)
 8008150:	f7fe fb3d 	bl	80067ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008158:	4b0c      	ldr	r3, [pc, #48]	@ (800818c <xTaskRemoveFromEventList+0xc0>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800815e:	429a      	cmp	r2, r3
 8008160:	d905      	bls.n	800816e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008162:	2301      	movs	r3, #1
 8008164:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008166:	4b0a      	ldr	r3, [pc, #40]	@ (8008190 <xTaskRemoveFromEventList+0xc4>)
 8008168:	2201      	movs	r2, #1
 800816a:	601a      	str	r2, [r3, #0]
 800816c:	e001      	b.n	8008172 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800816e:	2300      	movs	r3, #0
 8008170:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008172:	697b      	ldr	r3, [r7, #20]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3718      	adds	r7, #24
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	20000ff0 	.word	0x20000ff0
 8008180:	20000fd0 	.word	0x20000fd0
 8008184:	20000af8 	.word	0x20000af8
 8008188:	20000f88 	.word	0x20000f88
 800818c:	20000af4 	.word	0x20000af4
 8008190:	20000fdc 	.word	0x20000fdc

08008194 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800819c:	4b06      	ldr	r3, [pc, #24]	@ (80081b8 <vTaskInternalSetTimeOutState+0x24>)
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80081a4:	4b05      	ldr	r3, [pc, #20]	@ (80081bc <vTaskInternalSetTimeOutState+0x28>)
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	605a      	str	r2, [r3, #4]
}
 80081ac:	bf00      	nop
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	20000fe0 	.word	0x20000fe0
 80081bc:	20000fcc 	.word	0x20000fcc

080081c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b088      	sub	sp, #32
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10b      	bne.n	80081e8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	613b      	str	r3, [r7, #16]
}
 80081e2:	bf00      	nop
 80081e4:	bf00      	nop
 80081e6:	e7fd      	b.n	80081e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d10b      	bne.n	8008206 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80081ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	60fb      	str	r3, [r7, #12]
}
 8008200:	bf00      	nop
 8008202:	bf00      	nop
 8008204:	e7fd      	b.n	8008202 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008206:	f000 ff97 	bl	8009138 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800820a:	4b1d      	ldr	r3, [pc, #116]	@ (8008280 <xTaskCheckForTimeOut+0xc0>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	69ba      	ldr	r2, [r7, #24]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008222:	d102      	bne.n	800822a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008224:	2300      	movs	r3, #0
 8008226:	61fb      	str	r3, [r7, #28]
 8008228:	e023      	b.n	8008272 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	4b15      	ldr	r3, [pc, #84]	@ (8008284 <xTaskCheckForTimeOut+0xc4>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	429a      	cmp	r2, r3
 8008234:	d007      	beq.n	8008246 <xTaskCheckForTimeOut+0x86>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	69ba      	ldr	r2, [r7, #24]
 800823c:	429a      	cmp	r2, r3
 800823e:	d302      	bcc.n	8008246 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008240:	2301      	movs	r3, #1
 8008242:	61fb      	str	r3, [r7, #28]
 8008244:	e015      	b.n	8008272 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	429a      	cmp	r2, r3
 800824e:	d20b      	bcs.n	8008268 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	1ad2      	subs	r2, r2, r3
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f7ff ff99 	bl	8008194 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008262:	2300      	movs	r3, #0
 8008264:	61fb      	str	r3, [r7, #28]
 8008266:	e004      	b.n	8008272 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	2200      	movs	r2, #0
 800826c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800826e:	2301      	movs	r3, #1
 8008270:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008272:	f000 ff93 	bl	800919c <vPortExitCritical>

	return xReturn;
 8008276:	69fb      	ldr	r3, [r7, #28]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3720      	adds	r7, #32
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	20000fcc 	.word	0x20000fcc
 8008284:	20000fe0 	.word	0x20000fe0

08008288 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008288:	b480      	push	{r7}
 800828a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800828c:	4b03      	ldr	r3, [pc, #12]	@ (800829c <vTaskMissedYield+0x14>)
 800828e:	2201      	movs	r2, #1
 8008290:	601a      	str	r2, [r3, #0]
}
 8008292:	bf00      	nop
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr
 800829c:	20000fdc 	.word	0x20000fdc

080082a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80082a8:	f000 f852 	bl	8008350 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80082ac:	4b06      	ldr	r3, [pc, #24]	@ (80082c8 <prvIdleTask+0x28>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d9f9      	bls.n	80082a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80082b4:	4b05      	ldr	r3, [pc, #20]	@ (80082cc <prvIdleTask+0x2c>)
 80082b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082ba:	601a      	str	r2, [r3, #0]
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80082c4:	e7f0      	b.n	80082a8 <prvIdleTask+0x8>
 80082c6:	bf00      	nop
 80082c8:	20000af8 	.word	0x20000af8
 80082cc:	e000ed04 	.word	0xe000ed04

080082d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082d6:	2300      	movs	r3, #0
 80082d8:	607b      	str	r3, [r7, #4]
 80082da:	e00c      	b.n	80082f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	4613      	mov	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	4a12      	ldr	r2, [pc, #72]	@ (8008330 <prvInitialiseTaskLists+0x60>)
 80082e8:	4413      	add	r3, r2
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7fe fa42 	bl	8006774 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	3301      	adds	r3, #1
 80082f4:	607b      	str	r3, [r7, #4]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2b37      	cmp	r3, #55	@ 0x37
 80082fa:	d9ef      	bls.n	80082dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80082fc:	480d      	ldr	r0, [pc, #52]	@ (8008334 <prvInitialiseTaskLists+0x64>)
 80082fe:	f7fe fa39 	bl	8006774 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008302:	480d      	ldr	r0, [pc, #52]	@ (8008338 <prvInitialiseTaskLists+0x68>)
 8008304:	f7fe fa36 	bl	8006774 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008308:	480c      	ldr	r0, [pc, #48]	@ (800833c <prvInitialiseTaskLists+0x6c>)
 800830a:	f7fe fa33 	bl	8006774 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800830e:	480c      	ldr	r0, [pc, #48]	@ (8008340 <prvInitialiseTaskLists+0x70>)
 8008310:	f7fe fa30 	bl	8006774 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008314:	480b      	ldr	r0, [pc, #44]	@ (8008344 <prvInitialiseTaskLists+0x74>)
 8008316:	f7fe fa2d 	bl	8006774 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800831a:	4b0b      	ldr	r3, [pc, #44]	@ (8008348 <prvInitialiseTaskLists+0x78>)
 800831c:	4a05      	ldr	r2, [pc, #20]	@ (8008334 <prvInitialiseTaskLists+0x64>)
 800831e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008320:	4b0a      	ldr	r3, [pc, #40]	@ (800834c <prvInitialiseTaskLists+0x7c>)
 8008322:	4a05      	ldr	r2, [pc, #20]	@ (8008338 <prvInitialiseTaskLists+0x68>)
 8008324:	601a      	str	r2, [r3, #0]
}
 8008326:	bf00      	nop
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	20000af8 	.word	0x20000af8
 8008334:	20000f58 	.word	0x20000f58
 8008338:	20000f6c 	.word	0x20000f6c
 800833c:	20000f88 	.word	0x20000f88
 8008340:	20000f9c 	.word	0x20000f9c
 8008344:	20000fb4 	.word	0x20000fb4
 8008348:	20000f80 	.word	0x20000f80
 800834c:	20000f84 	.word	0x20000f84

08008350 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008356:	e019      	b.n	800838c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008358:	f000 feee 	bl	8009138 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800835c:	4b10      	ldr	r3, [pc, #64]	@ (80083a0 <prvCheckTasksWaitingTermination+0x50>)
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	3304      	adds	r3, #4
 8008368:	4618      	mov	r0, r3
 800836a:	f7fe fa8d 	bl	8006888 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800836e:	4b0d      	ldr	r3, [pc, #52]	@ (80083a4 <prvCheckTasksWaitingTermination+0x54>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	3b01      	subs	r3, #1
 8008374:	4a0b      	ldr	r2, [pc, #44]	@ (80083a4 <prvCheckTasksWaitingTermination+0x54>)
 8008376:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008378:	4b0b      	ldr	r3, [pc, #44]	@ (80083a8 <prvCheckTasksWaitingTermination+0x58>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3b01      	subs	r3, #1
 800837e:	4a0a      	ldr	r2, [pc, #40]	@ (80083a8 <prvCheckTasksWaitingTermination+0x58>)
 8008380:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008382:	f000 ff0b 	bl	800919c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f810 	bl	80083ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800838c:	4b06      	ldr	r3, [pc, #24]	@ (80083a8 <prvCheckTasksWaitingTermination+0x58>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d1e1      	bne.n	8008358 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008394:	bf00      	nop
 8008396:	bf00      	nop
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	20000f9c 	.word	0x20000f9c
 80083a4:	20000fc8 	.word	0x20000fc8
 80083a8:	20000fb0 	.word	0x20000fb0

080083ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	3354      	adds	r3, #84	@ 0x54
 80083b8:	4618      	mov	r0, r3
 80083ba:	f002 f82b 	bl	800a414 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d108      	bne.n	80083da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083cc:	4618      	mov	r0, r3
 80083ce:	f001 f8a3 	bl	8009518 <vPortFree>
				vPortFree( pxTCB );
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f001 f8a0 	bl	8009518 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80083d8:	e019      	b.n	800840e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d103      	bne.n	80083ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f001 f897 	bl	8009518 <vPortFree>
	}
 80083ea:	e010      	b.n	800840e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d00b      	beq.n	800840e <prvDeleteTCB+0x62>
	__asm volatile
 80083f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083fa:	f383 8811 	msr	BASEPRI, r3
 80083fe:	f3bf 8f6f 	isb	sy
 8008402:	f3bf 8f4f 	dsb	sy
 8008406:	60fb      	str	r3, [r7, #12]
}
 8008408:	bf00      	nop
 800840a:	bf00      	nop
 800840c:	e7fd      	b.n	800840a <prvDeleteTCB+0x5e>
	}
 800840e:	bf00      	nop
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
	...

08008418 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800841e:	4b0c      	ldr	r3, [pc, #48]	@ (8008450 <prvResetNextTaskUnblockTime+0x38>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d104      	bne.n	8008432 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008428:	4b0a      	ldr	r3, [pc, #40]	@ (8008454 <prvResetNextTaskUnblockTime+0x3c>)
 800842a:	f04f 32ff 	mov.w	r2, #4294967295
 800842e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008430:	e008      	b.n	8008444 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008432:	4b07      	ldr	r3, [pc, #28]	@ (8008450 <prvResetNextTaskUnblockTime+0x38>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	4a04      	ldr	r2, [pc, #16]	@ (8008454 <prvResetNextTaskUnblockTime+0x3c>)
 8008442:	6013      	str	r3, [r2, #0]
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr
 8008450:	20000f80 	.word	0x20000f80
 8008454:	20000fe8 	.word	0x20000fe8

08008458 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800845e:	4b0b      	ldr	r3, [pc, #44]	@ (800848c <xTaskGetSchedulerState+0x34>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d102      	bne.n	800846c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008466:	2301      	movs	r3, #1
 8008468:	607b      	str	r3, [r7, #4]
 800846a:	e008      	b.n	800847e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800846c:	4b08      	ldr	r3, [pc, #32]	@ (8008490 <xTaskGetSchedulerState+0x38>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d102      	bne.n	800847a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008474:	2302      	movs	r3, #2
 8008476:	607b      	str	r3, [r7, #4]
 8008478:	e001      	b.n	800847e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800847a:	2300      	movs	r3, #0
 800847c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800847e:	687b      	ldr	r3, [r7, #4]
	}
 8008480:	4618      	mov	r0, r3
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr
 800848c:	20000fd4 	.word	0x20000fd4
 8008490:	20000ff0 	.word	0x20000ff0

08008494 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80084a0:	2300      	movs	r3, #0
 80084a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d051      	beq.n	800854e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084ae:	4b2a      	ldr	r3, [pc, #168]	@ (8008558 <xTaskPriorityInherit+0xc4>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d241      	bcs.n	800853c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	db06      	blt.n	80084ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084c0:	4b25      	ldr	r3, [pc, #148]	@ (8008558 <xTaskPriorityInherit+0xc4>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	6959      	ldr	r1, [r3, #20]
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084d6:	4613      	mov	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4413      	add	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	4a1f      	ldr	r2, [pc, #124]	@ (800855c <xTaskPriorityInherit+0xc8>)
 80084e0:	4413      	add	r3, r2
 80084e2:	4299      	cmp	r1, r3
 80084e4:	d122      	bne.n	800852c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	3304      	adds	r3, #4
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fe f9cc 	bl	8006888 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80084f0:	4b19      	ldr	r3, [pc, #100]	@ (8008558 <xTaskPriorityInherit+0xc4>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084fe:	4b18      	ldr	r3, [pc, #96]	@ (8008560 <xTaskPriorityInherit+0xcc>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	429a      	cmp	r2, r3
 8008504:	d903      	bls.n	800850e <xTaskPriorityInherit+0x7a>
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800850a:	4a15      	ldr	r2, [pc, #84]	@ (8008560 <xTaskPriorityInherit+0xcc>)
 800850c:	6013      	str	r3, [r2, #0]
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008512:	4613      	mov	r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	4413      	add	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	4a10      	ldr	r2, [pc, #64]	@ (800855c <xTaskPriorityInherit+0xc8>)
 800851c:	441a      	add	r2, r3
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	3304      	adds	r3, #4
 8008522:	4619      	mov	r1, r3
 8008524:	4610      	mov	r0, r2
 8008526:	f7fe f952 	bl	80067ce <vListInsertEnd>
 800852a:	e004      	b.n	8008536 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800852c:	4b0a      	ldr	r3, [pc, #40]	@ (8008558 <xTaskPriorityInherit+0xc4>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008536:	2301      	movs	r3, #1
 8008538:	60fb      	str	r3, [r7, #12]
 800853a:	e008      	b.n	800854e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008540:	4b05      	ldr	r3, [pc, #20]	@ (8008558 <xTaskPriorityInherit+0xc4>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008546:	429a      	cmp	r2, r3
 8008548:	d201      	bcs.n	800854e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800854a:	2301      	movs	r3, #1
 800854c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800854e:	68fb      	ldr	r3, [r7, #12]
	}
 8008550:	4618      	mov	r0, r3
 8008552:	3710      	adds	r7, #16
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	20000af4 	.word	0x20000af4
 800855c:	20000af8 	.word	0x20000af8
 8008560:	20000fd0 	.word	0x20000fd0

08008564 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008570:	2300      	movs	r3, #0
 8008572:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d058      	beq.n	800862c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800857a:	4b2f      	ldr	r3, [pc, #188]	@ (8008638 <xTaskPriorityDisinherit+0xd4>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	693a      	ldr	r2, [r7, #16]
 8008580:	429a      	cmp	r2, r3
 8008582:	d00b      	beq.n	800859c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008588:	f383 8811 	msr	BASEPRI, r3
 800858c:	f3bf 8f6f 	isb	sy
 8008590:	f3bf 8f4f 	dsb	sy
 8008594:	60fb      	str	r3, [r7, #12]
}
 8008596:	bf00      	nop
 8008598:	bf00      	nop
 800859a:	e7fd      	b.n	8008598 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d10b      	bne.n	80085bc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80085a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a8:	f383 8811 	msr	BASEPRI, r3
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	f3bf 8f4f 	dsb	sy
 80085b4:	60bb      	str	r3, [r7, #8]
}
 80085b6:	bf00      	nop
 80085b8:	bf00      	nop
 80085ba:	e7fd      	b.n	80085b8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085c0:	1e5a      	subs	r2, r3, #1
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d02c      	beq.n	800862c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d128      	bne.n	800862c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	3304      	adds	r3, #4
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fe f952 	bl	8006888 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085fc:	4b0f      	ldr	r3, [pc, #60]	@ (800863c <xTaskPriorityDisinherit+0xd8>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	429a      	cmp	r2, r3
 8008602:	d903      	bls.n	800860c <xTaskPriorityDisinherit+0xa8>
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008608:	4a0c      	ldr	r2, [pc, #48]	@ (800863c <xTaskPriorityDisinherit+0xd8>)
 800860a:	6013      	str	r3, [r2, #0]
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008610:	4613      	mov	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4413      	add	r3, r2
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	4a09      	ldr	r2, [pc, #36]	@ (8008640 <xTaskPriorityDisinherit+0xdc>)
 800861a:	441a      	add	r2, r3
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	3304      	adds	r3, #4
 8008620:	4619      	mov	r1, r3
 8008622:	4610      	mov	r0, r2
 8008624:	f7fe f8d3 	bl	80067ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008628:	2301      	movs	r3, #1
 800862a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800862c:	697b      	ldr	r3, [r7, #20]
	}
 800862e:	4618      	mov	r0, r3
 8008630:	3718      	adds	r7, #24
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	20000af4 	.word	0x20000af4
 800863c:	20000fd0 	.word	0x20000fd0
 8008640:	20000af8 	.word	0x20000af8

08008644 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008644:	b580      	push	{r7, lr}
 8008646:	b088      	sub	sp, #32
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008652:	2301      	movs	r3, #1
 8008654:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d06c      	beq.n	8008736 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800865c:	69bb      	ldr	r3, [r7, #24]
 800865e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10b      	bne.n	800867c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	60fb      	str	r3, [r7, #12]
}
 8008676:	bf00      	nop
 8008678:	bf00      	nop
 800867a:	e7fd      	b.n	8008678 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008680:	683a      	ldr	r2, [r7, #0]
 8008682:	429a      	cmp	r2, r3
 8008684:	d902      	bls.n	800868c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	61fb      	str	r3, [r7, #28]
 800868a:	e002      	b.n	8008692 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008690:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008696:	69fa      	ldr	r2, [r7, #28]
 8008698:	429a      	cmp	r2, r3
 800869a:	d04c      	beq.n	8008736 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086a0:	697a      	ldr	r2, [r7, #20]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d147      	bne.n	8008736 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80086a6:	4b26      	ldr	r3, [pc, #152]	@ (8008740 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	69ba      	ldr	r2, [r7, #24]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d10b      	bne.n	80086c8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80086b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	60bb      	str	r3, [r7, #8]
}
 80086c2:	bf00      	nop
 80086c4:	bf00      	nop
 80086c6:	e7fd      	b.n	80086c4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	69fa      	ldr	r2, [r7, #28]
 80086d2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	699b      	ldr	r3, [r3, #24]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	db04      	blt.n	80086e6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	6959      	ldr	r1, [r3, #20]
 80086ea:	693a      	ldr	r2, [r7, #16]
 80086ec:	4613      	mov	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	4413      	add	r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4a13      	ldr	r2, [pc, #76]	@ (8008744 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80086f6:	4413      	add	r3, r2
 80086f8:	4299      	cmp	r1, r3
 80086fa:	d11c      	bne.n	8008736 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	3304      	adds	r3, #4
 8008700:	4618      	mov	r0, r3
 8008702:	f7fe f8c1 	bl	8006888 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800870a:	4b0f      	ldr	r3, [pc, #60]	@ (8008748 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	429a      	cmp	r2, r3
 8008710:	d903      	bls.n	800871a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008716:	4a0c      	ldr	r2, [pc, #48]	@ (8008748 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008718:	6013      	str	r3, [r2, #0]
 800871a:	69bb      	ldr	r3, [r7, #24]
 800871c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800871e:	4613      	mov	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	4413      	add	r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	4a07      	ldr	r2, [pc, #28]	@ (8008744 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008728:	441a      	add	r2, r3
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	3304      	adds	r3, #4
 800872e:	4619      	mov	r1, r3
 8008730:	4610      	mov	r0, r2
 8008732:	f7fe f84c 	bl	80067ce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008736:	bf00      	nop
 8008738:	3720      	adds	r7, #32
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	20000af4 	.word	0x20000af4
 8008744:	20000af8 	.word	0x20000af8
 8008748:	20000fd0 	.word	0x20000fd0

0800874c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800874c:	b480      	push	{r7}
 800874e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008750:	4b07      	ldr	r3, [pc, #28]	@ (8008770 <pvTaskIncrementMutexHeldCount+0x24>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d004      	beq.n	8008762 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008758:	4b05      	ldr	r3, [pc, #20]	@ (8008770 <pvTaskIncrementMutexHeldCount+0x24>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800875e:	3201      	adds	r2, #1
 8008760:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008762:	4b03      	ldr	r3, [pc, #12]	@ (8008770 <pvTaskIncrementMutexHeldCount+0x24>)
 8008764:	681b      	ldr	r3, [r3, #0]
	}
 8008766:	4618      	mov	r0, r3
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	20000af4 	.word	0x20000af4

08008774 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800877e:	4b21      	ldr	r3, [pc, #132]	@ (8008804 <prvAddCurrentTaskToDelayedList+0x90>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008784:	4b20      	ldr	r3, [pc, #128]	@ (8008808 <prvAddCurrentTaskToDelayedList+0x94>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	3304      	adds	r3, #4
 800878a:	4618      	mov	r0, r3
 800878c:	f7fe f87c 	bl	8006888 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008796:	d10a      	bne.n	80087ae <prvAddCurrentTaskToDelayedList+0x3a>
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d007      	beq.n	80087ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800879e:	4b1a      	ldr	r3, [pc, #104]	@ (8008808 <prvAddCurrentTaskToDelayedList+0x94>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	3304      	adds	r3, #4
 80087a4:	4619      	mov	r1, r3
 80087a6:	4819      	ldr	r0, [pc, #100]	@ (800880c <prvAddCurrentTaskToDelayedList+0x98>)
 80087a8:	f7fe f811 	bl	80067ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80087ac:	e026      	b.n	80087fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4413      	add	r3, r2
 80087b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80087b6:	4b14      	ldr	r3, [pc, #80]	@ (8008808 <prvAddCurrentTaskToDelayedList+0x94>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d209      	bcs.n	80087da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087c6:	4b12      	ldr	r3, [pc, #72]	@ (8008810 <prvAddCurrentTaskToDelayedList+0x9c>)
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	4b0f      	ldr	r3, [pc, #60]	@ (8008808 <prvAddCurrentTaskToDelayedList+0x94>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	3304      	adds	r3, #4
 80087d0:	4619      	mov	r1, r3
 80087d2:	4610      	mov	r0, r2
 80087d4:	f7fe f81f 	bl	8006816 <vListInsert>
}
 80087d8:	e010      	b.n	80087fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087da:	4b0e      	ldr	r3, [pc, #56]	@ (8008814 <prvAddCurrentTaskToDelayedList+0xa0>)
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	4b0a      	ldr	r3, [pc, #40]	@ (8008808 <prvAddCurrentTaskToDelayedList+0x94>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	3304      	adds	r3, #4
 80087e4:	4619      	mov	r1, r3
 80087e6:	4610      	mov	r0, r2
 80087e8:	f7fe f815 	bl	8006816 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80087ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008818 <prvAddCurrentTaskToDelayedList+0xa4>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d202      	bcs.n	80087fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80087f6:	4a08      	ldr	r2, [pc, #32]	@ (8008818 <prvAddCurrentTaskToDelayedList+0xa4>)
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	6013      	str	r3, [r2, #0]
}
 80087fc:	bf00      	nop
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	20000fcc 	.word	0x20000fcc
 8008808:	20000af4 	.word	0x20000af4
 800880c:	20000fb4 	.word	0x20000fb4
 8008810:	20000f84 	.word	0x20000f84
 8008814:	20000f80 	.word	0x20000f80
 8008818:	20000fe8 	.word	0x20000fe8

0800881c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b08a      	sub	sp, #40	@ 0x28
 8008820:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008822:	2300      	movs	r3, #0
 8008824:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008826:	f000 fb13 	bl	8008e50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800882a:	4b1d      	ldr	r3, [pc, #116]	@ (80088a0 <xTimerCreateTimerTask+0x84>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d021      	beq.n	8008876 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008832:	2300      	movs	r3, #0
 8008834:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008836:	2300      	movs	r3, #0
 8008838:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800883a:	1d3a      	adds	r2, r7, #4
 800883c:	f107 0108 	add.w	r1, r7, #8
 8008840:	f107 030c 	add.w	r3, r7, #12
 8008844:	4618      	mov	r0, r3
 8008846:	f7fd ff7b 	bl	8006740 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800884a:	6879      	ldr	r1, [r7, #4]
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	9202      	str	r2, [sp, #8]
 8008852:	9301      	str	r3, [sp, #4]
 8008854:	2302      	movs	r3, #2
 8008856:	9300      	str	r3, [sp, #0]
 8008858:	2300      	movs	r3, #0
 800885a:	460a      	mov	r2, r1
 800885c:	4911      	ldr	r1, [pc, #68]	@ (80088a4 <xTimerCreateTimerTask+0x88>)
 800885e:	4812      	ldr	r0, [pc, #72]	@ (80088a8 <xTimerCreateTimerTask+0x8c>)
 8008860:	f7fe ffa2 	bl	80077a8 <xTaskCreateStatic>
 8008864:	4603      	mov	r3, r0
 8008866:	4a11      	ldr	r2, [pc, #68]	@ (80088ac <xTimerCreateTimerTask+0x90>)
 8008868:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800886a:	4b10      	ldr	r3, [pc, #64]	@ (80088ac <xTimerCreateTimerTask+0x90>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d001      	beq.n	8008876 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008872:	2301      	movs	r3, #1
 8008874:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10b      	bne.n	8008894 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800887c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008880:	f383 8811 	msr	BASEPRI, r3
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	613b      	str	r3, [r7, #16]
}
 800888e:	bf00      	nop
 8008890:	bf00      	nop
 8008892:	e7fd      	b.n	8008890 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008894:	697b      	ldr	r3, [r7, #20]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3718      	adds	r7, #24
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	20001024 	.word	0x20001024
 80088a4:	0800c5a8 	.word	0x0800c5a8
 80088a8:	080089e9 	.word	0x080089e9
 80088ac:	20001028 	.word	0x20001028

080088b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b08a      	sub	sp, #40	@ 0x28
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
 80088bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80088be:	2300      	movs	r3, #0
 80088c0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10b      	bne.n	80088e0 <xTimerGenericCommand+0x30>
	__asm volatile
 80088c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088cc:	f383 8811 	msr	BASEPRI, r3
 80088d0:	f3bf 8f6f 	isb	sy
 80088d4:	f3bf 8f4f 	dsb	sy
 80088d8:	623b      	str	r3, [r7, #32]
}
 80088da:	bf00      	nop
 80088dc:	bf00      	nop
 80088de:	e7fd      	b.n	80088dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80088e0:	4b19      	ldr	r3, [pc, #100]	@ (8008948 <xTimerGenericCommand+0x98>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d02a      	beq.n	800893e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	2b05      	cmp	r3, #5
 80088f8:	dc18      	bgt.n	800892c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80088fa:	f7ff fdad 	bl	8008458 <xTaskGetSchedulerState>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b02      	cmp	r3, #2
 8008902:	d109      	bne.n	8008918 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008904:	4b10      	ldr	r3, [pc, #64]	@ (8008948 <xTimerGenericCommand+0x98>)
 8008906:	6818      	ldr	r0, [r3, #0]
 8008908:	f107 0110 	add.w	r1, r7, #16
 800890c:	2300      	movs	r3, #0
 800890e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008910:	f7fe f9e4 	bl	8006cdc <xQueueGenericSend>
 8008914:	6278      	str	r0, [r7, #36]	@ 0x24
 8008916:	e012      	b.n	800893e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008918:	4b0b      	ldr	r3, [pc, #44]	@ (8008948 <xTimerGenericCommand+0x98>)
 800891a:	6818      	ldr	r0, [r3, #0]
 800891c:	f107 0110 	add.w	r1, r7, #16
 8008920:	2300      	movs	r3, #0
 8008922:	2200      	movs	r2, #0
 8008924:	f7fe f9da 	bl	8006cdc <xQueueGenericSend>
 8008928:	6278      	str	r0, [r7, #36]	@ 0x24
 800892a:	e008      	b.n	800893e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800892c:	4b06      	ldr	r3, [pc, #24]	@ (8008948 <xTimerGenericCommand+0x98>)
 800892e:	6818      	ldr	r0, [r3, #0]
 8008930:	f107 0110 	add.w	r1, r7, #16
 8008934:	2300      	movs	r3, #0
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	f7fe fad2 	bl	8006ee0 <xQueueGenericSendFromISR>
 800893c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800893e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008940:	4618      	mov	r0, r3
 8008942:	3728      	adds	r7, #40	@ 0x28
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	20001024 	.word	0x20001024

0800894c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b088      	sub	sp, #32
 8008950:	af02      	add	r7, sp, #8
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008956:	4b23      	ldr	r3, [pc, #140]	@ (80089e4 <prvProcessExpiredTimer+0x98>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	3304      	adds	r3, #4
 8008964:	4618      	mov	r0, r3
 8008966:	f7fd ff8f 	bl	8006888 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008970:	f003 0304 	and.w	r3, r3, #4
 8008974:	2b00      	cmp	r3, #0
 8008976:	d023      	beq.n	80089c0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	699a      	ldr	r2, [r3, #24]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	18d1      	adds	r1, r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	6978      	ldr	r0, [r7, #20]
 8008986:	f000 f8d5 	bl	8008b34 <prvInsertTimerInActiveList>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d020      	beq.n	80089d2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008990:	2300      	movs	r3, #0
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	2300      	movs	r3, #0
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	2100      	movs	r1, #0
 800899a:	6978      	ldr	r0, [r7, #20]
 800899c:	f7ff ff88 	bl	80088b0 <xTimerGenericCommand>
 80089a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d114      	bne.n	80089d2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80089a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ac:	f383 8811 	msr	BASEPRI, r3
 80089b0:	f3bf 8f6f 	isb	sy
 80089b4:	f3bf 8f4f 	dsb	sy
 80089b8:	60fb      	str	r3, [r7, #12]
}
 80089ba:	bf00      	nop
 80089bc:	bf00      	nop
 80089be:	e7fd      	b.n	80089bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089c6:	f023 0301 	bic.w	r3, r3, #1
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	6a1b      	ldr	r3, [r3, #32]
 80089d6:	6978      	ldr	r0, [r7, #20]
 80089d8:	4798      	blx	r3
}
 80089da:	bf00      	nop
 80089dc:	3718      	adds	r7, #24
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	2000101c 	.word	0x2000101c

080089e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80089f0:	f107 0308 	add.w	r3, r7, #8
 80089f4:	4618      	mov	r0, r3
 80089f6:	f000 f859 	bl	8008aac <prvGetNextExpireTime>
 80089fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	4619      	mov	r1, r3
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f000 f805 	bl	8008a10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008a06:	f000 f8d7 	bl	8008bb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a0a:	bf00      	nop
 8008a0c:	e7f0      	b.n	80089f0 <prvTimerTask+0x8>
	...

08008a10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008a1a:	f7ff f929 	bl	8007c70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a1e:	f107 0308 	add.w	r3, r7, #8
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 f866 	bl	8008af4 <prvSampleTimeNow>
 8008a28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d130      	bne.n	8008a92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d10a      	bne.n	8008a4c <prvProcessTimerOrBlockTask+0x3c>
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d806      	bhi.n	8008a4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008a3e:	f7ff f925 	bl	8007c8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008a42:	68f9      	ldr	r1, [r7, #12]
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f7ff ff81 	bl	800894c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008a4a:	e024      	b.n	8008a96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d008      	beq.n	8008a64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008a52:	4b13      	ldr	r3, [pc, #76]	@ (8008aa0 <prvProcessTimerOrBlockTask+0x90>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d101      	bne.n	8008a60 <prvProcessTimerOrBlockTask+0x50>
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e000      	b.n	8008a62 <prvProcessTimerOrBlockTask+0x52>
 8008a60:	2300      	movs	r3, #0
 8008a62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008a64:	4b0f      	ldr	r3, [pc, #60]	@ (8008aa4 <prvProcessTimerOrBlockTask+0x94>)
 8008a66:	6818      	ldr	r0, [r3, #0]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	4619      	mov	r1, r3
 8008a72:	f7fe fe65 	bl	8007740 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008a76:	f7ff f909 	bl	8007c8c <xTaskResumeAll>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d10a      	bne.n	8008a96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008a80:	4b09      	ldr	r3, [pc, #36]	@ (8008aa8 <prvProcessTimerOrBlockTask+0x98>)
 8008a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a86:	601a      	str	r2, [r3, #0]
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	f3bf 8f6f 	isb	sy
}
 8008a90:	e001      	b.n	8008a96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008a92:	f7ff f8fb 	bl	8007c8c <xTaskResumeAll>
}
 8008a96:	bf00      	nop
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	20001020 	.word	0x20001020
 8008aa4:	20001024 	.word	0x20001024
 8008aa8:	e000ed04 	.word	0xe000ed04

08008aac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8008af0 <prvGetNextExpireTime+0x44>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d101      	bne.n	8008ac2 <prvGetNextExpireTime+0x16>
 8008abe:	2201      	movs	r2, #1
 8008ac0:	e000      	b.n	8008ac4 <prvGetNextExpireTime+0x18>
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d105      	bne.n	8008adc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ad0:	4b07      	ldr	r3, [pc, #28]	@ (8008af0 <prvGetNextExpireTime+0x44>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	60fb      	str	r3, [r7, #12]
 8008ada:	e001      	b.n	8008ae0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008adc:	2300      	movs	r3, #0
 8008ade:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3714      	adds	r7, #20
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	2000101c 	.word	0x2000101c

08008af4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008afc:	f7ff f964 	bl	8007dc8 <xTaskGetTickCount>
 8008b00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008b02:	4b0b      	ldr	r3, [pc, #44]	@ (8008b30 <prvSampleTimeNow+0x3c>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d205      	bcs.n	8008b18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008b0c:	f000 f93a 	bl	8008d84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	601a      	str	r2, [r3, #0]
 8008b16:	e002      	b.n	8008b1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008b1e:	4a04      	ldr	r2, [pc, #16]	@ (8008b30 <prvSampleTimeNow+0x3c>)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008b24:	68fb      	ldr	r3, [r7, #12]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	2000102c 	.word	0x2000102c

08008b34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b086      	sub	sp, #24
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	607a      	str	r2, [r7, #4]
 8008b40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008b42:	2300      	movs	r3, #0
 8008b44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008b52:	68ba      	ldr	r2, [r7, #8]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d812      	bhi.n	8008b80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	1ad2      	subs	r2, r2, r3
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	699b      	ldr	r3, [r3, #24]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d302      	bcc.n	8008b6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	617b      	str	r3, [r7, #20]
 8008b6c:	e01b      	b.n	8008ba6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008b6e:	4b10      	ldr	r3, [pc, #64]	@ (8008bb0 <prvInsertTimerInActiveList+0x7c>)
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	3304      	adds	r3, #4
 8008b76:	4619      	mov	r1, r3
 8008b78:	4610      	mov	r0, r2
 8008b7a:	f7fd fe4c 	bl	8006816 <vListInsert>
 8008b7e:	e012      	b.n	8008ba6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d206      	bcs.n	8008b96 <prvInsertTimerInActiveList+0x62>
 8008b88:	68ba      	ldr	r2, [r7, #8]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d302      	bcc.n	8008b96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008b90:	2301      	movs	r3, #1
 8008b92:	617b      	str	r3, [r7, #20]
 8008b94:	e007      	b.n	8008ba6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b96:	4b07      	ldr	r3, [pc, #28]	@ (8008bb4 <prvInsertTimerInActiveList+0x80>)
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	3304      	adds	r3, #4
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	4610      	mov	r0, r2
 8008ba2:	f7fd fe38 	bl	8006816 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008ba6:	697b      	ldr	r3, [r7, #20]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3718      	adds	r7, #24
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	20001020 	.word	0x20001020
 8008bb4:	2000101c 	.word	0x2000101c

08008bb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b08e      	sub	sp, #56	@ 0x38
 8008bbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008bbe:	e0ce      	b.n	8008d5e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	da19      	bge.n	8008bfa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008bc6:	1d3b      	adds	r3, r7, #4
 8008bc8:	3304      	adds	r3, #4
 8008bca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10b      	bne.n	8008bea <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd6:	f383 8811 	msr	BASEPRI, r3
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	61fb      	str	r3, [r7, #28]
}
 8008be4:	bf00      	nop
 8008be6:	bf00      	nop
 8008be8:	e7fd      	b.n	8008be6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bf0:	6850      	ldr	r0, [r2, #4]
 8008bf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bf4:	6892      	ldr	r2, [r2, #8]
 8008bf6:	4611      	mov	r1, r2
 8008bf8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f2c0 80ae 	blt.w	8008d5e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c08:	695b      	ldr	r3, [r3, #20]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d004      	beq.n	8008c18 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c10:	3304      	adds	r3, #4
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fd fe38 	bl	8006888 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c18:	463b      	mov	r3, r7
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7ff ff6a 	bl	8008af4 <prvSampleTimeNow>
 8008c20:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2b09      	cmp	r3, #9
 8008c26:	f200 8097 	bhi.w	8008d58 <prvProcessReceivedCommands+0x1a0>
 8008c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c30 <prvProcessReceivedCommands+0x78>)
 8008c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c30:	08008c59 	.word	0x08008c59
 8008c34:	08008c59 	.word	0x08008c59
 8008c38:	08008c59 	.word	0x08008c59
 8008c3c:	08008ccf 	.word	0x08008ccf
 8008c40:	08008ce3 	.word	0x08008ce3
 8008c44:	08008d2f 	.word	0x08008d2f
 8008c48:	08008c59 	.word	0x08008c59
 8008c4c:	08008c59 	.word	0x08008c59
 8008c50:	08008ccf 	.word	0x08008ccf
 8008c54:	08008ce3 	.word	0x08008ce3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c5e:	f043 0301 	orr.w	r3, r3, #1
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008c6a:	68ba      	ldr	r2, [r7, #8]
 8008c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	18d1      	adds	r1, r2, r3
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c78:	f7ff ff5c 	bl	8008b34 <prvInsertTimerInActiveList>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d06c      	beq.n	8008d5c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c84:	6a1b      	ldr	r3, [r3, #32]
 8008c86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c90:	f003 0304 	and.w	r3, r3, #4
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d061      	beq.n	8008d5c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	441a      	add	r2, r3
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	2100      	movs	r1, #0
 8008ca8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008caa:	f7ff fe01 	bl	80088b0 <xTimerGenericCommand>
 8008cae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008cb0:	6a3b      	ldr	r3, [r7, #32]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d152      	bne.n	8008d5c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cba:	f383 8811 	msr	BASEPRI, r3
 8008cbe:	f3bf 8f6f 	isb	sy
 8008cc2:	f3bf 8f4f 	dsb	sy
 8008cc6:	61bb      	str	r3, [r7, #24]
}
 8008cc8:	bf00      	nop
 8008cca:	bf00      	nop
 8008ccc:	e7fd      	b.n	8008cca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008cd4:	f023 0301 	bic.w	r3, r3, #1
 8008cd8:	b2da      	uxtb	r2, r3
 8008cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cdc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008ce0:	e03d      	b.n	8008d5e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ce8:	f043 0301 	orr.w	r3, r3, #1
 8008cec:	b2da      	uxtb	r2, r3
 8008cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008cf4:	68ba      	ldr	r2, [r7, #8]
 8008cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cfc:	699b      	ldr	r3, [r3, #24]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d10b      	bne.n	8008d1a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d06:	f383 8811 	msr	BASEPRI, r3
 8008d0a:	f3bf 8f6f 	isb	sy
 8008d0e:	f3bf 8f4f 	dsb	sy
 8008d12:	617b      	str	r3, [r7, #20]
}
 8008d14:	bf00      	nop
 8008d16:	bf00      	nop
 8008d18:	e7fd      	b.n	8008d16 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d1c:	699a      	ldr	r2, [r3, #24]
 8008d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d20:	18d1      	adds	r1, r2, r3
 8008d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d28:	f7ff ff04 	bl	8008b34 <prvInsertTimerInActiveList>
					break;
 8008d2c:	e017      	b.n	8008d5e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d34:	f003 0302 	and.w	r3, r3, #2
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d103      	bne.n	8008d44 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008d3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d3e:	f000 fbeb 	bl	8009518 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008d42:	e00c      	b.n	8008d5e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d4a:	f023 0301 	bic.w	r3, r3, #1
 8008d4e:	b2da      	uxtb	r2, r3
 8008d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008d56:	e002      	b.n	8008d5e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008d58:	bf00      	nop
 8008d5a:	e000      	b.n	8008d5e <prvProcessReceivedCommands+0x1a6>
					break;
 8008d5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d5e:	4b08      	ldr	r3, [pc, #32]	@ (8008d80 <prvProcessReceivedCommands+0x1c8>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	1d39      	adds	r1, r7, #4
 8008d64:	2200      	movs	r2, #0
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fe f958 	bl	800701c <xQueueReceive>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	f47f af26 	bne.w	8008bc0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008d74:	bf00      	nop
 8008d76:	bf00      	nop
 8008d78:	3730      	adds	r7, #48	@ 0x30
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	20001024 	.word	0x20001024

08008d84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b088      	sub	sp, #32
 8008d88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d8a:	e049      	b.n	8008e20 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d8c:	4b2e      	ldr	r3, [pc, #184]	@ (8008e48 <prvSwitchTimerLists+0xc4>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d96:	4b2c      	ldr	r3, [pc, #176]	@ (8008e48 <prvSwitchTimerLists+0xc4>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	3304      	adds	r3, #4
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fd fd6f 	bl	8006888 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6a1b      	ldr	r3, [r3, #32]
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008db8:	f003 0304 	and.w	r3, r3, #4
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d02f      	beq.n	8008e20 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	699b      	ldr	r3, [r3, #24]
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d90e      	bls.n	8008df0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008dde:	4b1a      	ldr	r3, [pc, #104]	@ (8008e48 <prvSwitchTimerLists+0xc4>)
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	3304      	adds	r3, #4
 8008de6:	4619      	mov	r1, r3
 8008de8:	4610      	mov	r0, r2
 8008dea:	f7fd fd14 	bl	8006816 <vListInsert>
 8008dee:	e017      	b.n	8008e20 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008df0:	2300      	movs	r3, #0
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	2300      	movs	r3, #0
 8008df6:	693a      	ldr	r2, [r7, #16]
 8008df8:	2100      	movs	r1, #0
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f7ff fd58 	bl	80088b0 <xTimerGenericCommand>
 8008e00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d10b      	bne.n	8008e20 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	603b      	str	r3, [r7, #0]
}
 8008e1a:	bf00      	nop
 8008e1c:	bf00      	nop
 8008e1e:	e7fd      	b.n	8008e1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e20:	4b09      	ldr	r3, [pc, #36]	@ (8008e48 <prvSwitchTimerLists+0xc4>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1b0      	bne.n	8008d8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008e2a:	4b07      	ldr	r3, [pc, #28]	@ (8008e48 <prvSwitchTimerLists+0xc4>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008e30:	4b06      	ldr	r3, [pc, #24]	@ (8008e4c <prvSwitchTimerLists+0xc8>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a04      	ldr	r2, [pc, #16]	@ (8008e48 <prvSwitchTimerLists+0xc4>)
 8008e36:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008e38:	4a04      	ldr	r2, [pc, #16]	@ (8008e4c <prvSwitchTimerLists+0xc8>)
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	6013      	str	r3, [r2, #0]
}
 8008e3e:	bf00      	nop
 8008e40:	3718      	adds	r7, #24
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	2000101c 	.word	0x2000101c
 8008e4c:	20001020 	.word	0x20001020

08008e50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008e56:	f000 f96f 	bl	8009138 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008e5a:	4b15      	ldr	r3, [pc, #84]	@ (8008eb0 <prvCheckForValidListAndQueue+0x60>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d120      	bne.n	8008ea4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008e62:	4814      	ldr	r0, [pc, #80]	@ (8008eb4 <prvCheckForValidListAndQueue+0x64>)
 8008e64:	f7fd fc86 	bl	8006774 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008e68:	4813      	ldr	r0, [pc, #76]	@ (8008eb8 <prvCheckForValidListAndQueue+0x68>)
 8008e6a:	f7fd fc83 	bl	8006774 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008e6e:	4b13      	ldr	r3, [pc, #76]	@ (8008ebc <prvCheckForValidListAndQueue+0x6c>)
 8008e70:	4a10      	ldr	r2, [pc, #64]	@ (8008eb4 <prvCheckForValidListAndQueue+0x64>)
 8008e72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008e74:	4b12      	ldr	r3, [pc, #72]	@ (8008ec0 <prvCheckForValidListAndQueue+0x70>)
 8008e76:	4a10      	ldr	r2, [pc, #64]	@ (8008eb8 <prvCheckForValidListAndQueue+0x68>)
 8008e78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	4b11      	ldr	r3, [pc, #68]	@ (8008ec4 <prvCheckForValidListAndQueue+0x74>)
 8008e80:	4a11      	ldr	r2, [pc, #68]	@ (8008ec8 <prvCheckForValidListAndQueue+0x78>)
 8008e82:	2110      	movs	r1, #16
 8008e84:	200a      	movs	r0, #10
 8008e86:	f7fd fd93 	bl	80069b0 <xQueueGenericCreateStatic>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	4a08      	ldr	r2, [pc, #32]	@ (8008eb0 <prvCheckForValidListAndQueue+0x60>)
 8008e8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008e90:	4b07      	ldr	r3, [pc, #28]	@ (8008eb0 <prvCheckForValidListAndQueue+0x60>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d005      	beq.n	8008ea4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008e98:	4b05      	ldr	r3, [pc, #20]	@ (8008eb0 <prvCheckForValidListAndQueue+0x60>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	490b      	ldr	r1, [pc, #44]	@ (8008ecc <prvCheckForValidListAndQueue+0x7c>)
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fe fbfa 	bl	8007698 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ea4:	f000 f97a 	bl	800919c <vPortExitCritical>
}
 8008ea8:	bf00      	nop
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	20001024 	.word	0x20001024
 8008eb4:	20000ff4 	.word	0x20000ff4
 8008eb8:	20001008 	.word	0x20001008
 8008ebc:	2000101c 	.word	0x2000101c
 8008ec0:	20001020 	.word	0x20001020
 8008ec4:	200010d0 	.word	0x200010d0
 8008ec8:	20001030 	.word	0x20001030
 8008ecc:	0800c5b0 	.word	0x0800c5b0

08008ed0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	3b04      	subs	r3, #4
 8008ee0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	3b04      	subs	r3, #4
 8008eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	f023 0201 	bic.w	r2, r3, #1
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	3b04      	subs	r3, #4
 8008efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008f00:	4a0c      	ldr	r2, [pc, #48]	@ (8008f34 <pxPortInitialiseStack+0x64>)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	3b14      	subs	r3, #20
 8008f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	3b04      	subs	r3, #4
 8008f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f06f 0202 	mvn.w	r2, #2
 8008f1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	3b20      	subs	r3, #32
 8008f24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008f26:	68fb      	ldr	r3, [r7, #12]
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3714      	adds	r7, #20
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr
 8008f34:	08008f39 	.word	0x08008f39

08008f38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008f42:	4b13      	ldr	r3, [pc, #76]	@ (8008f90 <prvTaskExitError+0x58>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f4a:	d00b      	beq.n	8008f64 <prvTaskExitError+0x2c>
	__asm volatile
 8008f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f50:	f383 8811 	msr	BASEPRI, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	60fb      	str	r3, [r7, #12]
}
 8008f5e:	bf00      	nop
 8008f60:	bf00      	nop
 8008f62:	e7fd      	b.n	8008f60 <prvTaskExitError+0x28>
	__asm volatile
 8008f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f68:	f383 8811 	msr	BASEPRI, r3
 8008f6c:	f3bf 8f6f 	isb	sy
 8008f70:	f3bf 8f4f 	dsb	sy
 8008f74:	60bb      	str	r3, [r7, #8]
}
 8008f76:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008f78:	bf00      	nop
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d0fc      	beq.n	8008f7a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f80:	bf00      	nop
 8008f82:	bf00      	nop
 8008f84:	3714      	adds	r7, #20
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	2000000c 	.word	0x2000000c
	...

08008fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008fa0:	4b07      	ldr	r3, [pc, #28]	@ (8008fc0 <pxCurrentTCBConst2>)
 8008fa2:	6819      	ldr	r1, [r3, #0]
 8008fa4:	6808      	ldr	r0, [r1, #0]
 8008fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008faa:	f380 8809 	msr	PSP, r0
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	f04f 0000 	mov.w	r0, #0
 8008fb6:	f380 8811 	msr	BASEPRI, r0
 8008fba:	4770      	bx	lr
 8008fbc:	f3af 8000 	nop.w

08008fc0 <pxCurrentTCBConst2>:
 8008fc0:	20000af4 	.word	0x20000af4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008fc4:	bf00      	nop
 8008fc6:	bf00      	nop

08008fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008fc8:	4808      	ldr	r0, [pc, #32]	@ (8008fec <prvPortStartFirstTask+0x24>)
 8008fca:	6800      	ldr	r0, [r0, #0]
 8008fcc:	6800      	ldr	r0, [r0, #0]
 8008fce:	f380 8808 	msr	MSP, r0
 8008fd2:	f04f 0000 	mov.w	r0, #0
 8008fd6:	f380 8814 	msr	CONTROL, r0
 8008fda:	b662      	cpsie	i
 8008fdc:	b661      	cpsie	f
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	df00      	svc	0
 8008fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008fea:	bf00      	nop
 8008fec:	e000ed08 	.word	0xe000ed08

08008ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b086      	sub	sp, #24
 8008ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ff6:	4b47      	ldr	r3, [pc, #284]	@ (8009114 <xPortStartScheduler+0x124>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a47      	ldr	r2, [pc, #284]	@ (8009118 <xPortStartScheduler+0x128>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d10b      	bne.n	8009018 <xPortStartScheduler+0x28>
	__asm volatile
 8009000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	613b      	str	r3, [r7, #16]
}
 8009012:	bf00      	nop
 8009014:	bf00      	nop
 8009016:	e7fd      	b.n	8009014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009018:	4b3e      	ldr	r3, [pc, #248]	@ (8009114 <xPortStartScheduler+0x124>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a3f      	ldr	r2, [pc, #252]	@ (800911c <xPortStartScheduler+0x12c>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d10b      	bne.n	800903a <xPortStartScheduler+0x4a>
	__asm volatile
 8009022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009026:	f383 8811 	msr	BASEPRI, r3
 800902a:	f3bf 8f6f 	isb	sy
 800902e:	f3bf 8f4f 	dsb	sy
 8009032:	60fb      	str	r3, [r7, #12]
}
 8009034:	bf00      	nop
 8009036:	bf00      	nop
 8009038:	e7fd      	b.n	8009036 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800903a:	4b39      	ldr	r3, [pc, #228]	@ (8009120 <xPortStartScheduler+0x130>)
 800903c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	b2db      	uxtb	r3, r3
 8009044:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	22ff      	movs	r2, #255	@ 0xff
 800904a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	b2db      	uxtb	r3, r3
 8009052:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009054:	78fb      	ldrb	r3, [r7, #3]
 8009056:	b2db      	uxtb	r3, r3
 8009058:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800905c:	b2da      	uxtb	r2, r3
 800905e:	4b31      	ldr	r3, [pc, #196]	@ (8009124 <xPortStartScheduler+0x134>)
 8009060:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009062:	4b31      	ldr	r3, [pc, #196]	@ (8009128 <xPortStartScheduler+0x138>)
 8009064:	2207      	movs	r2, #7
 8009066:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009068:	e009      	b.n	800907e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800906a:	4b2f      	ldr	r3, [pc, #188]	@ (8009128 <xPortStartScheduler+0x138>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	3b01      	subs	r3, #1
 8009070:	4a2d      	ldr	r2, [pc, #180]	@ (8009128 <xPortStartScheduler+0x138>)
 8009072:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009074:	78fb      	ldrb	r3, [r7, #3]
 8009076:	b2db      	uxtb	r3, r3
 8009078:	005b      	lsls	r3, r3, #1
 800907a:	b2db      	uxtb	r3, r3
 800907c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800907e:	78fb      	ldrb	r3, [r7, #3]
 8009080:	b2db      	uxtb	r3, r3
 8009082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009086:	2b80      	cmp	r3, #128	@ 0x80
 8009088:	d0ef      	beq.n	800906a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800908a:	4b27      	ldr	r3, [pc, #156]	@ (8009128 <xPortStartScheduler+0x138>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f1c3 0307 	rsb	r3, r3, #7
 8009092:	2b04      	cmp	r3, #4
 8009094:	d00b      	beq.n	80090ae <xPortStartScheduler+0xbe>
	__asm volatile
 8009096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800909a:	f383 8811 	msr	BASEPRI, r3
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	f3bf 8f4f 	dsb	sy
 80090a6:	60bb      	str	r3, [r7, #8]
}
 80090a8:	bf00      	nop
 80090aa:	bf00      	nop
 80090ac:	e7fd      	b.n	80090aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80090ae:	4b1e      	ldr	r3, [pc, #120]	@ (8009128 <xPortStartScheduler+0x138>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	021b      	lsls	r3, r3, #8
 80090b4:	4a1c      	ldr	r2, [pc, #112]	@ (8009128 <xPortStartScheduler+0x138>)
 80090b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80090b8:	4b1b      	ldr	r3, [pc, #108]	@ (8009128 <xPortStartScheduler+0x138>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80090c0:	4a19      	ldr	r2, [pc, #100]	@ (8009128 <xPortStartScheduler+0x138>)
 80090c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	b2da      	uxtb	r2, r3
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80090cc:	4b17      	ldr	r3, [pc, #92]	@ (800912c <xPortStartScheduler+0x13c>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a16      	ldr	r2, [pc, #88]	@ (800912c <xPortStartScheduler+0x13c>)
 80090d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80090d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80090d8:	4b14      	ldr	r3, [pc, #80]	@ (800912c <xPortStartScheduler+0x13c>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a13      	ldr	r2, [pc, #76]	@ (800912c <xPortStartScheduler+0x13c>)
 80090de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80090e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80090e4:	f000 f8da 	bl	800929c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80090e8:	4b11      	ldr	r3, [pc, #68]	@ (8009130 <xPortStartScheduler+0x140>)
 80090ea:	2200      	movs	r2, #0
 80090ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80090ee:	f000 f8f9 	bl	80092e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80090f2:	4b10      	ldr	r3, [pc, #64]	@ (8009134 <xPortStartScheduler+0x144>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a0f      	ldr	r2, [pc, #60]	@ (8009134 <xPortStartScheduler+0x144>)
 80090f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80090fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80090fe:	f7ff ff63 	bl	8008fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009102:	f7fe ff2b 	bl	8007f5c <vTaskSwitchContext>
	prvTaskExitError();
 8009106:	f7ff ff17 	bl	8008f38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3718      	adds	r7, #24
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	e000ed00 	.word	0xe000ed00
 8009118:	410fc271 	.word	0x410fc271
 800911c:	410fc270 	.word	0x410fc270
 8009120:	e000e400 	.word	0xe000e400
 8009124:	20001120 	.word	0x20001120
 8009128:	20001124 	.word	0x20001124
 800912c:	e000ed20 	.word	0xe000ed20
 8009130:	2000000c 	.word	0x2000000c
 8009134:	e000ef34 	.word	0xe000ef34

08009138 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
	__asm volatile
 800913e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009142:	f383 8811 	msr	BASEPRI, r3
 8009146:	f3bf 8f6f 	isb	sy
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	607b      	str	r3, [r7, #4]
}
 8009150:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009152:	4b10      	ldr	r3, [pc, #64]	@ (8009194 <vPortEnterCritical+0x5c>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	3301      	adds	r3, #1
 8009158:	4a0e      	ldr	r2, [pc, #56]	@ (8009194 <vPortEnterCritical+0x5c>)
 800915a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800915c:	4b0d      	ldr	r3, [pc, #52]	@ (8009194 <vPortEnterCritical+0x5c>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d110      	bne.n	8009186 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009164:	4b0c      	ldr	r3, [pc, #48]	@ (8009198 <vPortEnterCritical+0x60>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	b2db      	uxtb	r3, r3
 800916a:	2b00      	cmp	r3, #0
 800916c:	d00b      	beq.n	8009186 <vPortEnterCritical+0x4e>
	__asm volatile
 800916e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009172:	f383 8811 	msr	BASEPRI, r3
 8009176:	f3bf 8f6f 	isb	sy
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	603b      	str	r3, [r7, #0]
}
 8009180:	bf00      	nop
 8009182:	bf00      	nop
 8009184:	e7fd      	b.n	8009182 <vPortEnterCritical+0x4a>
	}
}
 8009186:	bf00      	nop
 8009188:	370c      	adds	r7, #12
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	2000000c 	.word	0x2000000c
 8009198:	e000ed04 	.word	0xe000ed04

0800919c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80091a2:	4b12      	ldr	r3, [pc, #72]	@ (80091ec <vPortExitCritical+0x50>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d10b      	bne.n	80091c2 <vPortExitCritical+0x26>
	__asm volatile
 80091aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ae:	f383 8811 	msr	BASEPRI, r3
 80091b2:	f3bf 8f6f 	isb	sy
 80091b6:	f3bf 8f4f 	dsb	sy
 80091ba:	607b      	str	r3, [r7, #4]
}
 80091bc:	bf00      	nop
 80091be:	bf00      	nop
 80091c0:	e7fd      	b.n	80091be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80091c2:	4b0a      	ldr	r3, [pc, #40]	@ (80091ec <vPortExitCritical+0x50>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	3b01      	subs	r3, #1
 80091c8:	4a08      	ldr	r2, [pc, #32]	@ (80091ec <vPortExitCritical+0x50>)
 80091ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80091cc:	4b07      	ldr	r3, [pc, #28]	@ (80091ec <vPortExitCritical+0x50>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d105      	bne.n	80091e0 <vPortExitCritical+0x44>
 80091d4:	2300      	movs	r3, #0
 80091d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	f383 8811 	msr	BASEPRI, r3
}
 80091de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr
 80091ec:	2000000c 	.word	0x2000000c

080091f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80091f0:	f3ef 8009 	mrs	r0, PSP
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	4b15      	ldr	r3, [pc, #84]	@ (8009250 <pxCurrentTCBConst>)
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	f01e 0f10 	tst.w	lr, #16
 8009200:	bf08      	it	eq
 8009202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800920a:	6010      	str	r0, [r2, #0]
 800920c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009210:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009214:	f380 8811 	msr	BASEPRI, r0
 8009218:	f3bf 8f4f 	dsb	sy
 800921c:	f3bf 8f6f 	isb	sy
 8009220:	f7fe fe9c 	bl	8007f5c <vTaskSwitchContext>
 8009224:	f04f 0000 	mov.w	r0, #0
 8009228:	f380 8811 	msr	BASEPRI, r0
 800922c:	bc09      	pop	{r0, r3}
 800922e:	6819      	ldr	r1, [r3, #0]
 8009230:	6808      	ldr	r0, [r1, #0]
 8009232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009236:	f01e 0f10 	tst.w	lr, #16
 800923a:	bf08      	it	eq
 800923c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009240:	f380 8809 	msr	PSP, r0
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	f3af 8000 	nop.w

08009250 <pxCurrentTCBConst>:
 8009250:	20000af4 	.word	0x20000af4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009254:	bf00      	nop
 8009256:	bf00      	nop

08009258 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
	__asm volatile
 800925e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009262:	f383 8811 	msr	BASEPRI, r3
 8009266:	f3bf 8f6f 	isb	sy
 800926a:	f3bf 8f4f 	dsb	sy
 800926e:	607b      	str	r3, [r7, #4]
}
 8009270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009272:	f7fe fdb9 	bl	8007de8 <xTaskIncrementTick>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d003      	beq.n	8009284 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800927c:	4b06      	ldr	r3, [pc, #24]	@ (8009298 <xPortSysTickHandler+0x40>)
 800927e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009282:	601a      	str	r2, [r3, #0]
 8009284:	2300      	movs	r3, #0
 8009286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	f383 8811 	msr	BASEPRI, r3
}
 800928e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009290:	bf00      	nop
 8009292:	3708      	adds	r7, #8
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	e000ed04 	.word	0xe000ed04

0800929c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800929c:	b480      	push	{r7}
 800929e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80092a0:	4b0b      	ldr	r3, [pc, #44]	@ (80092d0 <vPortSetupTimerInterrupt+0x34>)
 80092a2:	2200      	movs	r2, #0
 80092a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80092a6:	4b0b      	ldr	r3, [pc, #44]	@ (80092d4 <vPortSetupTimerInterrupt+0x38>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80092ac:	4b0a      	ldr	r3, [pc, #40]	@ (80092d8 <vPortSetupTimerInterrupt+0x3c>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a0a      	ldr	r2, [pc, #40]	@ (80092dc <vPortSetupTimerInterrupt+0x40>)
 80092b2:	fba2 2303 	umull	r2, r3, r2, r3
 80092b6:	099b      	lsrs	r3, r3, #6
 80092b8:	4a09      	ldr	r2, [pc, #36]	@ (80092e0 <vPortSetupTimerInterrupt+0x44>)
 80092ba:	3b01      	subs	r3, #1
 80092bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80092be:	4b04      	ldr	r3, [pc, #16]	@ (80092d0 <vPortSetupTimerInterrupt+0x34>)
 80092c0:	2207      	movs	r2, #7
 80092c2:	601a      	str	r2, [r3, #0]
}
 80092c4:	bf00      	nop
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	e000e010 	.word	0xe000e010
 80092d4:	e000e018 	.word	0xe000e018
 80092d8:	20000000 	.word	0x20000000
 80092dc:	10624dd3 	.word	0x10624dd3
 80092e0:	e000e014 	.word	0xe000e014

080092e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80092e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80092f4 <vPortEnableVFP+0x10>
 80092e8:	6801      	ldr	r1, [r0, #0]
 80092ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80092ee:	6001      	str	r1, [r0, #0]
 80092f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80092f2:	bf00      	nop
 80092f4:	e000ed88 	.word	0xe000ed88

080092f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80092fe:	f3ef 8305 	mrs	r3, IPSR
 8009302:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2b0f      	cmp	r3, #15
 8009308:	d915      	bls.n	8009336 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800930a:	4a18      	ldr	r2, [pc, #96]	@ (800936c <vPortValidateInterruptPriority+0x74>)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	4413      	add	r3, r2
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009314:	4b16      	ldr	r3, [pc, #88]	@ (8009370 <vPortValidateInterruptPriority+0x78>)
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	7afa      	ldrb	r2, [r7, #11]
 800931a:	429a      	cmp	r2, r3
 800931c:	d20b      	bcs.n	8009336 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800931e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009322:	f383 8811 	msr	BASEPRI, r3
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	607b      	str	r3, [r7, #4]
}
 8009330:	bf00      	nop
 8009332:	bf00      	nop
 8009334:	e7fd      	b.n	8009332 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009336:	4b0f      	ldr	r3, [pc, #60]	@ (8009374 <vPortValidateInterruptPriority+0x7c>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800933e:	4b0e      	ldr	r3, [pc, #56]	@ (8009378 <vPortValidateInterruptPriority+0x80>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	429a      	cmp	r2, r3
 8009344:	d90b      	bls.n	800935e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800934a:	f383 8811 	msr	BASEPRI, r3
 800934e:	f3bf 8f6f 	isb	sy
 8009352:	f3bf 8f4f 	dsb	sy
 8009356:	603b      	str	r3, [r7, #0]
}
 8009358:	bf00      	nop
 800935a:	bf00      	nop
 800935c:	e7fd      	b.n	800935a <vPortValidateInterruptPriority+0x62>
	}
 800935e:	bf00      	nop
 8009360:	3714      	adds	r7, #20
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	e000e3f0 	.word	0xe000e3f0
 8009370:	20001120 	.word	0x20001120
 8009374:	e000ed0c 	.word	0xe000ed0c
 8009378:	20001124 	.word	0x20001124

0800937c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b08a      	sub	sp, #40	@ 0x28
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009384:	2300      	movs	r3, #0
 8009386:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009388:	f7fe fc72 	bl	8007c70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800938c:	4b5c      	ldr	r3, [pc, #368]	@ (8009500 <pvPortMalloc+0x184>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d101      	bne.n	8009398 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009394:	f000 f924 	bl	80095e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009398:	4b5a      	ldr	r3, [pc, #360]	@ (8009504 <pvPortMalloc+0x188>)
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4013      	ands	r3, r2
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f040 8095 	bne.w	80094d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d01e      	beq.n	80093ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80093ac:	2208      	movs	r2, #8
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4413      	add	r3, r2
 80093b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f003 0307 	and.w	r3, r3, #7
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d015      	beq.n	80093ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f023 0307 	bic.w	r3, r3, #7
 80093c4:	3308      	adds	r3, #8
 80093c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f003 0307 	and.w	r3, r3, #7
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00b      	beq.n	80093ea <pvPortMalloc+0x6e>
	__asm volatile
 80093d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d6:	f383 8811 	msr	BASEPRI, r3
 80093da:	f3bf 8f6f 	isb	sy
 80093de:	f3bf 8f4f 	dsb	sy
 80093e2:	617b      	str	r3, [r7, #20]
}
 80093e4:	bf00      	nop
 80093e6:	bf00      	nop
 80093e8:	e7fd      	b.n	80093e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d06f      	beq.n	80094d0 <pvPortMalloc+0x154>
 80093f0:	4b45      	ldr	r3, [pc, #276]	@ (8009508 <pvPortMalloc+0x18c>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d86a      	bhi.n	80094d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80093fa:	4b44      	ldr	r3, [pc, #272]	@ (800950c <pvPortMalloc+0x190>)
 80093fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80093fe:	4b43      	ldr	r3, [pc, #268]	@ (800950c <pvPortMalloc+0x190>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009404:	e004      	b.n	8009410 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009408:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800940a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	429a      	cmp	r2, r3
 8009418:	d903      	bls.n	8009422 <pvPortMalloc+0xa6>
 800941a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d1f1      	bne.n	8009406 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009422:	4b37      	ldr	r3, [pc, #220]	@ (8009500 <pvPortMalloc+0x184>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009428:	429a      	cmp	r2, r3
 800942a:	d051      	beq.n	80094d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800942c:	6a3b      	ldr	r3, [r7, #32]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2208      	movs	r2, #8
 8009432:	4413      	add	r3, r2
 8009434:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	6a3b      	ldr	r3, [r7, #32]
 800943c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800943e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009440:	685a      	ldr	r2, [r3, #4]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	1ad2      	subs	r2, r2, r3
 8009446:	2308      	movs	r3, #8
 8009448:	005b      	lsls	r3, r3, #1
 800944a:	429a      	cmp	r2, r3
 800944c:	d920      	bls.n	8009490 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800944e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4413      	add	r3, r2
 8009454:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	f003 0307 	and.w	r3, r3, #7
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00b      	beq.n	8009478 <pvPortMalloc+0xfc>
	__asm volatile
 8009460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009464:	f383 8811 	msr	BASEPRI, r3
 8009468:	f3bf 8f6f 	isb	sy
 800946c:	f3bf 8f4f 	dsb	sy
 8009470:	613b      	str	r3, [r7, #16]
}
 8009472:	bf00      	nop
 8009474:	bf00      	nop
 8009476:	e7fd      	b.n	8009474 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947a:	685a      	ldr	r2, [r3, #4]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	1ad2      	subs	r2, r2, r3
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800948a:	69b8      	ldr	r0, [r7, #24]
 800948c:	f000 f90a 	bl	80096a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009490:	4b1d      	ldr	r3, [pc, #116]	@ (8009508 <pvPortMalloc+0x18c>)
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	1ad3      	subs	r3, r2, r3
 800949a:	4a1b      	ldr	r2, [pc, #108]	@ (8009508 <pvPortMalloc+0x18c>)
 800949c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800949e:	4b1a      	ldr	r3, [pc, #104]	@ (8009508 <pvPortMalloc+0x18c>)
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	4b1b      	ldr	r3, [pc, #108]	@ (8009510 <pvPortMalloc+0x194>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d203      	bcs.n	80094b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80094aa:	4b17      	ldr	r3, [pc, #92]	@ (8009508 <pvPortMalloc+0x18c>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a18      	ldr	r2, [pc, #96]	@ (8009510 <pvPortMalloc+0x194>)
 80094b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80094b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b4:	685a      	ldr	r2, [r3, #4]
 80094b6:	4b13      	ldr	r3, [pc, #76]	@ (8009504 <pvPortMalloc+0x188>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	431a      	orrs	r2, r3
 80094bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80094c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c2:	2200      	movs	r2, #0
 80094c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80094c6:	4b13      	ldr	r3, [pc, #76]	@ (8009514 <pvPortMalloc+0x198>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	3301      	adds	r3, #1
 80094cc:	4a11      	ldr	r2, [pc, #68]	@ (8009514 <pvPortMalloc+0x198>)
 80094ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80094d0:	f7fe fbdc 	bl	8007c8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	f003 0307 	and.w	r3, r3, #7
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00b      	beq.n	80094f6 <pvPortMalloc+0x17a>
	__asm volatile
 80094de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e2:	f383 8811 	msr	BASEPRI, r3
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	f3bf 8f4f 	dsb	sy
 80094ee:	60fb      	str	r3, [r7, #12]
}
 80094f0:	bf00      	nop
 80094f2:	bf00      	nop
 80094f4:	e7fd      	b.n	80094f2 <pvPortMalloc+0x176>
	return pvReturn;
 80094f6:	69fb      	ldr	r3, [r7, #28]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3728      	adds	r7, #40	@ 0x28
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	20004d30 	.word	0x20004d30
 8009504:	20004d44 	.word	0x20004d44
 8009508:	20004d34 	.word	0x20004d34
 800950c:	20004d28 	.word	0x20004d28
 8009510:	20004d38 	.word	0x20004d38
 8009514:	20004d3c 	.word	0x20004d3c

08009518 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b086      	sub	sp, #24
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d04f      	beq.n	80095ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800952a:	2308      	movs	r3, #8
 800952c:	425b      	negs	r3, r3
 800952e:	697a      	ldr	r2, [r7, #20]
 8009530:	4413      	add	r3, r2
 8009532:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	685a      	ldr	r2, [r3, #4]
 800953c:	4b25      	ldr	r3, [pc, #148]	@ (80095d4 <vPortFree+0xbc>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4013      	ands	r3, r2
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10b      	bne.n	800955e <vPortFree+0x46>
	__asm volatile
 8009546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800954a:	f383 8811 	msr	BASEPRI, r3
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	60fb      	str	r3, [r7, #12]
}
 8009558:	bf00      	nop
 800955a:	bf00      	nop
 800955c:	e7fd      	b.n	800955a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00b      	beq.n	800957e <vPortFree+0x66>
	__asm volatile
 8009566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800956a:	f383 8811 	msr	BASEPRI, r3
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	60bb      	str	r3, [r7, #8]
}
 8009578:	bf00      	nop
 800957a:	bf00      	nop
 800957c:	e7fd      	b.n	800957a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	685a      	ldr	r2, [r3, #4]
 8009582:	4b14      	ldr	r3, [pc, #80]	@ (80095d4 <vPortFree+0xbc>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4013      	ands	r3, r2
 8009588:	2b00      	cmp	r3, #0
 800958a:	d01e      	beq.n	80095ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d11a      	bne.n	80095ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	685a      	ldr	r2, [r3, #4]
 8009598:	4b0e      	ldr	r3, [pc, #56]	@ (80095d4 <vPortFree+0xbc>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	43db      	mvns	r3, r3
 800959e:	401a      	ands	r2, r3
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80095a4:	f7fe fb64 	bl	8007c70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	685a      	ldr	r2, [r3, #4]
 80095ac:	4b0a      	ldr	r3, [pc, #40]	@ (80095d8 <vPortFree+0xc0>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4413      	add	r3, r2
 80095b2:	4a09      	ldr	r2, [pc, #36]	@ (80095d8 <vPortFree+0xc0>)
 80095b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80095b6:	6938      	ldr	r0, [r7, #16]
 80095b8:	f000 f874 	bl	80096a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80095bc:	4b07      	ldr	r3, [pc, #28]	@ (80095dc <vPortFree+0xc4>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	3301      	adds	r3, #1
 80095c2:	4a06      	ldr	r2, [pc, #24]	@ (80095dc <vPortFree+0xc4>)
 80095c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80095c6:	f7fe fb61 	bl	8007c8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80095ca:	bf00      	nop
 80095cc:	3718      	adds	r7, #24
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	20004d44 	.word	0x20004d44
 80095d8:	20004d34 	.word	0x20004d34
 80095dc:	20004d40 	.word	0x20004d40

080095e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80095e0:	b480      	push	{r7}
 80095e2:	b085      	sub	sp, #20
 80095e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80095e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80095ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80095ec:	4b27      	ldr	r3, [pc, #156]	@ (800968c <prvHeapInit+0xac>)
 80095ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f003 0307 	and.w	r3, r3, #7
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00c      	beq.n	8009614 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	3307      	adds	r3, #7
 80095fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f023 0307 	bic.w	r3, r3, #7
 8009606:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	1ad3      	subs	r3, r2, r3
 800960e:	4a1f      	ldr	r2, [pc, #124]	@ (800968c <prvHeapInit+0xac>)
 8009610:	4413      	add	r3, r2
 8009612:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009618:	4a1d      	ldr	r2, [pc, #116]	@ (8009690 <prvHeapInit+0xb0>)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800961e:	4b1c      	ldr	r3, [pc, #112]	@ (8009690 <prvHeapInit+0xb0>)
 8009620:	2200      	movs	r2, #0
 8009622:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	68ba      	ldr	r2, [r7, #8]
 8009628:	4413      	add	r3, r2
 800962a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800962c:	2208      	movs	r2, #8
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	1a9b      	subs	r3, r3, r2
 8009632:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f023 0307 	bic.w	r3, r3, #7
 800963a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	4a15      	ldr	r2, [pc, #84]	@ (8009694 <prvHeapInit+0xb4>)
 8009640:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009642:	4b14      	ldr	r3, [pc, #80]	@ (8009694 <prvHeapInit+0xb4>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2200      	movs	r2, #0
 8009648:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800964a:	4b12      	ldr	r3, [pc, #72]	@ (8009694 <prvHeapInit+0xb4>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2200      	movs	r2, #0
 8009650:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	1ad2      	subs	r2, r2, r3
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009660:	4b0c      	ldr	r3, [pc, #48]	@ (8009694 <prvHeapInit+0xb4>)
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	4a0a      	ldr	r2, [pc, #40]	@ (8009698 <prvHeapInit+0xb8>)
 800966e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	4a09      	ldr	r2, [pc, #36]	@ (800969c <prvHeapInit+0xbc>)
 8009676:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009678:	4b09      	ldr	r3, [pc, #36]	@ (80096a0 <prvHeapInit+0xc0>)
 800967a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800967e:	601a      	str	r2, [r3, #0]
}
 8009680:	bf00      	nop
 8009682:	3714      	adds	r7, #20
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	20001128 	.word	0x20001128
 8009690:	20004d28 	.word	0x20004d28
 8009694:	20004d30 	.word	0x20004d30
 8009698:	20004d38 	.word	0x20004d38
 800969c:	20004d34 	.word	0x20004d34
 80096a0:	20004d44 	.word	0x20004d44

080096a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80096ac:	4b28      	ldr	r3, [pc, #160]	@ (8009750 <prvInsertBlockIntoFreeList+0xac>)
 80096ae:	60fb      	str	r3, [r7, #12]
 80096b0:	e002      	b.n	80096b8 <prvInsertBlockIntoFreeList+0x14>
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	60fb      	str	r3, [r7, #12]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d8f7      	bhi.n	80096b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	4413      	add	r3, r2
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d108      	bne.n	80096e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	685a      	ldr	r2, [r3, #4]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	441a      	add	r2, r3
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	441a      	add	r2, r3
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d118      	bne.n	800972c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	4b15      	ldr	r3, [pc, #84]	@ (8009754 <prvInsertBlockIntoFreeList+0xb0>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	429a      	cmp	r2, r3
 8009704:	d00d      	beq.n	8009722 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	685a      	ldr	r2, [r3, #4]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	441a      	add	r2, r3
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	601a      	str	r2, [r3, #0]
 8009720:	e008      	b.n	8009734 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009722:	4b0c      	ldr	r3, [pc, #48]	@ (8009754 <prvInsertBlockIntoFreeList+0xb0>)
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	601a      	str	r2, [r3, #0]
 800972a:	e003      	b.n	8009734 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	429a      	cmp	r2, r3
 800973a:	d002      	beq.n	8009742 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009742:	bf00      	nop
 8009744:	3714      	adds	r7, #20
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	20004d28 	.word	0x20004d28
 8009754:	20004d30 	.word	0x20004d30

08009758 <malloc>:
 8009758:	4b02      	ldr	r3, [pc, #8]	@ (8009764 <malloc+0xc>)
 800975a:	4601      	mov	r1, r0
 800975c:	6818      	ldr	r0, [r3, #0]
 800975e:	f000 b825 	b.w	80097ac <_malloc_r>
 8009762:	bf00      	nop
 8009764:	2000001c 	.word	0x2000001c

08009768 <sbrk_aligned>:
 8009768:	b570      	push	{r4, r5, r6, lr}
 800976a:	4e0f      	ldr	r6, [pc, #60]	@ (80097a8 <sbrk_aligned+0x40>)
 800976c:	460c      	mov	r4, r1
 800976e:	6831      	ldr	r1, [r6, #0]
 8009770:	4605      	mov	r5, r0
 8009772:	b911      	cbnz	r1, 800977a <sbrk_aligned+0x12>
 8009774:	f000 fec8 	bl	800a508 <_sbrk_r>
 8009778:	6030      	str	r0, [r6, #0]
 800977a:	4621      	mov	r1, r4
 800977c:	4628      	mov	r0, r5
 800977e:	f000 fec3 	bl	800a508 <_sbrk_r>
 8009782:	1c43      	adds	r3, r0, #1
 8009784:	d103      	bne.n	800978e <sbrk_aligned+0x26>
 8009786:	f04f 34ff 	mov.w	r4, #4294967295
 800978a:	4620      	mov	r0, r4
 800978c:	bd70      	pop	{r4, r5, r6, pc}
 800978e:	1cc4      	adds	r4, r0, #3
 8009790:	f024 0403 	bic.w	r4, r4, #3
 8009794:	42a0      	cmp	r0, r4
 8009796:	d0f8      	beq.n	800978a <sbrk_aligned+0x22>
 8009798:	1a21      	subs	r1, r4, r0
 800979a:	4628      	mov	r0, r5
 800979c:	f000 feb4 	bl	800a508 <_sbrk_r>
 80097a0:	3001      	adds	r0, #1
 80097a2:	d1f2      	bne.n	800978a <sbrk_aligned+0x22>
 80097a4:	e7ef      	b.n	8009786 <sbrk_aligned+0x1e>
 80097a6:	bf00      	nop
 80097a8:	20004d48 	.word	0x20004d48

080097ac <_malloc_r>:
 80097ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097b0:	1ccd      	adds	r5, r1, #3
 80097b2:	f025 0503 	bic.w	r5, r5, #3
 80097b6:	3508      	adds	r5, #8
 80097b8:	2d0c      	cmp	r5, #12
 80097ba:	bf38      	it	cc
 80097bc:	250c      	movcc	r5, #12
 80097be:	2d00      	cmp	r5, #0
 80097c0:	4606      	mov	r6, r0
 80097c2:	db01      	blt.n	80097c8 <_malloc_r+0x1c>
 80097c4:	42a9      	cmp	r1, r5
 80097c6:	d904      	bls.n	80097d2 <_malloc_r+0x26>
 80097c8:	230c      	movs	r3, #12
 80097ca:	6033      	str	r3, [r6, #0]
 80097cc:	2000      	movs	r0, #0
 80097ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80098a8 <_malloc_r+0xfc>
 80097d6:	f000 f869 	bl	80098ac <__malloc_lock>
 80097da:	f8d8 3000 	ldr.w	r3, [r8]
 80097de:	461c      	mov	r4, r3
 80097e0:	bb44      	cbnz	r4, 8009834 <_malloc_r+0x88>
 80097e2:	4629      	mov	r1, r5
 80097e4:	4630      	mov	r0, r6
 80097e6:	f7ff ffbf 	bl	8009768 <sbrk_aligned>
 80097ea:	1c43      	adds	r3, r0, #1
 80097ec:	4604      	mov	r4, r0
 80097ee:	d158      	bne.n	80098a2 <_malloc_r+0xf6>
 80097f0:	f8d8 4000 	ldr.w	r4, [r8]
 80097f4:	4627      	mov	r7, r4
 80097f6:	2f00      	cmp	r7, #0
 80097f8:	d143      	bne.n	8009882 <_malloc_r+0xd6>
 80097fa:	2c00      	cmp	r4, #0
 80097fc:	d04b      	beq.n	8009896 <_malloc_r+0xea>
 80097fe:	6823      	ldr	r3, [r4, #0]
 8009800:	4639      	mov	r1, r7
 8009802:	4630      	mov	r0, r6
 8009804:	eb04 0903 	add.w	r9, r4, r3
 8009808:	f000 fe7e 	bl	800a508 <_sbrk_r>
 800980c:	4581      	cmp	r9, r0
 800980e:	d142      	bne.n	8009896 <_malloc_r+0xea>
 8009810:	6821      	ldr	r1, [r4, #0]
 8009812:	1a6d      	subs	r5, r5, r1
 8009814:	4629      	mov	r1, r5
 8009816:	4630      	mov	r0, r6
 8009818:	f7ff ffa6 	bl	8009768 <sbrk_aligned>
 800981c:	3001      	adds	r0, #1
 800981e:	d03a      	beq.n	8009896 <_malloc_r+0xea>
 8009820:	6823      	ldr	r3, [r4, #0]
 8009822:	442b      	add	r3, r5
 8009824:	6023      	str	r3, [r4, #0]
 8009826:	f8d8 3000 	ldr.w	r3, [r8]
 800982a:	685a      	ldr	r2, [r3, #4]
 800982c:	bb62      	cbnz	r2, 8009888 <_malloc_r+0xdc>
 800982e:	f8c8 7000 	str.w	r7, [r8]
 8009832:	e00f      	b.n	8009854 <_malloc_r+0xa8>
 8009834:	6822      	ldr	r2, [r4, #0]
 8009836:	1b52      	subs	r2, r2, r5
 8009838:	d420      	bmi.n	800987c <_malloc_r+0xd0>
 800983a:	2a0b      	cmp	r2, #11
 800983c:	d917      	bls.n	800986e <_malloc_r+0xc2>
 800983e:	1961      	adds	r1, r4, r5
 8009840:	42a3      	cmp	r3, r4
 8009842:	6025      	str	r5, [r4, #0]
 8009844:	bf18      	it	ne
 8009846:	6059      	strne	r1, [r3, #4]
 8009848:	6863      	ldr	r3, [r4, #4]
 800984a:	bf08      	it	eq
 800984c:	f8c8 1000 	streq.w	r1, [r8]
 8009850:	5162      	str	r2, [r4, r5]
 8009852:	604b      	str	r3, [r1, #4]
 8009854:	4630      	mov	r0, r6
 8009856:	f000 f82f 	bl	80098b8 <__malloc_unlock>
 800985a:	f104 000b 	add.w	r0, r4, #11
 800985e:	1d23      	adds	r3, r4, #4
 8009860:	f020 0007 	bic.w	r0, r0, #7
 8009864:	1ac2      	subs	r2, r0, r3
 8009866:	bf1c      	itt	ne
 8009868:	1a1b      	subne	r3, r3, r0
 800986a:	50a3      	strne	r3, [r4, r2]
 800986c:	e7af      	b.n	80097ce <_malloc_r+0x22>
 800986e:	6862      	ldr	r2, [r4, #4]
 8009870:	42a3      	cmp	r3, r4
 8009872:	bf0c      	ite	eq
 8009874:	f8c8 2000 	streq.w	r2, [r8]
 8009878:	605a      	strne	r2, [r3, #4]
 800987a:	e7eb      	b.n	8009854 <_malloc_r+0xa8>
 800987c:	4623      	mov	r3, r4
 800987e:	6864      	ldr	r4, [r4, #4]
 8009880:	e7ae      	b.n	80097e0 <_malloc_r+0x34>
 8009882:	463c      	mov	r4, r7
 8009884:	687f      	ldr	r7, [r7, #4]
 8009886:	e7b6      	b.n	80097f6 <_malloc_r+0x4a>
 8009888:	461a      	mov	r2, r3
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	42a3      	cmp	r3, r4
 800988e:	d1fb      	bne.n	8009888 <_malloc_r+0xdc>
 8009890:	2300      	movs	r3, #0
 8009892:	6053      	str	r3, [r2, #4]
 8009894:	e7de      	b.n	8009854 <_malloc_r+0xa8>
 8009896:	230c      	movs	r3, #12
 8009898:	6033      	str	r3, [r6, #0]
 800989a:	4630      	mov	r0, r6
 800989c:	f000 f80c 	bl	80098b8 <__malloc_unlock>
 80098a0:	e794      	b.n	80097cc <_malloc_r+0x20>
 80098a2:	6005      	str	r5, [r0, #0]
 80098a4:	e7d6      	b.n	8009854 <_malloc_r+0xa8>
 80098a6:	bf00      	nop
 80098a8:	20004d4c 	.word	0x20004d4c

080098ac <__malloc_lock>:
 80098ac:	4801      	ldr	r0, [pc, #4]	@ (80098b4 <__malloc_lock+0x8>)
 80098ae:	f000 be78 	b.w	800a5a2 <__retarget_lock_acquire_recursive>
 80098b2:	bf00      	nop
 80098b4:	20004e90 	.word	0x20004e90

080098b8 <__malloc_unlock>:
 80098b8:	4801      	ldr	r0, [pc, #4]	@ (80098c0 <__malloc_unlock+0x8>)
 80098ba:	f000 be73 	b.w	800a5a4 <__retarget_lock_release_recursive>
 80098be:	bf00      	nop
 80098c0:	20004e90 	.word	0x20004e90

080098c4 <__cvt>:
 80098c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098c8:	ec57 6b10 	vmov	r6, r7, d0
 80098cc:	2f00      	cmp	r7, #0
 80098ce:	460c      	mov	r4, r1
 80098d0:	4619      	mov	r1, r3
 80098d2:	463b      	mov	r3, r7
 80098d4:	bfbb      	ittet	lt
 80098d6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80098da:	461f      	movlt	r7, r3
 80098dc:	2300      	movge	r3, #0
 80098de:	232d      	movlt	r3, #45	@ 0x2d
 80098e0:	700b      	strb	r3, [r1, #0]
 80098e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80098e4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80098e8:	4691      	mov	r9, r2
 80098ea:	f023 0820 	bic.w	r8, r3, #32
 80098ee:	bfbc      	itt	lt
 80098f0:	4632      	movlt	r2, r6
 80098f2:	4616      	movlt	r6, r2
 80098f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80098f8:	d005      	beq.n	8009906 <__cvt+0x42>
 80098fa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80098fe:	d100      	bne.n	8009902 <__cvt+0x3e>
 8009900:	3401      	adds	r4, #1
 8009902:	2102      	movs	r1, #2
 8009904:	e000      	b.n	8009908 <__cvt+0x44>
 8009906:	2103      	movs	r1, #3
 8009908:	ab03      	add	r3, sp, #12
 800990a:	9301      	str	r3, [sp, #4]
 800990c:	ab02      	add	r3, sp, #8
 800990e:	9300      	str	r3, [sp, #0]
 8009910:	ec47 6b10 	vmov	d0, r6, r7
 8009914:	4653      	mov	r3, sl
 8009916:	4622      	mov	r2, r4
 8009918:	f000 fede 	bl	800a6d8 <_dtoa_r>
 800991c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009920:	4605      	mov	r5, r0
 8009922:	d119      	bne.n	8009958 <__cvt+0x94>
 8009924:	f019 0f01 	tst.w	r9, #1
 8009928:	d00e      	beq.n	8009948 <__cvt+0x84>
 800992a:	eb00 0904 	add.w	r9, r0, r4
 800992e:	2200      	movs	r2, #0
 8009930:	2300      	movs	r3, #0
 8009932:	4630      	mov	r0, r6
 8009934:	4639      	mov	r1, r7
 8009936:	f7f7 f8e7 	bl	8000b08 <__aeabi_dcmpeq>
 800993a:	b108      	cbz	r0, 8009940 <__cvt+0x7c>
 800993c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009940:	2230      	movs	r2, #48	@ 0x30
 8009942:	9b03      	ldr	r3, [sp, #12]
 8009944:	454b      	cmp	r3, r9
 8009946:	d31e      	bcc.n	8009986 <__cvt+0xc2>
 8009948:	9b03      	ldr	r3, [sp, #12]
 800994a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800994c:	1b5b      	subs	r3, r3, r5
 800994e:	4628      	mov	r0, r5
 8009950:	6013      	str	r3, [r2, #0]
 8009952:	b004      	add	sp, #16
 8009954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009958:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800995c:	eb00 0904 	add.w	r9, r0, r4
 8009960:	d1e5      	bne.n	800992e <__cvt+0x6a>
 8009962:	7803      	ldrb	r3, [r0, #0]
 8009964:	2b30      	cmp	r3, #48	@ 0x30
 8009966:	d10a      	bne.n	800997e <__cvt+0xba>
 8009968:	2200      	movs	r2, #0
 800996a:	2300      	movs	r3, #0
 800996c:	4630      	mov	r0, r6
 800996e:	4639      	mov	r1, r7
 8009970:	f7f7 f8ca 	bl	8000b08 <__aeabi_dcmpeq>
 8009974:	b918      	cbnz	r0, 800997e <__cvt+0xba>
 8009976:	f1c4 0401 	rsb	r4, r4, #1
 800997a:	f8ca 4000 	str.w	r4, [sl]
 800997e:	f8da 3000 	ldr.w	r3, [sl]
 8009982:	4499      	add	r9, r3
 8009984:	e7d3      	b.n	800992e <__cvt+0x6a>
 8009986:	1c59      	adds	r1, r3, #1
 8009988:	9103      	str	r1, [sp, #12]
 800998a:	701a      	strb	r2, [r3, #0]
 800998c:	e7d9      	b.n	8009942 <__cvt+0x7e>

0800998e <__exponent>:
 800998e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009990:	2900      	cmp	r1, #0
 8009992:	bfba      	itte	lt
 8009994:	4249      	neglt	r1, r1
 8009996:	232d      	movlt	r3, #45	@ 0x2d
 8009998:	232b      	movge	r3, #43	@ 0x2b
 800999a:	2909      	cmp	r1, #9
 800999c:	7002      	strb	r2, [r0, #0]
 800999e:	7043      	strb	r3, [r0, #1]
 80099a0:	dd29      	ble.n	80099f6 <__exponent+0x68>
 80099a2:	f10d 0307 	add.w	r3, sp, #7
 80099a6:	461d      	mov	r5, r3
 80099a8:	270a      	movs	r7, #10
 80099aa:	461a      	mov	r2, r3
 80099ac:	fbb1 f6f7 	udiv	r6, r1, r7
 80099b0:	fb07 1416 	mls	r4, r7, r6, r1
 80099b4:	3430      	adds	r4, #48	@ 0x30
 80099b6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80099ba:	460c      	mov	r4, r1
 80099bc:	2c63      	cmp	r4, #99	@ 0x63
 80099be:	f103 33ff 	add.w	r3, r3, #4294967295
 80099c2:	4631      	mov	r1, r6
 80099c4:	dcf1      	bgt.n	80099aa <__exponent+0x1c>
 80099c6:	3130      	adds	r1, #48	@ 0x30
 80099c8:	1e94      	subs	r4, r2, #2
 80099ca:	f803 1c01 	strb.w	r1, [r3, #-1]
 80099ce:	1c41      	adds	r1, r0, #1
 80099d0:	4623      	mov	r3, r4
 80099d2:	42ab      	cmp	r3, r5
 80099d4:	d30a      	bcc.n	80099ec <__exponent+0x5e>
 80099d6:	f10d 0309 	add.w	r3, sp, #9
 80099da:	1a9b      	subs	r3, r3, r2
 80099dc:	42ac      	cmp	r4, r5
 80099de:	bf88      	it	hi
 80099e0:	2300      	movhi	r3, #0
 80099e2:	3302      	adds	r3, #2
 80099e4:	4403      	add	r3, r0
 80099e6:	1a18      	subs	r0, r3, r0
 80099e8:	b003      	add	sp, #12
 80099ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099ec:	f813 6b01 	ldrb.w	r6, [r3], #1
 80099f0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80099f4:	e7ed      	b.n	80099d2 <__exponent+0x44>
 80099f6:	2330      	movs	r3, #48	@ 0x30
 80099f8:	3130      	adds	r1, #48	@ 0x30
 80099fa:	7083      	strb	r3, [r0, #2]
 80099fc:	70c1      	strb	r1, [r0, #3]
 80099fe:	1d03      	adds	r3, r0, #4
 8009a00:	e7f1      	b.n	80099e6 <__exponent+0x58>
	...

08009a04 <_printf_float>:
 8009a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a08:	b08d      	sub	sp, #52	@ 0x34
 8009a0a:	460c      	mov	r4, r1
 8009a0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009a10:	4616      	mov	r6, r2
 8009a12:	461f      	mov	r7, r3
 8009a14:	4605      	mov	r5, r0
 8009a16:	f000 fce9 	bl	800a3ec <_localeconv_r>
 8009a1a:	6803      	ldr	r3, [r0, #0]
 8009a1c:	9304      	str	r3, [sp, #16]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7f6 fc46 	bl	80002b0 <strlen>
 8009a24:	2300      	movs	r3, #0
 8009a26:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a28:	f8d8 3000 	ldr.w	r3, [r8]
 8009a2c:	9005      	str	r0, [sp, #20]
 8009a2e:	3307      	adds	r3, #7
 8009a30:	f023 0307 	bic.w	r3, r3, #7
 8009a34:	f103 0208 	add.w	r2, r3, #8
 8009a38:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009a3c:	f8d4 b000 	ldr.w	fp, [r4]
 8009a40:	f8c8 2000 	str.w	r2, [r8]
 8009a44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a48:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009a4c:	9307      	str	r3, [sp, #28]
 8009a4e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009a52:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009a56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a5a:	4b9c      	ldr	r3, [pc, #624]	@ (8009ccc <_printf_float+0x2c8>)
 8009a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a60:	f7f7 f884 	bl	8000b6c <__aeabi_dcmpun>
 8009a64:	bb70      	cbnz	r0, 8009ac4 <_printf_float+0xc0>
 8009a66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a6a:	4b98      	ldr	r3, [pc, #608]	@ (8009ccc <_printf_float+0x2c8>)
 8009a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a70:	f7f7 f85e 	bl	8000b30 <__aeabi_dcmple>
 8009a74:	bb30      	cbnz	r0, 8009ac4 <_printf_float+0xc0>
 8009a76:	2200      	movs	r2, #0
 8009a78:	2300      	movs	r3, #0
 8009a7a:	4640      	mov	r0, r8
 8009a7c:	4649      	mov	r1, r9
 8009a7e:	f7f7 f84d 	bl	8000b1c <__aeabi_dcmplt>
 8009a82:	b110      	cbz	r0, 8009a8a <_printf_float+0x86>
 8009a84:	232d      	movs	r3, #45	@ 0x2d
 8009a86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a8a:	4a91      	ldr	r2, [pc, #580]	@ (8009cd0 <_printf_float+0x2cc>)
 8009a8c:	4b91      	ldr	r3, [pc, #580]	@ (8009cd4 <_printf_float+0x2d0>)
 8009a8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009a92:	bf94      	ite	ls
 8009a94:	4690      	movls	r8, r2
 8009a96:	4698      	movhi	r8, r3
 8009a98:	2303      	movs	r3, #3
 8009a9a:	6123      	str	r3, [r4, #16]
 8009a9c:	f02b 0304 	bic.w	r3, fp, #4
 8009aa0:	6023      	str	r3, [r4, #0]
 8009aa2:	f04f 0900 	mov.w	r9, #0
 8009aa6:	9700      	str	r7, [sp, #0]
 8009aa8:	4633      	mov	r3, r6
 8009aaa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009aac:	4621      	mov	r1, r4
 8009aae:	4628      	mov	r0, r5
 8009ab0:	f000 f9d2 	bl	8009e58 <_printf_common>
 8009ab4:	3001      	adds	r0, #1
 8009ab6:	f040 808d 	bne.w	8009bd4 <_printf_float+0x1d0>
 8009aba:	f04f 30ff 	mov.w	r0, #4294967295
 8009abe:	b00d      	add	sp, #52	@ 0x34
 8009ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac4:	4642      	mov	r2, r8
 8009ac6:	464b      	mov	r3, r9
 8009ac8:	4640      	mov	r0, r8
 8009aca:	4649      	mov	r1, r9
 8009acc:	f7f7 f84e 	bl	8000b6c <__aeabi_dcmpun>
 8009ad0:	b140      	cbz	r0, 8009ae4 <_printf_float+0xe0>
 8009ad2:	464b      	mov	r3, r9
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	bfbc      	itt	lt
 8009ad8:	232d      	movlt	r3, #45	@ 0x2d
 8009ada:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009ade:	4a7e      	ldr	r2, [pc, #504]	@ (8009cd8 <_printf_float+0x2d4>)
 8009ae0:	4b7e      	ldr	r3, [pc, #504]	@ (8009cdc <_printf_float+0x2d8>)
 8009ae2:	e7d4      	b.n	8009a8e <_printf_float+0x8a>
 8009ae4:	6863      	ldr	r3, [r4, #4]
 8009ae6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009aea:	9206      	str	r2, [sp, #24]
 8009aec:	1c5a      	adds	r2, r3, #1
 8009aee:	d13b      	bne.n	8009b68 <_printf_float+0x164>
 8009af0:	2306      	movs	r3, #6
 8009af2:	6063      	str	r3, [r4, #4]
 8009af4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009af8:	2300      	movs	r3, #0
 8009afa:	6022      	str	r2, [r4, #0]
 8009afc:	9303      	str	r3, [sp, #12]
 8009afe:	ab0a      	add	r3, sp, #40	@ 0x28
 8009b00:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009b04:	ab09      	add	r3, sp, #36	@ 0x24
 8009b06:	9300      	str	r3, [sp, #0]
 8009b08:	6861      	ldr	r1, [r4, #4]
 8009b0a:	ec49 8b10 	vmov	d0, r8, r9
 8009b0e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009b12:	4628      	mov	r0, r5
 8009b14:	f7ff fed6 	bl	80098c4 <__cvt>
 8009b18:	9b06      	ldr	r3, [sp, #24]
 8009b1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b1c:	2b47      	cmp	r3, #71	@ 0x47
 8009b1e:	4680      	mov	r8, r0
 8009b20:	d129      	bne.n	8009b76 <_printf_float+0x172>
 8009b22:	1cc8      	adds	r0, r1, #3
 8009b24:	db02      	blt.n	8009b2c <_printf_float+0x128>
 8009b26:	6863      	ldr	r3, [r4, #4]
 8009b28:	4299      	cmp	r1, r3
 8009b2a:	dd41      	ble.n	8009bb0 <_printf_float+0x1ac>
 8009b2c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009b30:	fa5f fa8a 	uxtb.w	sl, sl
 8009b34:	3901      	subs	r1, #1
 8009b36:	4652      	mov	r2, sl
 8009b38:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009b3c:	9109      	str	r1, [sp, #36]	@ 0x24
 8009b3e:	f7ff ff26 	bl	800998e <__exponent>
 8009b42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b44:	1813      	adds	r3, r2, r0
 8009b46:	2a01      	cmp	r2, #1
 8009b48:	4681      	mov	r9, r0
 8009b4a:	6123      	str	r3, [r4, #16]
 8009b4c:	dc02      	bgt.n	8009b54 <_printf_float+0x150>
 8009b4e:	6822      	ldr	r2, [r4, #0]
 8009b50:	07d2      	lsls	r2, r2, #31
 8009b52:	d501      	bpl.n	8009b58 <_printf_float+0x154>
 8009b54:	3301      	adds	r3, #1
 8009b56:	6123      	str	r3, [r4, #16]
 8009b58:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d0a2      	beq.n	8009aa6 <_printf_float+0xa2>
 8009b60:	232d      	movs	r3, #45	@ 0x2d
 8009b62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b66:	e79e      	b.n	8009aa6 <_printf_float+0xa2>
 8009b68:	9a06      	ldr	r2, [sp, #24]
 8009b6a:	2a47      	cmp	r2, #71	@ 0x47
 8009b6c:	d1c2      	bne.n	8009af4 <_printf_float+0xf0>
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d1c0      	bne.n	8009af4 <_printf_float+0xf0>
 8009b72:	2301      	movs	r3, #1
 8009b74:	e7bd      	b.n	8009af2 <_printf_float+0xee>
 8009b76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009b7a:	d9db      	bls.n	8009b34 <_printf_float+0x130>
 8009b7c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009b80:	d118      	bne.n	8009bb4 <_printf_float+0x1b0>
 8009b82:	2900      	cmp	r1, #0
 8009b84:	6863      	ldr	r3, [r4, #4]
 8009b86:	dd0b      	ble.n	8009ba0 <_printf_float+0x19c>
 8009b88:	6121      	str	r1, [r4, #16]
 8009b8a:	b913      	cbnz	r3, 8009b92 <_printf_float+0x18e>
 8009b8c:	6822      	ldr	r2, [r4, #0]
 8009b8e:	07d0      	lsls	r0, r2, #31
 8009b90:	d502      	bpl.n	8009b98 <_printf_float+0x194>
 8009b92:	3301      	adds	r3, #1
 8009b94:	440b      	add	r3, r1
 8009b96:	6123      	str	r3, [r4, #16]
 8009b98:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009b9a:	f04f 0900 	mov.w	r9, #0
 8009b9e:	e7db      	b.n	8009b58 <_printf_float+0x154>
 8009ba0:	b913      	cbnz	r3, 8009ba8 <_printf_float+0x1a4>
 8009ba2:	6822      	ldr	r2, [r4, #0]
 8009ba4:	07d2      	lsls	r2, r2, #31
 8009ba6:	d501      	bpl.n	8009bac <_printf_float+0x1a8>
 8009ba8:	3302      	adds	r3, #2
 8009baa:	e7f4      	b.n	8009b96 <_printf_float+0x192>
 8009bac:	2301      	movs	r3, #1
 8009bae:	e7f2      	b.n	8009b96 <_printf_float+0x192>
 8009bb0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009bb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bb6:	4299      	cmp	r1, r3
 8009bb8:	db05      	blt.n	8009bc6 <_printf_float+0x1c2>
 8009bba:	6823      	ldr	r3, [r4, #0]
 8009bbc:	6121      	str	r1, [r4, #16]
 8009bbe:	07d8      	lsls	r0, r3, #31
 8009bc0:	d5ea      	bpl.n	8009b98 <_printf_float+0x194>
 8009bc2:	1c4b      	adds	r3, r1, #1
 8009bc4:	e7e7      	b.n	8009b96 <_printf_float+0x192>
 8009bc6:	2900      	cmp	r1, #0
 8009bc8:	bfd4      	ite	le
 8009bca:	f1c1 0202 	rsble	r2, r1, #2
 8009bce:	2201      	movgt	r2, #1
 8009bd0:	4413      	add	r3, r2
 8009bd2:	e7e0      	b.n	8009b96 <_printf_float+0x192>
 8009bd4:	6823      	ldr	r3, [r4, #0]
 8009bd6:	055a      	lsls	r2, r3, #21
 8009bd8:	d407      	bmi.n	8009bea <_printf_float+0x1e6>
 8009bda:	6923      	ldr	r3, [r4, #16]
 8009bdc:	4642      	mov	r2, r8
 8009bde:	4631      	mov	r1, r6
 8009be0:	4628      	mov	r0, r5
 8009be2:	47b8      	blx	r7
 8009be4:	3001      	adds	r0, #1
 8009be6:	d12b      	bne.n	8009c40 <_printf_float+0x23c>
 8009be8:	e767      	b.n	8009aba <_printf_float+0xb6>
 8009bea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009bee:	f240 80dd 	bls.w	8009dac <_printf_float+0x3a8>
 8009bf2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	f7f6 ff85 	bl	8000b08 <__aeabi_dcmpeq>
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	d033      	beq.n	8009c6a <_printf_float+0x266>
 8009c02:	4a37      	ldr	r2, [pc, #220]	@ (8009ce0 <_printf_float+0x2dc>)
 8009c04:	2301      	movs	r3, #1
 8009c06:	4631      	mov	r1, r6
 8009c08:	4628      	mov	r0, r5
 8009c0a:	47b8      	blx	r7
 8009c0c:	3001      	adds	r0, #1
 8009c0e:	f43f af54 	beq.w	8009aba <_printf_float+0xb6>
 8009c12:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009c16:	4543      	cmp	r3, r8
 8009c18:	db02      	blt.n	8009c20 <_printf_float+0x21c>
 8009c1a:	6823      	ldr	r3, [r4, #0]
 8009c1c:	07d8      	lsls	r0, r3, #31
 8009c1e:	d50f      	bpl.n	8009c40 <_printf_float+0x23c>
 8009c20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c24:	4631      	mov	r1, r6
 8009c26:	4628      	mov	r0, r5
 8009c28:	47b8      	blx	r7
 8009c2a:	3001      	adds	r0, #1
 8009c2c:	f43f af45 	beq.w	8009aba <_printf_float+0xb6>
 8009c30:	f04f 0900 	mov.w	r9, #0
 8009c34:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c38:	f104 0a1a 	add.w	sl, r4, #26
 8009c3c:	45c8      	cmp	r8, r9
 8009c3e:	dc09      	bgt.n	8009c54 <_printf_float+0x250>
 8009c40:	6823      	ldr	r3, [r4, #0]
 8009c42:	079b      	lsls	r3, r3, #30
 8009c44:	f100 8103 	bmi.w	8009e4e <_printf_float+0x44a>
 8009c48:	68e0      	ldr	r0, [r4, #12]
 8009c4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c4c:	4298      	cmp	r0, r3
 8009c4e:	bfb8      	it	lt
 8009c50:	4618      	movlt	r0, r3
 8009c52:	e734      	b.n	8009abe <_printf_float+0xba>
 8009c54:	2301      	movs	r3, #1
 8009c56:	4652      	mov	r2, sl
 8009c58:	4631      	mov	r1, r6
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	47b8      	blx	r7
 8009c5e:	3001      	adds	r0, #1
 8009c60:	f43f af2b 	beq.w	8009aba <_printf_float+0xb6>
 8009c64:	f109 0901 	add.w	r9, r9, #1
 8009c68:	e7e8      	b.n	8009c3c <_printf_float+0x238>
 8009c6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	dc39      	bgt.n	8009ce4 <_printf_float+0x2e0>
 8009c70:	4a1b      	ldr	r2, [pc, #108]	@ (8009ce0 <_printf_float+0x2dc>)
 8009c72:	2301      	movs	r3, #1
 8009c74:	4631      	mov	r1, r6
 8009c76:	4628      	mov	r0, r5
 8009c78:	47b8      	blx	r7
 8009c7a:	3001      	adds	r0, #1
 8009c7c:	f43f af1d 	beq.w	8009aba <_printf_float+0xb6>
 8009c80:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009c84:	ea59 0303 	orrs.w	r3, r9, r3
 8009c88:	d102      	bne.n	8009c90 <_printf_float+0x28c>
 8009c8a:	6823      	ldr	r3, [r4, #0]
 8009c8c:	07d9      	lsls	r1, r3, #31
 8009c8e:	d5d7      	bpl.n	8009c40 <_printf_float+0x23c>
 8009c90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c94:	4631      	mov	r1, r6
 8009c96:	4628      	mov	r0, r5
 8009c98:	47b8      	blx	r7
 8009c9a:	3001      	adds	r0, #1
 8009c9c:	f43f af0d 	beq.w	8009aba <_printf_float+0xb6>
 8009ca0:	f04f 0a00 	mov.w	sl, #0
 8009ca4:	f104 0b1a 	add.w	fp, r4, #26
 8009ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009caa:	425b      	negs	r3, r3
 8009cac:	4553      	cmp	r3, sl
 8009cae:	dc01      	bgt.n	8009cb4 <_printf_float+0x2b0>
 8009cb0:	464b      	mov	r3, r9
 8009cb2:	e793      	b.n	8009bdc <_printf_float+0x1d8>
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	465a      	mov	r2, fp
 8009cb8:	4631      	mov	r1, r6
 8009cba:	4628      	mov	r0, r5
 8009cbc:	47b8      	blx	r7
 8009cbe:	3001      	adds	r0, #1
 8009cc0:	f43f aefb 	beq.w	8009aba <_printf_float+0xb6>
 8009cc4:	f10a 0a01 	add.w	sl, sl, #1
 8009cc8:	e7ee      	b.n	8009ca8 <_printf_float+0x2a4>
 8009cca:	bf00      	nop
 8009ccc:	7fefffff 	.word	0x7fefffff
 8009cd0:	0800c650 	.word	0x0800c650
 8009cd4:	0800c654 	.word	0x0800c654
 8009cd8:	0800c658 	.word	0x0800c658
 8009cdc:	0800c65c 	.word	0x0800c65c
 8009ce0:	0800c660 	.word	0x0800c660
 8009ce4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009ce6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009cea:	4553      	cmp	r3, sl
 8009cec:	bfa8      	it	ge
 8009cee:	4653      	movge	r3, sl
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	4699      	mov	r9, r3
 8009cf4:	dc36      	bgt.n	8009d64 <_printf_float+0x360>
 8009cf6:	f04f 0b00 	mov.w	fp, #0
 8009cfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009cfe:	f104 021a 	add.w	r2, r4, #26
 8009d02:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d04:	9306      	str	r3, [sp, #24]
 8009d06:	eba3 0309 	sub.w	r3, r3, r9
 8009d0a:	455b      	cmp	r3, fp
 8009d0c:	dc31      	bgt.n	8009d72 <_printf_float+0x36e>
 8009d0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d10:	459a      	cmp	sl, r3
 8009d12:	dc3a      	bgt.n	8009d8a <_printf_float+0x386>
 8009d14:	6823      	ldr	r3, [r4, #0]
 8009d16:	07da      	lsls	r2, r3, #31
 8009d18:	d437      	bmi.n	8009d8a <_printf_float+0x386>
 8009d1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d1c:	ebaa 0903 	sub.w	r9, sl, r3
 8009d20:	9b06      	ldr	r3, [sp, #24]
 8009d22:	ebaa 0303 	sub.w	r3, sl, r3
 8009d26:	4599      	cmp	r9, r3
 8009d28:	bfa8      	it	ge
 8009d2a:	4699      	movge	r9, r3
 8009d2c:	f1b9 0f00 	cmp.w	r9, #0
 8009d30:	dc33      	bgt.n	8009d9a <_printf_float+0x396>
 8009d32:	f04f 0800 	mov.w	r8, #0
 8009d36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d3a:	f104 0b1a 	add.w	fp, r4, #26
 8009d3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d40:	ebaa 0303 	sub.w	r3, sl, r3
 8009d44:	eba3 0309 	sub.w	r3, r3, r9
 8009d48:	4543      	cmp	r3, r8
 8009d4a:	f77f af79 	ble.w	8009c40 <_printf_float+0x23c>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	465a      	mov	r2, fp
 8009d52:	4631      	mov	r1, r6
 8009d54:	4628      	mov	r0, r5
 8009d56:	47b8      	blx	r7
 8009d58:	3001      	adds	r0, #1
 8009d5a:	f43f aeae 	beq.w	8009aba <_printf_float+0xb6>
 8009d5e:	f108 0801 	add.w	r8, r8, #1
 8009d62:	e7ec      	b.n	8009d3e <_printf_float+0x33a>
 8009d64:	4642      	mov	r2, r8
 8009d66:	4631      	mov	r1, r6
 8009d68:	4628      	mov	r0, r5
 8009d6a:	47b8      	blx	r7
 8009d6c:	3001      	adds	r0, #1
 8009d6e:	d1c2      	bne.n	8009cf6 <_printf_float+0x2f2>
 8009d70:	e6a3      	b.n	8009aba <_printf_float+0xb6>
 8009d72:	2301      	movs	r3, #1
 8009d74:	4631      	mov	r1, r6
 8009d76:	4628      	mov	r0, r5
 8009d78:	9206      	str	r2, [sp, #24]
 8009d7a:	47b8      	blx	r7
 8009d7c:	3001      	adds	r0, #1
 8009d7e:	f43f ae9c 	beq.w	8009aba <_printf_float+0xb6>
 8009d82:	9a06      	ldr	r2, [sp, #24]
 8009d84:	f10b 0b01 	add.w	fp, fp, #1
 8009d88:	e7bb      	b.n	8009d02 <_printf_float+0x2fe>
 8009d8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d8e:	4631      	mov	r1, r6
 8009d90:	4628      	mov	r0, r5
 8009d92:	47b8      	blx	r7
 8009d94:	3001      	adds	r0, #1
 8009d96:	d1c0      	bne.n	8009d1a <_printf_float+0x316>
 8009d98:	e68f      	b.n	8009aba <_printf_float+0xb6>
 8009d9a:	9a06      	ldr	r2, [sp, #24]
 8009d9c:	464b      	mov	r3, r9
 8009d9e:	4442      	add	r2, r8
 8009da0:	4631      	mov	r1, r6
 8009da2:	4628      	mov	r0, r5
 8009da4:	47b8      	blx	r7
 8009da6:	3001      	adds	r0, #1
 8009da8:	d1c3      	bne.n	8009d32 <_printf_float+0x32e>
 8009daa:	e686      	b.n	8009aba <_printf_float+0xb6>
 8009dac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009db0:	f1ba 0f01 	cmp.w	sl, #1
 8009db4:	dc01      	bgt.n	8009dba <_printf_float+0x3b6>
 8009db6:	07db      	lsls	r3, r3, #31
 8009db8:	d536      	bpl.n	8009e28 <_printf_float+0x424>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	4642      	mov	r2, r8
 8009dbe:	4631      	mov	r1, r6
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	47b8      	blx	r7
 8009dc4:	3001      	adds	r0, #1
 8009dc6:	f43f ae78 	beq.w	8009aba <_printf_float+0xb6>
 8009dca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dce:	4631      	mov	r1, r6
 8009dd0:	4628      	mov	r0, r5
 8009dd2:	47b8      	blx	r7
 8009dd4:	3001      	adds	r0, #1
 8009dd6:	f43f ae70 	beq.w	8009aba <_printf_float+0xb6>
 8009dda:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009dde:	2200      	movs	r2, #0
 8009de0:	2300      	movs	r3, #0
 8009de2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009de6:	f7f6 fe8f 	bl	8000b08 <__aeabi_dcmpeq>
 8009dea:	b9c0      	cbnz	r0, 8009e1e <_printf_float+0x41a>
 8009dec:	4653      	mov	r3, sl
 8009dee:	f108 0201 	add.w	r2, r8, #1
 8009df2:	4631      	mov	r1, r6
 8009df4:	4628      	mov	r0, r5
 8009df6:	47b8      	blx	r7
 8009df8:	3001      	adds	r0, #1
 8009dfa:	d10c      	bne.n	8009e16 <_printf_float+0x412>
 8009dfc:	e65d      	b.n	8009aba <_printf_float+0xb6>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	465a      	mov	r2, fp
 8009e02:	4631      	mov	r1, r6
 8009e04:	4628      	mov	r0, r5
 8009e06:	47b8      	blx	r7
 8009e08:	3001      	adds	r0, #1
 8009e0a:	f43f ae56 	beq.w	8009aba <_printf_float+0xb6>
 8009e0e:	f108 0801 	add.w	r8, r8, #1
 8009e12:	45d0      	cmp	r8, sl
 8009e14:	dbf3      	blt.n	8009dfe <_printf_float+0x3fa>
 8009e16:	464b      	mov	r3, r9
 8009e18:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009e1c:	e6df      	b.n	8009bde <_printf_float+0x1da>
 8009e1e:	f04f 0800 	mov.w	r8, #0
 8009e22:	f104 0b1a 	add.w	fp, r4, #26
 8009e26:	e7f4      	b.n	8009e12 <_printf_float+0x40e>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	4642      	mov	r2, r8
 8009e2c:	e7e1      	b.n	8009df2 <_printf_float+0x3ee>
 8009e2e:	2301      	movs	r3, #1
 8009e30:	464a      	mov	r2, r9
 8009e32:	4631      	mov	r1, r6
 8009e34:	4628      	mov	r0, r5
 8009e36:	47b8      	blx	r7
 8009e38:	3001      	adds	r0, #1
 8009e3a:	f43f ae3e 	beq.w	8009aba <_printf_float+0xb6>
 8009e3e:	f108 0801 	add.w	r8, r8, #1
 8009e42:	68e3      	ldr	r3, [r4, #12]
 8009e44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009e46:	1a5b      	subs	r3, r3, r1
 8009e48:	4543      	cmp	r3, r8
 8009e4a:	dcf0      	bgt.n	8009e2e <_printf_float+0x42a>
 8009e4c:	e6fc      	b.n	8009c48 <_printf_float+0x244>
 8009e4e:	f04f 0800 	mov.w	r8, #0
 8009e52:	f104 0919 	add.w	r9, r4, #25
 8009e56:	e7f4      	b.n	8009e42 <_printf_float+0x43e>

08009e58 <_printf_common>:
 8009e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e5c:	4616      	mov	r6, r2
 8009e5e:	4698      	mov	r8, r3
 8009e60:	688a      	ldr	r2, [r1, #8]
 8009e62:	690b      	ldr	r3, [r1, #16]
 8009e64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	bfb8      	it	lt
 8009e6c:	4613      	movlt	r3, r2
 8009e6e:	6033      	str	r3, [r6, #0]
 8009e70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009e74:	4607      	mov	r7, r0
 8009e76:	460c      	mov	r4, r1
 8009e78:	b10a      	cbz	r2, 8009e7e <_printf_common+0x26>
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	6033      	str	r3, [r6, #0]
 8009e7e:	6823      	ldr	r3, [r4, #0]
 8009e80:	0699      	lsls	r1, r3, #26
 8009e82:	bf42      	ittt	mi
 8009e84:	6833      	ldrmi	r3, [r6, #0]
 8009e86:	3302      	addmi	r3, #2
 8009e88:	6033      	strmi	r3, [r6, #0]
 8009e8a:	6825      	ldr	r5, [r4, #0]
 8009e8c:	f015 0506 	ands.w	r5, r5, #6
 8009e90:	d106      	bne.n	8009ea0 <_printf_common+0x48>
 8009e92:	f104 0a19 	add.w	sl, r4, #25
 8009e96:	68e3      	ldr	r3, [r4, #12]
 8009e98:	6832      	ldr	r2, [r6, #0]
 8009e9a:	1a9b      	subs	r3, r3, r2
 8009e9c:	42ab      	cmp	r3, r5
 8009e9e:	dc26      	bgt.n	8009eee <_printf_common+0x96>
 8009ea0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009ea4:	6822      	ldr	r2, [r4, #0]
 8009ea6:	3b00      	subs	r3, #0
 8009ea8:	bf18      	it	ne
 8009eaa:	2301      	movne	r3, #1
 8009eac:	0692      	lsls	r2, r2, #26
 8009eae:	d42b      	bmi.n	8009f08 <_printf_common+0xb0>
 8009eb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009eb4:	4641      	mov	r1, r8
 8009eb6:	4638      	mov	r0, r7
 8009eb8:	47c8      	blx	r9
 8009eba:	3001      	adds	r0, #1
 8009ebc:	d01e      	beq.n	8009efc <_printf_common+0xa4>
 8009ebe:	6823      	ldr	r3, [r4, #0]
 8009ec0:	6922      	ldr	r2, [r4, #16]
 8009ec2:	f003 0306 	and.w	r3, r3, #6
 8009ec6:	2b04      	cmp	r3, #4
 8009ec8:	bf02      	ittt	eq
 8009eca:	68e5      	ldreq	r5, [r4, #12]
 8009ecc:	6833      	ldreq	r3, [r6, #0]
 8009ece:	1aed      	subeq	r5, r5, r3
 8009ed0:	68a3      	ldr	r3, [r4, #8]
 8009ed2:	bf0c      	ite	eq
 8009ed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ed8:	2500      	movne	r5, #0
 8009eda:	4293      	cmp	r3, r2
 8009edc:	bfc4      	itt	gt
 8009ede:	1a9b      	subgt	r3, r3, r2
 8009ee0:	18ed      	addgt	r5, r5, r3
 8009ee2:	2600      	movs	r6, #0
 8009ee4:	341a      	adds	r4, #26
 8009ee6:	42b5      	cmp	r5, r6
 8009ee8:	d11a      	bne.n	8009f20 <_printf_common+0xc8>
 8009eea:	2000      	movs	r0, #0
 8009eec:	e008      	b.n	8009f00 <_printf_common+0xa8>
 8009eee:	2301      	movs	r3, #1
 8009ef0:	4652      	mov	r2, sl
 8009ef2:	4641      	mov	r1, r8
 8009ef4:	4638      	mov	r0, r7
 8009ef6:	47c8      	blx	r9
 8009ef8:	3001      	adds	r0, #1
 8009efa:	d103      	bne.n	8009f04 <_printf_common+0xac>
 8009efc:	f04f 30ff 	mov.w	r0, #4294967295
 8009f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f04:	3501      	adds	r5, #1
 8009f06:	e7c6      	b.n	8009e96 <_printf_common+0x3e>
 8009f08:	18e1      	adds	r1, r4, r3
 8009f0a:	1c5a      	adds	r2, r3, #1
 8009f0c:	2030      	movs	r0, #48	@ 0x30
 8009f0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f12:	4422      	add	r2, r4
 8009f14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f1c:	3302      	adds	r3, #2
 8009f1e:	e7c7      	b.n	8009eb0 <_printf_common+0x58>
 8009f20:	2301      	movs	r3, #1
 8009f22:	4622      	mov	r2, r4
 8009f24:	4641      	mov	r1, r8
 8009f26:	4638      	mov	r0, r7
 8009f28:	47c8      	blx	r9
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	d0e6      	beq.n	8009efc <_printf_common+0xa4>
 8009f2e:	3601      	adds	r6, #1
 8009f30:	e7d9      	b.n	8009ee6 <_printf_common+0x8e>
	...

08009f34 <_printf_i>:
 8009f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f38:	7e0f      	ldrb	r7, [r1, #24]
 8009f3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009f3c:	2f78      	cmp	r7, #120	@ 0x78
 8009f3e:	4691      	mov	r9, r2
 8009f40:	4680      	mov	r8, r0
 8009f42:	460c      	mov	r4, r1
 8009f44:	469a      	mov	sl, r3
 8009f46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009f4a:	d807      	bhi.n	8009f5c <_printf_i+0x28>
 8009f4c:	2f62      	cmp	r7, #98	@ 0x62
 8009f4e:	d80a      	bhi.n	8009f66 <_printf_i+0x32>
 8009f50:	2f00      	cmp	r7, #0
 8009f52:	f000 80d2 	beq.w	800a0fa <_printf_i+0x1c6>
 8009f56:	2f58      	cmp	r7, #88	@ 0x58
 8009f58:	f000 80b9 	beq.w	800a0ce <_printf_i+0x19a>
 8009f5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009f64:	e03a      	b.n	8009fdc <_printf_i+0xa8>
 8009f66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009f6a:	2b15      	cmp	r3, #21
 8009f6c:	d8f6      	bhi.n	8009f5c <_printf_i+0x28>
 8009f6e:	a101      	add	r1, pc, #4	@ (adr r1, 8009f74 <_printf_i+0x40>)
 8009f70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f74:	08009fcd 	.word	0x08009fcd
 8009f78:	08009fe1 	.word	0x08009fe1
 8009f7c:	08009f5d 	.word	0x08009f5d
 8009f80:	08009f5d 	.word	0x08009f5d
 8009f84:	08009f5d 	.word	0x08009f5d
 8009f88:	08009f5d 	.word	0x08009f5d
 8009f8c:	08009fe1 	.word	0x08009fe1
 8009f90:	08009f5d 	.word	0x08009f5d
 8009f94:	08009f5d 	.word	0x08009f5d
 8009f98:	08009f5d 	.word	0x08009f5d
 8009f9c:	08009f5d 	.word	0x08009f5d
 8009fa0:	0800a0e1 	.word	0x0800a0e1
 8009fa4:	0800a00b 	.word	0x0800a00b
 8009fa8:	0800a09b 	.word	0x0800a09b
 8009fac:	08009f5d 	.word	0x08009f5d
 8009fb0:	08009f5d 	.word	0x08009f5d
 8009fb4:	0800a103 	.word	0x0800a103
 8009fb8:	08009f5d 	.word	0x08009f5d
 8009fbc:	0800a00b 	.word	0x0800a00b
 8009fc0:	08009f5d 	.word	0x08009f5d
 8009fc4:	08009f5d 	.word	0x08009f5d
 8009fc8:	0800a0a3 	.word	0x0800a0a3
 8009fcc:	6833      	ldr	r3, [r6, #0]
 8009fce:	1d1a      	adds	r2, r3, #4
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	6032      	str	r2, [r6, #0]
 8009fd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009fd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009fdc:	2301      	movs	r3, #1
 8009fde:	e09d      	b.n	800a11c <_printf_i+0x1e8>
 8009fe0:	6833      	ldr	r3, [r6, #0]
 8009fe2:	6820      	ldr	r0, [r4, #0]
 8009fe4:	1d19      	adds	r1, r3, #4
 8009fe6:	6031      	str	r1, [r6, #0]
 8009fe8:	0606      	lsls	r6, r0, #24
 8009fea:	d501      	bpl.n	8009ff0 <_printf_i+0xbc>
 8009fec:	681d      	ldr	r5, [r3, #0]
 8009fee:	e003      	b.n	8009ff8 <_printf_i+0xc4>
 8009ff0:	0645      	lsls	r5, r0, #25
 8009ff2:	d5fb      	bpl.n	8009fec <_printf_i+0xb8>
 8009ff4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009ff8:	2d00      	cmp	r5, #0
 8009ffa:	da03      	bge.n	800a004 <_printf_i+0xd0>
 8009ffc:	232d      	movs	r3, #45	@ 0x2d
 8009ffe:	426d      	negs	r5, r5
 800a000:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a004:	4859      	ldr	r0, [pc, #356]	@ (800a16c <_printf_i+0x238>)
 800a006:	230a      	movs	r3, #10
 800a008:	e011      	b.n	800a02e <_printf_i+0xfa>
 800a00a:	6821      	ldr	r1, [r4, #0]
 800a00c:	6833      	ldr	r3, [r6, #0]
 800a00e:	0608      	lsls	r0, r1, #24
 800a010:	f853 5b04 	ldr.w	r5, [r3], #4
 800a014:	d402      	bmi.n	800a01c <_printf_i+0xe8>
 800a016:	0649      	lsls	r1, r1, #25
 800a018:	bf48      	it	mi
 800a01a:	b2ad      	uxthmi	r5, r5
 800a01c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a01e:	4853      	ldr	r0, [pc, #332]	@ (800a16c <_printf_i+0x238>)
 800a020:	6033      	str	r3, [r6, #0]
 800a022:	bf14      	ite	ne
 800a024:	230a      	movne	r3, #10
 800a026:	2308      	moveq	r3, #8
 800a028:	2100      	movs	r1, #0
 800a02a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a02e:	6866      	ldr	r6, [r4, #4]
 800a030:	60a6      	str	r6, [r4, #8]
 800a032:	2e00      	cmp	r6, #0
 800a034:	bfa2      	ittt	ge
 800a036:	6821      	ldrge	r1, [r4, #0]
 800a038:	f021 0104 	bicge.w	r1, r1, #4
 800a03c:	6021      	strge	r1, [r4, #0]
 800a03e:	b90d      	cbnz	r5, 800a044 <_printf_i+0x110>
 800a040:	2e00      	cmp	r6, #0
 800a042:	d04b      	beq.n	800a0dc <_printf_i+0x1a8>
 800a044:	4616      	mov	r6, r2
 800a046:	fbb5 f1f3 	udiv	r1, r5, r3
 800a04a:	fb03 5711 	mls	r7, r3, r1, r5
 800a04e:	5dc7      	ldrb	r7, [r0, r7]
 800a050:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a054:	462f      	mov	r7, r5
 800a056:	42bb      	cmp	r3, r7
 800a058:	460d      	mov	r5, r1
 800a05a:	d9f4      	bls.n	800a046 <_printf_i+0x112>
 800a05c:	2b08      	cmp	r3, #8
 800a05e:	d10b      	bne.n	800a078 <_printf_i+0x144>
 800a060:	6823      	ldr	r3, [r4, #0]
 800a062:	07df      	lsls	r7, r3, #31
 800a064:	d508      	bpl.n	800a078 <_printf_i+0x144>
 800a066:	6923      	ldr	r3, [r4, #16]
 800a068:	6861      	ldr	r1, [r4, #4]
 800a06a:	4299      	cmp	r1, r3
 800a06c:	bfde      	ittt	le
 800a06e:	2330      	movle	r3, #48	@ 0x30
 800a070:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a074:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a078:	1b92      	subs	r2, r2, r6
 800a07a:	6122      	str	r2, [r4, #16]
 800a07c:	f8cd a000 	str.w	sl, [sp]
 800a080:	464b      	mov	r3, r9
 800a082:	aa03      	add	r2, sp, #12
 800a084:	4621      	mov	r1, r4
 800a086:	4640      	mov	r0, r8
 800a088:	f7ff fee6 	bl	8009e58 <_printf_common>
 800a08c:	3001      	adds	r0, #1
 800a08e:	d14a      	bne.n	800a126 <_printf_i+0x1f2>
 800a090:	f04f 30ff 	mov.w	r0, #4294967295
 800a094:	b004      	add	sp, #16
 800a096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a09a:	6823      	ldr	r3, [r4, #0]
 800a09c:	f043 0320 	orr.w	r3, r3, #32
 800a0a0:	6023      	str	r3, [r4, #0]
 800a0a2:	4833      	ldr	r0, [pc, #204]	@ (800a170 <_printf_i+0x23c>)
 800a0a4:	2778      	movs	r7, #120	@ 0x78
 800a0a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a0aa:	6823      	ldr	r3, [r4, #0]
 800a0ac:	6831      	ldr	r1, [r6, #0]
 800a0ae:	061f      	lsls	r7, r3, #24
 800a0b0:	f851 5b04 	ldr.w	r5, [r1], #4
 800a0b4:	d402      	bmi.n	800a0bc <_printf_i+0x188>
 800a0b6:	065f      	lsls	r7, r3, #25
 800a0b8:	bf48      	it	mi
 800a0ba:	b2ad      	uxthmi	r5, r5
 800a0bc:	6031      	str	r1, [r6, #0]
 800a0be:	07d9      	lsls	r1, r3, #31
 800a0c0:	bf44      	itt	mi
 800a0c2:	f043 0320 	orrmi.w	r3, r3, #32
 800a0c6:	6023      	strmi	r3, [r4, #0]
 800a0c8:	b11d      	cbz	r5, 800a0d2 <_printf_i+0x19e>
 800a0ca:	2310      	movs	r3, #16
 800a0cc:	e7ac      	b.n	800a028 <_printf_i+0xf4>
 800a0ce:	4827      	ldr	r0, [pc, #156]	@ (800a16c <_printf_i+0x238>)
 800a0d0:	e7e9      	b.n	800a0a6 <_printf_i+0x172>
 800a0d2:	6823      	ldr	r3, [r4, #0]
 800a0d4:	f023 0320 	bic.w	r3, r3, #32
 800a0d8:	6023      	str	r3, [r4, #0]
 800a0da:	e7f6      	b.n	800a0ca <_printf_i+0x196>
 800a0dc:	4616      	mov	r6, r2
 800a0de:	e7bd      	b.n	800a05c <_printf_i+0x128>
 800a0e0:	6833      	ldr	r3, [r6, #0]
 800a0e2:	6825      	ldr	r5, [r4, #0]
 800a0e4:	6961      	ldr	r1, [r4, #20]
 800a0e6:	1d18      	adds	r0, r3, #4
 800a0e8:	6030      	str	r0, [r6, #0]
 800a0ea:	062e      	lsls	r6, r5, #24
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	d501      	bpl.n	800a0f4 <_printf_i+0x1c0>
 800a0f0:	6019      	str	r1, [r3, #0]
 800a0f2:	e002      	b.n	800a0fa <_printf_i+0x1c6>
 800a0f4:	0668      	lsls	r0, r5, #25
 800a0f6:	d5fb      	bpl.n	800a0f0 <_printf_i+0x1bc>
 800a0f8:	8019      	strh	r1, [r3, #0]
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	6123      	str	r3, [r4, #16]
 800a0fe:	4616      	mov	r6, r2
 800a100:	e7bc      	b.n	800a07c <_printf_i+0x148>
 800a102:	6833      	ldr	r3, [r6, #0]
 800a104:	1d1a      	adds	r2, r3, #4
 800a106:	6032      	str	r2, [r6, #0]
 800a108:	681e      	ldr	r6, [r3, #0]
 800a10a:	6862      	ldr	r2, [r4, #4]
 800a10c:	2100      	movs	r1, #0
 800a10e:	4630      	mov	r0, r6
 800a110:	f7f6 f87e 	bl	8000210 <memchr>
 800a114:	b108      	cbz	r0, 800a11a <_printf_i+0x1e6>
 800a116:	1b80      	subs	r0, r0, r6
 800a118:	6060      	str	r0, [r4, #4]
 800a11a:	6863      	ldr	r3, [r4, #4]
 800a11c:	6123      	str	r3, [r4, #16]
 800a11e:	2300      	movs	r3, #0
 800a120:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a124:	e7aa      	b.n	800a07c <_printf_i+0x148>
 800a126:	6923      	ldr	r3, [r4, #16]
 800a128:	4632      	mov	r2, r6
 800a12a:	4649      	mov	r1, r9
 800a12c:	4640      	mov	r0, r8
 800a12e:	47d0      	blx	sl
 800a130:	3001      	adds	r0, #1
 800a132:	d0ad      	beq.n	800a090 <_printf_i+0x15c>
 800a134:	6823      	ldr	r3, [r4, #0]
 800a136:	079b      	lsls	r3, r3, #30
 800a138:	d413      	bmi.n	800a162 <_printf_i+0x22e>
 800a13a:	68e0      	ldr	r0, [r4, #12]
 800a13c:	9b03      	ldr	r3, [sp, #12]
 800a13e:	4298      	cmp	r0, r3
 800a140:	bfb8      	it	lt
 800a142:	4618      	movlt	r0, r3
 800a144:	e7a6      	b.n	800a094 <_printf_i+0x160>
 800a146:	2301      	movs	r3, #1
 800a148:	4632      	mov	r2, r6
 800a14a:	4649      	mov	r1, r9
 800a14c:	4640      	mov	r0, r8
 800a14e:	47d0      	blx	sl
 800a150:	3001      	adds	r0, #1
 800a152:	d09d      	beq.n	800a090 <_printf_i+0x15c>
 800a154:	3501      	adds	r5, #1
 800a156:	68e3      	ldr	r3, [r4, #12]
 800a158:	9903      	ldr	r1, [sp, #12]
 800a15a:	1a5b      	subs	r3, r3, r1
 800a15c:	42ab      	cmp	r3, r5
 800a15e:	dcf2      	bgt.n	800a146 <_printf_i+0x212>
 800a160:	e7eb      	b.n	800a13a <_printf_i+0x206>
 800a162:	2500      	movs	r5, #0
 800a164:	f104 0619 	add.w	r6, r4, #25
 800a168:	e7f5      	b.n	800a156 <_printf_i+0x222>
 800a16a:	bf00      	nop
 800a16c:	0800c662 	.word	0x0800c662
 800a170:	0800c673 	.word	0x0800c673

0800a174 <std>:
 800a174:	2300      	movs	r3, #0
 800a176:	b510      	push	{r4, lr}
 800a178:	4604      	mov	r4, r0
 800a17a:	e9c0 3300 	strd	r3, r3, [r0]
 800a17e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a182:	6083      	str	r3, [r0, #8]
 800a184:	8181      	strh	r1, [r0, #12]
 800a186:	6643      	str	r3, [r0, #100]	@ 0x64
 800a188:	81c2      	strh	r2, [r0, #14]
 800a18a:	6183      	str	r3, [r0, #24]
 800a18c:	4619      	mov	r1, r3
 800a18e:	2208      	movs	r2, #8
 800a190:	305c      	adds	r0, #92	@ 0x5c
 800a192:	f000 f914 	bl	800a3be <memset>
 800a196:	4b0d      	ldr	r3, [pc, #52]	@ (800a1cc <std+0x58>)
 800a198:	6263      	str	r3, [r4, #36]	@ 0x24
 800a19a:	4b0d      	ldr	r3, [pc, #52]	@ (800a1d0 <std+0x5c>)
 800a19c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a19e:	4b0d      	ldr	r3, [pc, #52]	@ (800a1d4 <std+0x60>)
 800a1a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a1a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a1d8 <std+0x64>)
 800a1a4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a1a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a1dc <std+0x68>)
 800a1a8:	6224      	str	r4, [r4, #32]
 800a1aa:	429c      	cmp	r4, r3
 800a1ac:	d006      	beq.n	800a1bc <std+0x48>
 800a1ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a1b2:	4294      	cmp	r4, r2
 800a1b4:	d002      	beq.n	800a1bc <std+0x48>
 800a1b6:	33d0      	adds	r3, #208	@ 0xd0
 800a1b8:	429c      	cmp	r4, r3
 800a1ba:	d105      	bne.n	800a1c8 <std+0x54>
 800a1bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1c4:	f000 b9ec 	b.w	800a5a0 <__retarget_lock_init_recursive>
 800a1c8:	bd10      	pop	{r4, pc}
 800a1ca:	bf00      	nop
 800a1cc:	0800a339 	.word	0x0800a339
 800a1d0:	0800a35b 	.word	0x0800a35b
 800a1d4:	0800a393 	.word	0x0800a393
 800a1d8:	0800a3b7 	.word	0x0800a3b7
 800a1dc:	20004d50 	.word	0x20004d50

0800a1e0 <stdio_exit_handler>:
 800a1e0:	4a02      	ldr	r2, [pc, #8]	@ (800a1ec <stdio_exit_handler+0xc>)
 800a1e2:	4903      	ldr	r1, [pc, #12]	@ (800a1f0 <stdio_exit_handler+0x10>)
 800a1e4:	4803      	ldr	r0, [pc, #12]	@ (800a1f4 <stdio_exit_handler+0x14>)
 800a1e6:	f000 b869 	b.w	800a2bc <_fwalk_sglue>
 800a1ea:	bf00      	nop
 800a1ec:	20000010 	.word	0x20000010
 800a1f0:	0800bdb1 	.word	0x0800bdb1
 800a1f4:	20000020 	.word	0x20000020

0800a1f8 <cleanup_stdio>:
 800a1f8:	6841      	ldr	r1, [r0, #4]
 800a1fa:	4b0c      	ldr	r3, [pc, #48]	@ (800a22c <cleanup_stdio+0x34>)
 800a1fc:	4299      	cmp	r1, r3
 800a1fe:	b510      	push	{r4, lr}
 800a200:	4604      	mov	r4, r0
 800a202:	d001      	beq.n	800a208 <cleanup_stdio+0x10>
 800a204:	f001 fdd4 	bl	800bdb0 <_fflush_r>
 800a208:	68a1      	ldr	r1, [r4, #8]
 800a20a:	4b09      	ldr	r3, [pc, #36]	@ (800a230 <cleanup_stdio+0x38>)
 800a20c:	4299      	cmp	r1, r3
 800a20e:	d002      	beq.n	800a216 <cleanup_stdio+0x1e>
 800a210:	4620      	mov	r0, r4
 800a212:	f001 fdcd 	bl	800bdb0 <_fflush_r>
 800a216:	68e1      	ldr	r1, [r4, #12]
 800a218:	4b06      	ldr	r3, [pc, #24]	@ (800a234 <cleanup_stdio+0x3c>)
 800a21a:	4299      	cmp	r1, r3
 800a21c:	d004      	beq.n	800a228 <cleanup_stdio+0x30>
 800a21e:	4620      	mov	r0, r4
 800a220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a224:	f001 bdc4 	b.w	800bdb0 <_fflush_r>
 800a228:	bd10      	pop	{r4, pc}
 800a22a:	bf00      	nop
 800a22c:	20004d50 	.word	0x20004d50
 800a230:	20004db8 	.word	0x20004db8
 800a234:	20004e20 	.word	0x20004e20

0800a238 <global_stdio_init.part.0>:
 800a238:	b510      	push	{r4, lr}
 800a23a:	4b0b      	ldr	r3, [pc, #44]	@ (800a268 <global_stdio_init.part.0+0x30>)
 800a23c:	4c0b      	ldr	r4, [pc, #44]	@ (800a26c <global_stdio_init.part.0+0x34>)
 800a23e:	4a0c      	ldr	r2, [pc, #48]	@ (800a270 <global_stdio_init.part.0+0x38>)
 800a240:	601a      	str	r2, [r3, #0]
 800a242:	4620      	mov	r0, r4
 800a244:	2200      	movs	r2, #0
 800a246:	2104      	movs	r1, #4
 800a248:	f7ff ff94 	bl	800a174 <std>
 800a24c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a250:	2201      	movs	r2, #1
 800a252:	2109      	movs	r1, #9
 800a254:	f7ff ff8e 	bl	800a174 <std>
 800a258:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a25c:	2202      	movs	r2, #2
 800a25e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a262:	2112      	movs	r1, #18
 800a264:	f7ff bf86 	b.w	800a174 <std>
 800a268:	20004e88 	.word	0x20004e88
 800a26c:	20004d50 	.word	0x20004d50
 800a270:	0800a1e1 	.word	0x0800a1e1

0800a274 <__sfp_lock_acquire>:
 800a274:	4801      	ldr	r0, [pc, #4]	@ (800a27c <__sfp_lock_acquire+0x8>)
 800a276:	f000 b994 	b.w	800a5a2 <__retarget_lock_acquire_recursive>
 800a27a:	bf00      	nop
 800a27c:	20004e91 	.word	0x20004e91

0800a280 <__sfp_lock_release>:
 800a280:	4801      	ldr	r0, [pc, #4]	@ (800a288 <__sfp_lock_release+0x8>)
 800a282:	f000 b98f 	b.w	800a5a4 <__retarget_lock_release_recursive>
 800a286:	bf00      	nop
 800a288:	20004e91 	.word	0x20004e91

0800a28c <__sinit>:
 800a28c:	b510      	push	{r4, lr}
 800a28e:	4604      	mov	r4, r0
 800a290:	f7ff fff0 	bl	800a274 <__sfp_lock_acquire>
 800a294:	6a23      	ldr	r3, [r4, #32]
 800a296:	b11b      	cbz	r3, 800a2a0 <__sinit+0x14>
 800a298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a29c:	f7ff bff0 	b.w	800a280 <__sfp_lock_release>
 800a2a0:	4b04      	ldr	r3, [pc, #16]	@ (800a2b4 <__sinit+0x28>)
 800a2a2:	6223      	str	r3, [r4, #32]
 800a2a4:	4b04      	ldr	r3, [pc, #16]	@ (800a2b8 <__sinit+0x2c>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1f5      	bne.n	800a298 <__sinit+0xc>
 800a2ac:	f7ff ffc4 	bl	800a238 <global_stdio_init.part.0>
 800a2b0:	e7f2      	b.n	800a298 <__sinit+0xc>
 800a2b2:	bf00      	nop
 800a2b4:	0800a1f9 	.word	0x0800a1f9
 800a2b8:	20004e88 	.word	0x20004e88

0800a2bc <_fwalk_sglue>:
 800a2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2c0:	4607      	mov	r7, r0
 800a2c2:	4688      	mov	r8, r1
 800a2c4:	4614      	mov	r4, r2
 800a2c6:	2600      	movs	r6, #0
 800a2c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a2cc:	f1b9 0901 	subs.w	r9, r9, #1
 800a2d0:	d505      	bpl.n	800a2de <_fwalk_sglue+0x22>
 800a2d2:	6824      	ldr	r4, [r4, #0]
 800a2d4:	2c00      	cmp	r4, #0
 800a2d6:	d1f7      	bne.n	800a2c8 <_fwalk_sglue+0xc>
 800a2d8:	4630      	mov	r0, r6
 800a2da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2de:	89ab      	ldrh	r3, [r5, #12]
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d907      	bls.n	800a2f4 <_fwalk_sglue+0x38>
 800a2e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	d003      	beq.n	800a2f4 <_fwalk_sglue+0x38>
 800a2ec:	4629      	mov	r1, r5
 800a2ee:	4638      	mov	r0, r7
 800a2f0:	47c0      	blx	r8
 800a2f2:	4306      	orrs	r6, r0
 800a2f4:	3568      	adds	r5, #104	@ 0x68
 800a2f6:	e7e9      	b.n	800a2cc <_fwalk_sglue+0x10>

0800a2f8 <siprintf>:
 800a2f8:	b40e      	push	{r1, r2, r3}
 800a2fa:	b500      	push	{lr}
 800a2fc:	b09c      	sub	sp, #112	@ 0x70
 800a2fe:	ab1d      	add	r3, sp, #116	@ 0x74
 800a300:	9002      	str	r0, [sp, #8]
 800a302:	9006      	str	r0, [sp, #24]
 800a304:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a308:	4809      	ldr	r0, [pc, #36]	@ (800a330 <siprintf+0x38>)
 800a30a:	9107      	str	r1, [sp, #28]
 800a30c:	9104      	str	r1, [sp, #16]
 800a30e:	4909      	ldr	r1, [pc, #36]	@ (800a334 <siprintf+0x3c>)
 800a310:	f853 2b04 	ldr.w	r2, [r3], #4
 800a314:	9105      	str	r1, [sp, #20]
 800a316:	6800      	ldr	r0, [r0, #0]
 800a318:	9301      	str	r3, [sp, #4]
 800a31a:	a902      	add	r1, sp, #8
 800a31c:	f001 fbc8 	bl	800bab0 <_svfiprintf_r>
 800a320:	9b02      	ldr	r3, [sp, #8]
 800a322:	2200      	movs	r2, #0
 800a324:	701a      	strb	r2, [r3, #0]
 800a326:	b01c      	add	sp, #112	@ 0x70
 800a328:	f85d eb04 	ldr.w	lr, [sp], #4
 800a32c:	b003      	add	sp, #12
 800a32e:	4770      	bx	lr
 800a330:	2000001c 	.word	0x2000001c
 800a334:	ffff0208 	.word	0xffff0208

0800a338 <__sread>:
 800a338:	b510      	push	{r4, lr}
 800a33a:	460c      	mov	r4, r1
 800a33c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a340:	f000 f8d0 	bl	800a4e4 <_read_r>
 800a344:	2800      	cmp	r0, #0
 800a346:	bfab      	itete	ge
 800a348:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a34a:	89a3      	ldrhlt	r3, [r4, #12]
 800a34c:	181b      	addge	r3, r3, r0
 800a34e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a352:	bfac      	ite	ge
 800a354:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a356:	81a3      	strhlt	r3, [r4, #12]
 800a358:	bd10      	pop	{r4, pc}

0800a35a <__swrite>:
 800a35a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a35e:	461f      	mov	r7, r3
 800a360:	898b      	ldrh	r3, [r1, #12]
 800a362:	05db      	lsls	r3, r3, #23
 800a364:	4605      	mov	r5, r0
 800a366:	460c      	mov	r4, r1
 800a368:	4616      	mov	r6, r2
 800a36a:	d505      	bpl.n	800a378 <__swrite+0x1e>
 800a36c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a370:	2302      	movs	r3, #2
 800a372:	2200      	movs	r2, #0
 800a374:	f000 f8a4 	bl	800a4c0 <_lseek_r>
 800a378:	89a3      	ldrh	r3, [r4, #12]
 800a37a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a37e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a382:	81a3      	strh	r3, [r4, #12]
 800a384:	4632      	mov	r2, r6
 800a386:	463b      	mov	r3, r7
 800a388:	4628      	mov	r0, r5
 800a38a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a38e:	f000 b8cb 	b.w	800a528 <_write_r>

0800a392 <__sseek>:
 800a392:	b510      	push	{r4, lr}
 800a394:	460c      	mov	r4, r1
 800a396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a39a:	f000 f891 	bl	800a4c0 <_lseek_r>
 800a39e:	1c43      	adds	r3, r0, #1
 800a3a0:	89a3      	ldrh	r3, [r4, #12]
 800a3a2:	bf15      	itete	ne
 800a3a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a3a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a3aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a3ae:	81a3      	strheq	r3, [r4, #12]
 800a3b0:	bf18      	it	ne
 800a3b2:	81a3      	strhne	r3, [r4, #12]
 800a3b4:	bd10      	pop	{r4, pc}

0800a3b6 <__sclose>:
 800a3b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ba:	f000 b81b 	b.w	800a3f4 <_close_r>

0800a3be <memset>:
 800a3be:	4402      	add	r2, r0
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d100      	bne.n	800a3c8 <memset+0xa>
 800a3c6:	4770      	bx	lr
 800a3c8:	f803 1b01 	strb.w	r1, [r3], #1
 800a3cc:	e7f9      	b.n	800a3c2 <memset+0x4>

0800a3ce <strcat>:
 800a3ce:	b510      	push	{r4, lr}
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	7814      	ldrb	r4, [r2, #0]
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	3201      	adds	r2, #1
 800a3d8:	2c00      	cmp	r4, #0
 800a3da:	d1fa      	bne.n	800a3d2 <strcat+0x4>
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3e6:	2a00      	cmp	r2, #0
 800a3e8:	d1f9      	bne.n	800a3de <strcat+0x10>
 800a3ea:	bd10      	pop	{r4, pc}

0800a3ec <_localeconv_r>:
 800a3ec:	4800      	ldr	r0, [pc, #0]	@ (800a3f0 <_localeconv_r+0x4>)
 800a3ee:	4770      	bx	lr
 800a3f0:	2000015c 	.word	0x2000015c

0800a3f4 <_close_r>:
 800a3f4:	b538      	push	{r3, r4, r5, lr}
 800a3f6:	4d06      	ldr	r5, [pc, #24]	@ (800a410 <_close_r+0x1c>)
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	4608      	mov	r0, r1
 800a3fe:	602b      	str	r3, [r5, #0]
 800a400:	f7f7 fec6 	bl	8002190 <_close>
 800a404:	1c43      	adds	r3, r0, #1
 800a406:	d102      	bne.n	800a40e <_close_r+0x1a>
 800a408:	682b      	ldr	r3, [r5, #0]
 800a40a:	b103      	cbz	r3, 800a40e <_close_r+0x1a>
 800a40c:	6023      	str	r3, [r4, #0]
 800a40e:	bd38      	pop	{r3, r4, r5, pc}
 800a410:	20004e8c 	.word	0x20004e8c

0800a414 <_reclaim_reent>:
 800a414:	4b29      	ldr	r3, [pc, #164]	@ (800a4bc <_reclaim_reent+0xa8>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4283      	cmp	r3, r0
 800a41a:	b570      	push	{r4, r5, r6, lr}
 800a41c:	4604      	mov	r4, r0
 800a41e:	d04b      	beq.n	800a4b8 <_reclaim_reent+0xa4>
 800a420:	69c3      	ldr	r3, [r0, #28]
 800a422:	b1ab      	cbz	r3, 800a450 <_reclaim_reent+0x3c>
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	b16b      	cbz	r3, 800a444 <_reclaim_reent+0x30>
 800a428:	2500      	movs	r5, #0
 800a42a:	69e3      	ldr	r3, [r4, #28]
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	5959      	ldr	r1, [r3, r5]
 800a430:	2900      	cmp	r1, #0
 800a432:	d13b      	bne.n	800a4ac <_reclaim_reent+0x98>
 800a434:	3504      	adds	r5, #4
 800a436:	2d80      	cmp	r5, #128	@ 0x80
 800a438:	d1f7      	bne.n	800a42a <_reclaim_reent+0x16>
 800a43a:	69e3      	ldr	r3, [r4, #28]
 800a43c:	4620      	mov	r0, r4
 800a43e:	68d9      	ldr	r1, [r3, #12]
 800a440:	f000 ff0e 	bl	800b260 <_free_r>
 800a444:	69e3      	ldr	r3, [r4, #28]
 800a446:	6819      	ldr	r1, [r3, #0]
 800a448:	b111      	cbz	r1, 800a450 <_reclaim_reent+0x3c>
 800a44a:	4620      	mov	r0, r4
 800a44c:	f000 ff08 	bl	800b260 <_free_r>
 800a450:	6961      	ldr	r1, [r4, #20]
 800a452:	b111      	cbz	r1, 800a45a <_reclaim_reent+0x46>
 800a454:	4620      	mov	r0, r4
 800a456:	f000 ff03 	bl	800b260 <_free_r>
 800a45a:	69e1      	ldr	r1, [r4, #28]
 800a45c:	b111      	cbz	r1, 800a464 <_reclaim_reent+0x50>
 800a45e:	4620      	mov	r0, r4
 800a460:	f000 fefe 	bl	800b260 <_free_r>
 800a464:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a466:	b111      	cbz	r1, 800a46e <_reclaim_reent+0x5a>
 800a468:	4620      	mov	r0, r4
 800a46a:	f000 fef9 	bl	800b260 <_free_r>
 800a46e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a470:	b111      	cbz	r1, 800a478 <_reclaim_reent+0x64>
 800a472:	4620      	mov	r0, r4
 800a474:	f000 fef4 	bl	800b260 <_free_r>
 800a478:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a47a:	b111      	cbz	r1, 800a482 <_reclaim_reent+0x6e>
 800a47c:	4620      	mov	r0, r4
 800a47e:	f000 feef 	bl	800b260 <_free_r>
 800a482:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a484:	b111      	cbz	r1, 800a48c <_reclaim_reent+0x78>
 800a486:	4620      	mov	r0, r4
 800a488:	f000 feea 	bl	800b260 <_free_r>
 800a48c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a48e:	b111      	cbz	r1, 800a496 <_reclaim_reent+0x82>
 800a490:	4620      	mov	r0, r4
 800a492:	f000 fee5 	bl	800b260 <_free_r>
 800a496:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a498:	b111      	cbz	r1, 800a4a0 <_reclaim_reent+0x8c>
 800a49a:	4620      	mov	r0, r4
 800a49c:	f000 fee0 	bl	800b260 <_free_r>
 800a4a0:	6a23      	ldr	r3, [r4, #32]
 800a4a2:	b14b      	cbz	r3, 800a4b8 <_reclaim_reent+0xa4>
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a4aa:	4718      	bx	r3
 800a4ac:	680e      	ldr	r6, [r1, #0]
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	f000 fed6 	bl	800b260 <_free_r>
 800a4b4:	4631      	mov	r1, r6
 800a4b6:	e7bb      	b.n	800a430 <_reclaim_reent+0x1c>
 800a4b8:	bd70      	pop	{r4, r5, r6, pc}
 800a4ba:	bf00      	nop
 800a4bc:	2000001c 	.word	0x2000001c

0800a4c0 <_lseek_r>:
 800a4c0:	b538      	push	{r3, r4, r5, lr}
 800a4c2:	4d07      	ldr	r5, [pc, #28]	@ (800a4e0 <_lseek_r+0x20>)
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	4608      	mov	r0, r1
 800a4c8:	4611      	mov	r1, r2
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	602a      	str	r2, [r5, #0]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	f7f7 fe85 	bl	80021de <_lseek>
 800a4d4:	1c43      	adds	r3, r0, #1
 800a4d6:	d102      	bne.n	800a4de <_lseek_r+0x1e>
 800a4d8:	682b      	ldr	r3, [r5, #0]
 800a4da:	b103      	cbz	r3, 800a4de <_lseek_r+0x1e>
 800a4dc:	6023      	str	r3, [r4, #0]
 800a4de:	bd38      	pop	{r3, r4, r5, pc}
 800a4e0:	20004e8c 	.word	0x20004e8c

0800a4e4 <_read_r>:
 800a4e4:	b538      	push	{r3, r4, r5, lr}
 800a4e6:	4d07      	ldr	r5, [pc, #28]	@ (800a504 <_read_r+0x20>)
 800a4e8:	4604      	mov	r4, r0
 800a4ea:	4608      	mov	r0, r1
 800a4ec:	4611      	mov	r1, r2
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	602a      	str	r2, [r5, #0]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	f7f7 fe13 	bl	800211e <_read>
 800a4f8:	1c43      	adds	r3, r0, #1
 800a4fa:	d102      	bne.n	800a502 <_read_r+0x1e>
 800a4fc:	682b      	ldr	r3, [r5, #0]
 800a4fe:	b103      	cbz	r3, 800a502 <_read_r+0x1e>
 800a500:	6023      	str	r3, [r4, #0]
 800a502:	bd38      	pop	{r3, r4, r5, pc}
 800a504:	20004e8c 	.word	0x20004e8c

0800a508 <_sbrk_r>:
 800a508:	b538      	push	{r3, r4, r5, lr}
 800a50a:	4d06      	ldr	r5, [pc, #24]	@ (800a524 <_sbrk_r+0x1c>)
 800a50c:	2300      	movs	r3, #0
 800a50e:	4604      	mov	r4, r0
 800a510:	4608      	mov	r0, r1
 800a512:	602b      	str	r3, [r5, #0]
 800a514:	f7f7 fe70 	bl	80021f8 <_sbrk>
 800a518:	1c43      	adds	r3, r0, #1
 800a51a:	d102      	bne.n	800a522 <_sbrk_r+0x1a>
 800a51c:	682b      	ldr	r3, [r5, #0]
 800a51e:	b103      	cbz	r3, 800a522 <_sbrk_r+0x1a>
 800a520:	6023      	str	r3, [r4, #0]
 800a522:	bd38      	pop	{r3, r4, r5, pc}
 800a524:	20004e8c 	.word	0x20004e8c

0800a528 <_write_r>:
 800a528:	b538      	push	{r3, r4, r5, lr}
 800a52a:	4d07      	ldr	r5, [pc, #28]	@ (800a548 <_write_r+0x20>)
 800a52c:	4604      	mov	r4, r0
 800a52e:	4608      	mov	r0, r1
 800a530:	4611      	mov	r1, r2
 800a532:	2200      	movs	r2, #0
 800a534:	602a      	str	r2, [r5, #0]
 800a536:	461a      	mov	r2, r3
 800a538:	f7f7 fe0e 	bl	8002158 <_write>
 800a53c:	1c43      	adds	r3, r0, #1
 800a53e:	d102      	bne.n	800a546 <_write_r+0x1e>
 800a540:	682b      	ldr	r3, [r5, #0]
 800a542:	b103      	cbz	r3, 800a546 <_write_r+0x1e>
 800a544:	6023      	str	r3, [r4, #0]
 800a546:	bd38      	pop	{r3, r4, r5, pc}
 800a548:	20004e8c 	.word	0x20004e8c

0800a54c <__errno>:
 800a54c:	4b01      	ldr	r3, [pc, #4]	@ (800a554 <__errno+0x8>)
 800a54e:	6818      	ldr	r0, [r3, #0]
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	2000001c 	.word	0x2000001c

0800a558 <__libc_init_array>:
 800a558:	b570      	push	{r4, r5, r6, lr}
 800a55a:	4d0d      	ldr	r5, [pc, #52]	@ (800a590 <__libc_init_array+0x38>)
 800a55c:	4c0d      	ldr	r4, [pc, #52]	@ (800a594 <__libc_init_array+0x3c>)
 800a55e:	1b64      	subs	r4, r4, r5
 800a560:	10a4      	asrs	r4, r4, #2
 800a562:	2600      	movs	r6, #0
 800a564:	42a6      	cmp	r6, r4
 800a566:	d109      	bne.n	800a57c <__libc_init_array+0x24>
 800a568:	4d0b      	ldr	r5, [pc, #44]	@ (800a598 <__libc_init_array+0x40>)
 800a56a:	4c0c      	ldr	r4, [pc, #48]	@ (800a59c <__libc_init_array+0x44>)
 800a56c:	f001 ffa0 	bl	800c4b0 <_init>
 800a570:	1b64      	subs	r4, r4, r5
 800a572:	10a4      	asrs	r4, r4, #2
 800a574:	2600      	movs	r6, #0
 800a576:	42a6      	cmp	r6, r4
 800a578:	d105      	bne.n	800a586 <__libc_init_array+0x2e>
 800a57a:	bd70      	pop	{r4, r5, r6, pc}
 800a57c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a580:	4798      	blx	r3
 800a582:	3601      	adds	r6, #1
 800a584:	e7ee      	b.n	800a564 <__libc_init_array+0xc>
 800a586:	f855 3b04 	ldr.w	r3, [r5], #4
 800a58a:	4798      	blx	r3
 800a58c:	3601      	adds	r6, #1
 800a58e:	e7f2      	b.n	800a576 <__libc_init_array+0x1e>
 800a590:	0800c9c8 	.word	0x0800c9c8
 800a594:	0800c9c8 	.word	0x0800c9c8
 800a598:	0800c9c8 	.word	0x0800c9c8
 800a59c:	0800c9cc 	.word	0x0800c9cc

0800a5a0 <__retarget_lock_init_recursive>:
 800a5a0:	4770      	bx	lr

0800a5a2 <__retarget_lock_acquire_recursive>:
 800a5a2:	4770      	bx	lr

0800a5a4 <__retarget_lock_release_recursive>:
 800a5a4:	4770      	bx	lr

0800a5a6 <memcpy>:
 800a5a6:	440a      	add	r2, r1
 800a5a8:	4291      	cmp	r1, r2
 800a5aa:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5ae:	d100      	bne.n	800a5b2 <memcpy+0xc>
 800a5b0:	4770      	bx	lr
 800a5b2:	b510      	push	{r4, lr}
 800a5b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5bc:	4291      	cmp	r1, r2
 800a5be:	d1f9      	bne.n	800a5b4 <memcpy+0xe>
 800a5c0:	bd10      	pop	{r4, pc}

0800a5c2 <quorem>:
 800a5c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c6:	6903      	ldr	r3, [r0, #16]
 800a5c8:	690c      	ldr	r4, [r1, #16]
 800a5ca:	42a3      	cmp	r3, r4
 800a5cc:	4607      	mov	r7, r0
 800a5ce:	db7e      	blt.n	800a6ce <quorem+0x10c>
 800a5d0:	3c01      	subs	r4, #1
 800a5d2:	f101 0814 	add.w	r8, r1, #20
 800a5d6:	00a3      	lsls	r3, r4, #2
 800a5d8:	f100 0514 	add.w	r5, r0, #20
 800a5dc:	9300      	str	r3, [sp, #0]
 800a5de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5e2:	9301      	str	r3, [sp, #4]
 800a5e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a5e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a5f4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5f8:	d32e      	bcc.n	800a658 <quorem+0x96>
 800a5fa:	f04f 0a00 	mov.w	sl, #0
 800a5fe:	46c4      	mov	ip, r8
 800a600:	46ae      	mov	lr, r5
 800a602:	46d3      	mov	fp, sl
 800a604:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a608:	b298      	uxth	r0, r3
 800a60a:	fb06 a000 	mla	r0, r6, r0, sl
 800a60e:	0c02      	lsrs	r2, r0, #16
 800a610:	0c1b      	lsrs	r3, r3, #16
 800a612:	fb06 2303 	mla	r3, r6, r3, r2
 800a616:	f8de 2000 	ldr.w	r2, [lr]
 800a61a:	b280      	uxth	r0, r0
 800a61c:	b292      	uxth	r2, r2
 800a61e:	1a12      	subs	r2, r2, r0
 800a620:	445a      	add	r2, fp
 800a622:	f8de 0000 	ldr.w	r0, [lr]
 800a626:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a630:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a634:	b292      	uxth	r2, r2
 800a636:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a63a:	45e1      	cmp	r9, ip
 800a63c:	f84e 2b04 	str.w	r2, [lr], #4
 800a640:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a644:	d2de      	bcs.n	800a604 <quorem+0x42>
 800a646:	9b00      	ldr	r3, [sp, #0]
 800a648:	58eb      	ldr	r3, [r5, r3]
 800a64a:	b92b      	cbnz	r3, 800a658 <quorem+0x96>
 800a64c:	9b01      	ldr	r3, [sp, #4]
 800a64e:	3b04      	subs	r3, #4
 800a650:	429d      	cmp	r5, r3
 800a652:	461a      	mov	r2, r3
 800a654:	d32f      	bcc.n	800a6b6 <quorem+0xf4>
 800a656:	613c      	str	r4, [r7, #16]
 800a658:	4638      	mov	r0, r7
 800a65a:	f001 f8c5 	bl	800b7e8 <__mcmp>
 800a65e:	2800      	cmp	r0, #0
 800a660:	db25      	blt.n	800a6ae <quorem+0xec>
 800a662:	4629      	mov	r1, r5
 800a664:	2000      	movs	r0, #0
 800a666:	f858 2b04 	ldr.w	r2, [r8], #4
 800a66a:	f8d1 c000 	ldr.w	ip, [r1]
 800a66e:	fa1f fe82 	uxth.w	lr, r2
 800a672:	fa1f f38c 	uxth.w	r3, ip
 800a676:	eba3 030e 	sub.w	r3, r3, lr
 800a67a:	4403      	add	r3, r0
 800a67c:	0c12      	lsrs	r2, r2, #16
 800a67e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a682:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a686:	b29b      	uxth	r3, r3
 800a688:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a68c:	45c1      	cmp	r9, r8
 800a68e:	f841 3b04 	str.w	r3, [r1], #4
 800a692:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a696:	d2e6      	bcs.n	800a666 <quorem+0xa4>
 800a698:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a69c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6a0:	b922      	cbnz	r2, 800a6ac <quorem+0xea>
 800a6a2:	3b04      	subs	r3, #4
 800a6a4:	429d      	cmp	r5, r3
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	d30b      	bcc.n	800a6c2 <quorem+0x100>
 800a6aa:	613c      	str	r4, [r7, #16]
 800a6ac:	3601      	adds	r6, #1
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	b003      	add	sp, #12
 800a6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b6:	6812      	ldr	r2, [r2, #0]
 800a6b8:	3b04      	subs	r3, #4
 800a6ba:	2a00      	cmp	r2, #0
 800a6bc:	d1cb      	bne.n	800a656 <quorem+0x94>
 800a6be:	3c01      	subs	r4, #1
 800a6c0:	e7c6      	b.n	800a650 <quorem+0x8e>
 800a6c2:	6812      	ldr	r2, [r2, #0]
 800a6c4:	3b04      	subs	r3, #4
 800a6c6:	2a00      	cmp	r2, #0
 800a6c8:	d1ef      	bne.n	800a6aa <quorem+0xe8>
 800a6ca:	3c01      	subs	r4, #1
 800a6cc:	e7ea      	b.n	800a6a4 <quorem+0xe2>
 800a6ce:	2000      	movs	r0, #0
 800a6d0:	e7ee      	b.n	800a6b0 <quorem+0xee>
 800a6d2:	0000      	movs	r0, r0
 800a6d4:	0000      	movs	r0, r0
	...

0800a6d8 <_dtoa_r>:
 800a6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6dc:	69c7      	ldr	r7, [r0, #28]
 800a6de:	b099      	sub	sp, #100	@ 0x64
 800a6e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a6e4:	ec55 4b10 	vmov	r4, r5, d0
 800a6e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a6ea:	9109      	str	r1, [sp, #36]	@ 0x24
 800a6ec:	4683      	mov	fp, r0
 800a6ee:	920e      	str	r2, [sp, #56]	@ 0x38
 800a6f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a6f2:	b97f      	cbnz	r7, 800a714 <_dtoa_r+0x3c>
 800a6f4:	2010      	movs	r0, #16
 800a6f6:	f7ff f82f 	bl	8009758 <malloc>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	f8cb 001c 	str.w	r0, [fp, #28]
 800a700:	b920      	cbnz	r0, 800a70c <_dtoa_r+0x34>
 800a702:	4ba7      	ldr	r3, [pc, #668]	@ (800a9a0 <_dtoa_r+0x2c8>)
 800a704:	21ef      	movs	r1, #239	@ 0xef
 800a706:	48a7      	ldr	r0, [pc, #668]	@ (800a9a4 <_dtoa_r+0x2cc>)
 800a708:	f001 fb94 	bl	800be34 <__assert_func>
 800a70c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a710:	6007      	str	r7, [r0, #0]
 800a712:	60c7      	str	r7, [r0, #12]
 800a714:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a718:	6819      	ldr	r1, [r3, #0]
 800a71a:	b159      	cbz	r1, 800a734 <_dtoa_r+0x5c>
 800a71c:	685a      	ldr	r2, [r3, #4]
 800a71e:	604a      	str	r2, [r1, #4]
 800a720:	2301      	movs	r3, #1
 800a722:	4093      	lsls	r3, r2
 800a724:	608b      	str	r3, [r1, #8]
 800a726:	4658      	mov	r0, fp
 800a728:	f000 fe24 	bl	800b374 <_Bfree>
 800a72c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a730:	2200      	movs	r2, #0
 800a732:	601a      	str	r2, [r3, #0]
 800a734:	1e2b      	subs	r3, r5, #0
 800a736:	bfb9      	ittee	lt
 800a738:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a73c:	9303      	strlt	r3, [sp, #12]
 800a73e:	2300      	movge	r3, #0
 800a740:	6033      	strge	r3, [r6, #0]
 800a742:	9f03      	ldr	r7, [sp, #12]
 800a744:	4b98      	ldr	r3, [pc, #608]	@ (800a9a8 <_dtoa_r+0x2d0>)
 800a746:	bfbc      	itt	lt
 800a748:	2201      	movlt	r2, #1
 800a74a:	6032      	strlt	r2, [r6, #0]
 800a74c:	43bb      	bics	r3, r7
 800a74e:	d112      	bne.n	800a776 <_dtoa_r+0x9e>
 800a750:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a752:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a756:	6013      	str	r3, [r2, #0]
 800a758:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a75c:	4323      	orrs	r3, r4
 800a75e:	f000 854d 	beq.w	800b1fc <_dtoa_r+0xb24>
 800a762:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a764:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a9bc <_dtoa_r+0x2e4>
 800a768:	2b00      	cmp	r3, #0
 800a76a:	f000 854f 	beq.w	800b20c <_dtoa_r+0xb34>
 800a76e:	f10a 0303 	add.w	r3, sl, #3
 800a772:	f000 bd49 	b.w	800b208 <_dtoa_r+0xb30>
 800a776:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a77a:	2200      	movs	r2, #0
 800a77c:	ec51 0b17 	vmov	r0, r1, d7
 800a780:	2300      	movs	r3, #0
 800a782:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a786:	f7f6 f9bf 	bl	8000b08 <__aeabi_dcmpeq>
 800a78a:	4680      	mov	r8, r0
 800a78c:	b158      	cbz	r0, 800a7a6 <_dtoa_r+0xce>
 800a78e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a790:	2301      	movs	r3, #1
 800a792:	6013      	str	r3, [r2, #0]
 800a794:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a796:	b113      	cbz	r3, 800a79e <_dtoa_r+0xc6>
 800a798:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a79a:	4b84      	ldr	r3, [pc, #528]	@ (800a9ac <_dtoa_r+0x2d4>)
 800a79c:	6013      	str	r3, [r2, #0]
 800a79e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a9c0 <_dtoa_r+0x2e8>
 800a7a2:	f000 bd33 	b.w	800b20c <_dtoa_r+0xb34>
 800a7a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a7aa:	aa16      	add	r2, sp, #88	@ 0x58
 800a7ac:	a917      	add	r1, sp, #92	@ 0x5c
 800a7ae:	4658      	mov	r0, fp
 800a7b0:	f001 f8ca 	bl	800b948 <__d2b>
 800a7b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a7b8:	4681      	mov	r9, r0
 800a7ba:	2e00      	cmp	r6, #0
 800a7bc:	d077      	beq.n	800a8ae <_dtoa_r+0x1d6>
 800a7be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a7c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a7cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a7d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a7d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a7d8:	4619      	mov	r1, r3
 800a7da:	2200      	movs	r2, #0
 800a7dc:	4b74      	ldr	r3, [pc, #464]	@ (800a9b0 <_dtoa_r+0x2d8>)
 800a7de:	f7f5 fd73 	bl	80002c8 <__aeabi_dsub>
 800a7e2:	a369      	add	r3, pc, #420	@ (adr r3, 800a988 <_dtoa_r+0x2b0>)
 800a7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e8:	f7f5 ff26 	bl	8000638 <__aeabi_dmul>
 800a7ec:	a368      	add	r3, pc, #416	@ (adr r3, 800a990 <_dtoa_r+0x2b8>)
 800a7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f2:	f7f5 fd6b 	bl	80002cc <__adddf3>
 800a7f6:	4604      	mov	r4, r0
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	460d      	mov	r5, r1
 800a7fc:	f7f5 feb2 	bl	8000564 <__aeabi_i2d>
 800a800:	a365      	add	r3, pc, #404	@ (adr r3, 800a998 <_dtoa_r+0x2c0>)
 800a802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a806:	f7f5 ff17 	bl	8000638 <__aeabi_dmul>
 800a80a:	4602      	mov	r2, r0
 800a80c:	460b      	mov	r3, r1
 800a80e:	4620      	mov	r0, r4
 800a810:	4629      	mov	r1, r5
 800a812:	f7f5 fd5b 	bl	80002cc <__adddf3>
 800a816:	4604      	mov	r4, r0
 800a818:	460d      	mov	r5, r1
 800a81a:	f7f6 f9bd 	bl	8000b98 <__aeabi_d2iz>
 800a81e:	2200      	movs	r2, #0
 800a820:	4607      	mov	r7, r0
 800a822:	2300      	movs	r3, #0
 800a824:	4620      	mov	r0, r4
 800a826:	4629      	mov	r1, r5
 800a828:	f7f6 f978 	bl	8000b1c <__aeabi_dcmplt>
 800a82c:	b140      	cbz	r0, 800a840 <_dtoa_r+0x168>
 800a82e:	4638      	mov	r0, r7
 800a830:	f7f5 fe98 	bl	8000564 <__aeabi_i2d>
 800a834:	4622      	mov	r2, r4
 800a836:	462b      	mov	r3, r5
 800a838:	f7f6 f966 	bl	8000b08 <__aeabi_dcmpeq>
 800a83c:	b900      	cbnz	r0, 800a840 <_dtoa_r+0x168>
 800a83e:	3f01      	subs	r7, #1
 800a840:	2f16      	cmp	r7, #22
 800a842:	d851      	bhi.n	800a8e8 <_dtoa_r+0x210>
 800a844:	4b5b      	ldr	r3, [pc, #364]	@ (800a9b4 <_dtoa_r+0x2dc>)
 800a846:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a852:	f7f6 f963 	bl	8000b1c <__aeabi_dcmplt>
 800a856:	2800      	cmp	r0, #0
 800a858:	d048      	beq.n	800a8ec <_dtoa_r+0x214>
 800a85a:	3f01      	subs	r7, #1
 800a85c:	2300      	movs	r3, #0
 800a85e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a860:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a862:	1b9b      	subs	r3, r3, r6
 800a864:	1e5a      	subs	r2, r3, #1
 800a866:	bf44      	itt	mi
 800a868:	f1c3 0801 	rsbmi	r8, r3, #1
 800a86c:	2300      	movmi	r3, #0
 800a86e:	9208      	str	r2, [sp, #32]
 800a870:	bf54      	ite	pl
 800a872:	f04f 0800 	movpl.w	r8, #0
 800a876:	9308      	strmi	r3, [sp, #32]
 800a878:	2f00      	cmp	r7, #0
 800a87a:	db39      	blt.n	800a8f0 <_dtoa_r+0x218>
 800a87c:	9b08      	ldr	r3, [sp, #32]
 800a87e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a880:	443b      	add	r3, r7
 800a882:	9308      	str	r3, [sp, #32]
 800a884:	2300      	movs	r3, #0
 800a886:	930a      	str	r3, [sp, #40]	@ 0x28
 800a888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a88a:	2b09      	cmp	r3, #9
 800a88c:	d864      	bhi.n	800a958 <_dtoa_r+0x280>
 800a88e:	2b05      	cmp	r3, #5
 800a890:	bfc4      	itt	gt
 800a892:	3b04      	subgt	r3, #4
 800a894:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a898:	f1a3 0302 	sub.w	r3, r3, #2
 800a89c:	bfcc      	ite	gt
 800a89e:	2400      	movgt	r4, #0
 800a8a0:	2401      	movle	r4, #1
 800a8a2:	2b03      	cmp	r3, #3
 800a8a4:	d863      	bhi.n	800a96e <_dtoa_r+0x296>
 800a8a6:	e8df f003 	tbb	[pc, r3]
 800a8aa:	372a      	.short	0x372a
 800a8ac:	5535      	.short	0x5535
 800a8ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a8b2:	441e      	add	r6, r3
 800a8b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a8b8:	2b20      	cmp	r3, #32
 800a8ba:	bfc1      	itttt	gt
 800a8bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a8c0:	409f      	lslgt	r7, r3
 800a8c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a8c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a8ca:	bfd6      	itet	le
 800a8cc:	f1c3 0320 	rsble	r3, r3, #32
 800a8d0:	ea47 0003 	orrgt.w	r0, r7, r3
 800a8d4:	fa04 f003 	lslle.w	r0, r4, r3
 800a8d8:	f7f5 fe34 	bl	8000544 <__aeabi_ui2d>
 800a8dc:	2201      	movs	r2, #1
 800a8de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a8e2:	3e01      	subs	r6, #1
 800a8e4:	9214      	str	r2, [sp, #80]	@ 0x50
 800a8e6:	e777      	b.n	800a7d8 <_dtoa_r+0x100>
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e7b8      	b.n	800a85e <_dtoa_r+0x186>
 800a8ec:	9012      	str	r0, [sp, #72]	@ 0x48
 800a8ee:	e7b7      	b.n	800a860 <_dtoa_r+0x188>
 800a8f0:	427b      	negs	r3, r7
 800a8f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	eba8 0807 	sub.w	r8, r8, r7
 800a8fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a8fc:	e7c4      	b.n	800a888 <_dtoa_r+0x1b0>
 800a8fe:	2300      	movs	r3, #0
 800a900:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a902:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a904:	2b00      	cmp	r3, #0
 800a906:	dc35      	bgt.n	800a974 <_dtoa_r+0x29c>
 800a908:	2301      	movs	r3, #1
 800a90a:	9300      	str	r3, [sp, #0]
 800a90c:	9307      	str	r3, [sp, #28]
 800a90e:	461a      	mov	r2, r3
 800a910:	920e      	str	r2, [sp, #56]	@ 0x38
 800a912:	e00b      	b.n	800a92c <_dtoa_r+0x254>
 800a914:	2301      	movs	r3, #1
 800a916:	e7f3      	b.n	800a900 <_dtoa_r+0x228>
 800a918:	2300      	movs	r3, #0
 800a91a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a91c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a91e:	18fb      	adds	r3, r7, r3
 800a920:	9300      	str	r3, [sp, #0]
 800a922:	3301      	adds	r3, #1
 800a924:	2b01      	cmp	r3, #1
 800a926:	9307      	str	r3, [sp, #28]
 800a928:	bfb8      	it	lt
 800a92a:	2301      	movlt	r3, #1
 800a92c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a930:	2100      	movs	r1, #0
 800a932:	2204      	movs	r2, #4
 800a934:	f102 0514 	add.w	r5, r2, #20
 800a938:	429d      	cmp	r5, r3
 800a93a:	d91f      	bls.n	800a97c <_dtoa_r+0x2a4>
 800a93c:	6041      	str	r1, [r0, #4]
 800a93e:	4658      	mov	r0, fp
 800a940:	f000 fcd8 	bl	800b2f4 <_Balloc>
 800a944:	4682      	mov	sl, r0
 800a946:	2800      	cmp	r0, #0
 800a948:	d13c      	bne.n	800a9c4 <_dtoa_r+0x2ec>
 800a94a:	4b1b      	ldr	r3, [pc, #108]	@ (800a9b8 <_dtoa_r+0x2e0>)
 800a94c:	4602      	mov	r2, r0
 800a94e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a952:	e6d8      	b.n	800a706 <_dtoa_r+0x2e>
 800a954:	2301      	movs	r3, #1
 800a956:	e7e0      	b.n	800a91a <_dtoa_r+0x242>
 800a958:	2401      	movs	r4, #1
 800a95a:	2300      	movs	r3, #0
 800a95c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a95e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a960:	f04f 33ff 	mov.w	r3, #4294967295
 800a964:	9300      	str	r3, [sp, #0]
 800a966:	9307      	str	r3, [sp, #28]
 800a968:	2200      	movs	r2, #0
 800a96a:	2312      	movs	r3, #18
 800a96c:	e7d0      	b.n	800a910 <_dtoa_r+0x238>
 800a96e:	2301      	movs	r3, #1
 800a970:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a972:	e7f5      	b.n	800a960 <_dtoa_r+0x288>
 800a974:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a976:	9300      	str	r3, [sp, #0]
 800a978:	9307      	str	r3, [sp, #28]
 800a97a:	e7d7      	b.n	800a92c <_dtoa_r+0x254>
 800a97c:	3101      	adds	r1, #1
 800a97e:	0052      	lsls	r2, r2, #1
 800a980:	e7d8      	b.n	800a934 <_dtoa_r+0x25c>
 800a982:	bf00      	nop
 800a984:	f3af 8000 	nop.w
 800a988:	636f4361 	.word	0x636f4361
 800a98c:	3fd287a7 	.word	0x3fd287a7
 800a990:	8b60c8b3 	.word	0x8b60c8b3
 800a994:	3fc68a28 	.word	0x3fc68a28
 800a998:	509f79fb 	.word	0x509f79fb
 800a99c:	3fd34413 	.word	0x3fd34413
 800a9a0:	0800c691 	.word	0x0800c691
 800a9a4:	0800c6a8 	.word	0x0800c6a8
 800a9a8:	7ff00000 	.word	0x7ff00000
 800a9ac:	0800c661 	.word	0x0800c661
 800a9b0:	3ff80000 	.word	0x3ff80000
 800a9b4:	0800c7a0 	.word	0x0800c7a0
 800a9b8:	0800c700 	.word	0x0800c700
 800a9bc:	0800c68d 	.word	0x0800c68d
 800a9c0:	0800c660 	.word	0x0800c660
 800a9c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a9c8:	6018      	str	r0, [r3, #0]
 800a9ca:	9b07      	ldr	r3, [sp, #28]
 800a9cc:	2b0e      	cmp	r3, #14
 800a9ce:	f200 80a4 	bhi.w	800ab1a <_dtoa_r+0x442>
 800a9d2:	2c00      	cmp	r4, #0
 800a9d4:	f000 80a1 	beq.w	800ab1a <_dtoa_r+0x442>
 800a9d8:	2f00      	cmp	r7, #0
 800a9da:	dd33      	ble.n	800aa44 <_dtoa_r+0x36c>
 800a9dc:	4bad      	ldr	r3, [pc, #692]	@ (800ac94 <_dtoa_r+0x5bc>)
 800a9de:	f007 020f 	and.w	r2, r7, #15
 800a9e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9e6:	ed93 7b00 	vldr	d7, [r3]
 800a9ea:	05f8      	lsls	r0, r7, #23
 800a9ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a9f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a9f4:	d516      	bpl.n	800aa24 <_dtoa_r+0x34c>
 800a9f6:	4ba8      	ldr	r3, [pc, #672]	@ (800ac98 <_dtoa_r+0x5c0>)
 800a9f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa00:	f7f5 ff44 	bl	800088c <__aeabi_ddiv>
 800aa04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa08:	f004 040f 	and.w	r4, r4, #15
 800aa0c:	2603      	movs	r6, #3
 800aa0e:	4da2      	ldr	r5, [pc, #648]	@ (800ac98 <_dtoa_r+0x5c0>)
 800aa10:	b954      	cbnz	r4, 800aa28 <_dtoa_r+0x350>
 800aa12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa1a:	f7f5 ff37 	bl	800088c <__aeabi_ddiv>
 800aa1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa22:	e028      	b.n	800aa76 <_dtoa_r+0x39e>
 800aa24:	2602      	movs	r6, #2
 800aa26:	e7f2      	b.n	800aa0e <_dtoa_r+0x336>
 800aa28:	07e1      	lsls	r1, r4, #31
 800aa2a:	d508      	bpl.n	800aa3e <_dtoa_r+0x366>
 800aa2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa30:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aa34:	f7f5 fe00 	bl	8000638 <__aeabi_dmul>
 800aa38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa3c:	3601      	adds	r6, #1
 800aa3e:	1064      	asrs	r4, r4, #1
 800aa40:	3508      	adds	r5, #8
 800aa42:	e7e5      	b.n	800aa10 <_dtoa_r+0x338>
 800aa44:	f000 80d2 	beq.w	800abec <_dtoa_r+0x514>
 800aa48:	427c      	negs	r4, r7
 800aa4a:	4b92      	ldr	r3, [pc, #584]	@ (800ac94 <_dtoa_r+0x5bc>)
 800aa4c:	4d92      	ldr	r5, [pc, #584]	@ (800ac98 <_dtoa_r+0x5c0>)
 800aa4e:	f004 020f 	and.w	r2, r4, #15
 800aa52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa5e:	f7f5 fdeb 	bl	8000638 <__aeabi_dmul>
 800aa62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa66:	1124      	asrs	r4, r4, #4
 800aa68:	2300      	movs	r3, #0
 800aa6a:	2602      	movs	r6, #2
 800aa6c:	2c00      	cmp	r4, #0
 800aa6e:	f040 80b2 	bne.w	800abd6 <_dtoa_r+0x4fe>
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d1d3      	bne.n	800aa1e <_dtoa_r+0x346>
 800aa76:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aa78:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f000 80b7 	beq.w	800abf0 <_dtoa_r+0x518>
 800aa82:	4b86      	ldr	r3, [pc, #536]	@ (800ac9c <_dtoa_r+0x5c4>)
 800aa84:	2200      	movs	r2, #0
 800aa86:	4620      	mov	r0, r4
 800aa88:	4629      	mov	r1, r5
 800aa8a:	f7f6 f847 	bl	8000b1c <__aeabi_dcmplt>
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	f000 80ae 	beq.w	800abf0 <_dtoa_r+0x518>
 800aa94:	9b07      	ldr	r3, [sp, #28]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	f000 80aa 	beq.w	800abf0 <_dtoa_r+0x518>
 800aa9c:	9b00      	ldr	r3, [sp, #0]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	dd37      	ble.n	800ab12 <_dtoa_r+0x43a>
 800aaa2:	1e7b      	subs	r3, r7, #1
 800aaa4:	9304      	str	r3, [sp, #16]
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	4b7d      	ldr	r3, [pc, #500]	@ (800aca0 <_dtoa_r+0x5c8>)
 800aaaa:	2200      	movs	r2, #0
 800aaac:	4629      	mov	r1, r5
 800aaae:	f7f5 fdc3 	bl	8000638 <__aeabi_dmul>
 800aab2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aab6:	9c00      	ldr	r4, [sp, #0]
 800aab8:	3601      	adds	r6, #1
 800aaba:	4630      	mov	r0, r6
 800aabc:	f7f5 fd52 	bl	8000564 <__aeabi_i2d>
 800aac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aac4:	f7f5 fdb8 	bl	8000638 <__aeabi_dmul>
 800aac8:	4b76      	ldr	r3, [pc, #472]	@ (800aca4 <_dtoa_r+0x5cc>)
 800aaca:	2200      	movs	r2, #0
 800aacc:	f7f5 fbfe 	bl	80002cc <__adddf3>
 800aad0:	4605      	mov	r5, r0
 800aad2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800aad6:	2c00      	cmp	r4, #0
 800aad8:	f040 808d 	bne.w	800abf6 <_dtoa_r+0x51e>
 800aadc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aae0:	4b71      	ldr	r3, [pc, #452]	@ (800aca8 <_dtoa_r+0x5d0>)
 800aae2:	2200      	movs	r2, #0
 800aae4:	f7f5 fbf0 	bl	80002c8 <__aeabi_dsub>
 800aae8:	4602      	mov	r2, r0
 800aaea:	460b      	mov	r3, r1
 800aaec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aaf0:	462a      	mov	r2, r5
 800aaf2:	4633      	mov	r3, r6
 800aaf4:	f7f6 f830 	bl	8000b58 <__aeabi_dcmpgt>
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	f040 828b 	bne.w	800b014 <_dtoa_r+0x93c>
 800aafe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab02:	462a      	mov	r2, r5
 800ab04:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ab08:	f7f6 f808 	bl	8000b1c <__aeabi_dcmplt>
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	f040 8128 	bne.w	800ad62 <_dtoa_r+0x68a>
 800ab12:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ab16:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ab1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	f2c0 815a 	blt.w	800add6 <_dtoa_r+0x6fe>
 800ab22:	2f0e      	cmp	r7, #14
 800ab24:	f300 8157 	bgt.w	800add6 <_dtoa_r+0x6fe>
 800ab28:	4b5a      	ldr	r3, [pc, #360]	@ (800ac94 <_dtoa_r+0x5bc>)
 800ab2a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab2e:	ed93 7b00 	vldr	d7, [r3]
 800ab32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	ed8d 7b00 	vstr	d7, [sp]
 800ab3a:	da03      	bge.n	800ab44 <_dtoa_r+0x46c>
 800ab3c:	9b07      	ldr	r3, [sp, #28]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f340 8101 	ble.w	800ad46 <_dtoa_r+0x66e>
 800ab44:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ab48:	4656      	mov	r6, sl
 800ab4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab4e:	4620      	mov	r0, r4
 800ab50:	4629      	mov	r1, r5
 800ab52:	f7f5 fe9b 	bl	800088c <__aeabi_ddiv>
 800ab56:	f7f6 f81f 	bl	8000b98 <__aeabi_d2iz>
 800ab5a:	4680      	mov	r8, r0
 800ab5c:	f7f5 fd02 	bl	8000564 <__aeabi_i2d>
 800ab60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab64:	f7f5 fd68 	bl	8000638 <__aeabi_dmul>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	4629      	mov	r1, r5
 800ab70:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ab74:	f7f5 fba8 	bl	80002c8 <__aeabi_dsub>
 800ab78:	f806 4b01 	strb.w	r4, [r6], #1
 800ab7c:	9d07      	ldr	r5, [sp, #28]
 800ab7e:	eba6 040a 	sub.w	r4, r6, sl
 800ab82:	42a5      	cmp	r5, r4
 800ab84:	4602      	mov	r2, r0
 800ab86:	460b      	mov	r3, r1
 800ab88:	f040 8117 	bne.w	800adba <_dtoa_r+0x6e2>
 800ab8c:	f7f5 fb9e 	bl	80002cc <__adddf3>
 800ab90:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab94:	4604      	mov	r4, r0
 800ab96:	460d      	mov	r5, r1
 800ab98:	f7f5 ffde 	bl	8000b58 <__aeabi_dcmpgt>
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	f040 80f9 	bne.w	800ad94 <_dtoa_r+0x6bc>
 800aba2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aba6:	4620      	mov	r0, r4
 800aba8:	4629      	mov	r1, r5
 800abaa:	f7f5 ffad 	bl	8000b08 <__aeabi_dcmpeq>
 800abae:	b118      	cbz	r0, 800abb8 <_dtoa_r+0x4e0>
 800abb0:	f018 0f01 	tst.w	r8, #1
 800abb4:	f040 80ee 	bne.w	800ad94 <_dtoa_r+0x6bc>
 800abb8:	4649      	mov	r1, r9
 800abba:	4658      	mov	r0, fp
 800abbc:	f000 fbda 	bl	800b374 <_Bfree>
 800abc0:	2300      	movs	r3, #0
 800abc2:	7033      	strb	r3, [r6, #0]
 800abc4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800abc6:	3701      	adds	r7, #1
 800abc8:	601f      	str	r7, [r3, #0]
 800abca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800abcc:	2b00      	cmp	r3, #0
 800abce:	f000 831d 	beq.w	800b20c <_dtoa_r+0xb34>
 800abd2:	601e      	str	r6, [r3, #0]
 800abd4:	e31a      	b.n	800b20c <_dtoa_r+0xb34>
 800abd6:	07e2      	lsls	r2, r4, #31
 800abd8:	d505      	bpl.n	800abe6 <_dtoa_r+0x50e>
 800abda:	e9d5 2300 	ldrd	r2, r3, [r5]
 800abde:	f7f5 fd2b 	bl	8000638 <__aeabi_dmul>
 800abe2:	3601      	adds	r6, #1
 800abe4:	2301      	movs	r3, #1
 800abe6:	1064      	asrs	r4, r4, #1
 800abe8:	3508      	adds	r5, #8
 800abea:	e73f      	b.n	800aa6c <_dtoa_r+0x394>
 800abec:	2602      	movs	r6, #2
 800abee:	e742      	b.n	800aa76 <_dtoa_r+0x39e>
 800abf0:	9c07      	ldr	r4, [sp, #28]
 800abf2:	9704      	str	r7, [sp, #16]
 800abf4:	e761      	b.n	800aaba <_dtoa_r+0x3e2>
 800abf6:	4b27      	ldr	r3, [pc, #156]	@ (800ac94 <_dtoa_r+0x5bc>)
 800abf8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800abfa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800abfe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac02:	4454      	add	r4, sl
 800ac04:	2900      	cmp	r1, #0
 800ac06:	d053      	beq.n	800acb0 <_dtoa_r+0x5d8>
 800ac08:	4928      	ldr	r1, [pc, #160]	@ (800acac <_dtoa_r+0x5d4>)
 800ac0a:	2000      	movs	r0, #0
 800ac0c:	f7f5 fe3e 	bl	800088c <__aeabi_ddiv>
 800ac10:	4633      	mov	r3, r6
 800ac12:	462a      	mov	r2, r5
 800ac14:	f7f5 fb58 	bl	80002c8 <__aeabi_dsub>
 800ac18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac1c:	4656      	mov	r6, sl
 800ac1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac22:	f7f5 ffb9 	bl	8000b98 <__aeabi_d2iz>
 800ac26:	4605      	mov	r5, r0
 800ac28:	f7f5 fc9c 	bl	8000564 <__aeabi_i2d>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	460b      	mov	r3, r1
 800ac30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac34:	f7f5 fb48 	bl	80002c8 <__aeabi_dsub>
 800ac38:	3530      	adds	r5, #48	@ 0x30
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac42:	f806 5b01 	strb.w	r5, [r6], #1
 800ac46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac4a:	f7f5 ff67 	bl	8000b1c <__aeabi_dcmplt>
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	d171      	bne.n	800ad36 <_dtoa_r+0x65e>
 800ac52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac56:	4911      	ldr	r1, [pc, #68]	@ (800ac9c <_dtoa_r+0x5c4>)
 800ac58:	2000      	movs	r0, #0
 800ac5a:	f7f5 fb35 	bl	80002c8 <__aeabi_dsub>
 800ac5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac62:	f7f5 ff5b 	bl	8000b1c <__aeabi_dcmplt>
 800ac66:	2800      	cmp	r0, #0
 800ac68:	f040 8095 	bne.w	800ad96 <_dtoa_r+0x6be>
 800ac6c:	42a6      	cmp	r6, r4
 800ac6e:	f43f af50 	beq.w	800ab12 <_dtoa_r+0x43a>
 800ac72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ac76:	4b0a      	ldr	r3, [pc, #40]	@ (800aca0 <_dtoa_r+0x5c8>)
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f7f5 fcdd 	bl	8000638 <__aeabi_dmul>
 800ac7e:	4b08      	ldr	r3, [pc, #32]	@ (800aca0 <_dtoa_r+0x5c8>)
 800ac80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac84:	2200      	movs	r2, #0
 800ac86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac8a:	f7f5 fcd5 	bl	8000638 <__aeabi_dmul>
 800ac8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac92:	e7c4      	b.n	800ac1e <_dtoa_r+0x546>
 800ac94:	0800c7a0 	.word	0x0800c7a0
 800ac98:	0800c778 	.word	0x0800c778
 800ac9c:	3ff00000 	.word	0x3ff00000
 800aca0:	40240000 	.word	0x40240000
 800aca4:	401c0000 	.word	0x401c0000
 800aca8:	40140000 	.word	0x40140000
 800acac:	3fe00000 	.word	0x3fe00000
 800acb0:	4631      	mov	r1, r6
 800acb2:	4628      	mov	r0, r5
 800acb4:	f7f5 fcc0 	bl	8000638 <__aeabi_dmul>
 800acb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800acbc:	9415      	str	r4, [sp, #84]	@ 0x54
 800acbe:	4656      	mov	r6, sl
 800acc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acc4:	f7f5 ff68 	bl	8000b98 <__aeabi_d2iz>
 800acc8:	4605      	mov	r5, r0
 800acca:	f7f5 fc4b 	bl	8000564 <__aeabi_i2d>
 800acce:	4602      	mov	r2, r0
 800acd0:	460b      	mov	r3, r1
 800acd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acd6:	f7f5 faf7 	bl	80002c8 <__aeabi_dsub>
 800acda:	3530      	adds	r5, #48	@ 0x30
 800acdc:	f806 5b01 	strb.w	r5, [r6], #1
 800ace0:	4602      	mov	r2, r0
 800ace2:	460b      	mov	r3, r1
 800ace4:	42a6      	cmp	r6, r4
 800ace6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800acea:	f04f 0200 	mov.w	r2, #0
 800acee:	d124      	bne.n	800ad3a <_dtoa_r+0x662>
 800acf0:	4bac      	ldr	r3, [pc, #688]	@ (800afa4 <_dtoa_r+0x8cc>)
 800acf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800acf6:	f7f5 fae9 	bl	80002cc <__adddf3>
 800acfa:	4602      	mov	r2, r0
 800acfc:	460b      	mov	r3, r1
 800acfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad02:	f7f5 ff29 	bl	8000b58 <__aeabi_dcmpgt>
 800ad06:	2800      	cmp	r0, #0
 800ad08:	d145      	bne.n	800ad96 <_dtoa_r+0x6be>
 800ad0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ad0e:	49a5      	ldr	r1, [pc, #660]	@ (800afa4 <_dtoa_r+0x8cc>)
 800ad10:	2000      	movs	r0, #0
 800ad12:	f7f5 fad9 	bl	80002c8 <__aeabi_dsub>
 800ad16:	4602      	mov	r2, r0
 800ad18:	460b      	mov	r3, r1
 800ad1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad1e:	f7f5 fefd 	bl	8000b1c <__aeabi_dcmplt>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	f43f aef5 	beq.w	800ab12 <_dtoa_r+0x43a>
 800ad28:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ad2a:	1e73      	subs	r3, r6, #1
 800ad2c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ad2e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ad32:	2b30      	cmp	r3, #48	@ 0x30
 800ad34:	d0f8      	beq.n	800ad28 <_dtoa_r+0x650>
 800ad36:	9f04      	ldr	r7, [sp, #16]
 800ad38:	e73e      	b.n	800abb8 <_dtoa_r+0x4e0>
 800ad3a:	4b9b      	ldr	r3, [pc, #620]	@ (800afa8 <_dtoa_r+0x8d0>)
 800ad3c:	f7f5 fc7c 	bl	8000638 <__aeabi_dmul>
 800ad40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad44:	e7bc      	b.n	800acc0 <_dtoa_r+0x5e8>
 800ad46:	d10c      	bne.n	800ad62 <_dtoa_r+0x68a>
 800ad48:	4b98      	ldr	r3, [pc, #608]	@ (800afac <_dtoa_r+0x8d4>)
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad50:	f7f5 fc72 	bl	8000638 <__aeabi_dmul>
 800ad54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad58:	f7f5 fef4 	bl	8000b44 <__aeabi_dcmpge>
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	f000 8157 	beq.w	800b010 <_dtoa_r+0x938>
 800ad62:	2400      	movs	r4, #0
 800ad64:	4625      	mov	r5, r4
 800ad66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad68:	43db      	mvns	r3, r3
 800ad6a:	9304      	str	r3, [sp, #16]
 800ad6c:	4656      	mov	r6, sl
 800ad6e:	2700      	movs	r7, #0
 800ad70:	4621      	mov	r1, r4
 800ad72:	4658      	mov	r0, fp
 800ad74:	f000 fafe 	bl	800b374 <_Bfree>
 800ad78:	2d00      	cmp	r5, #0
 800ad7a:	d0dc      	beq.n	800ad36 <_dtoa_r+0x65e>
 800ad7c:	b12f      	cbz	r7, 800ad8a <_dtoa_r+0x6b2>
 800ad7e:	42af      	cmp	r7, r5
 800ad80:	d003      	beq.n	800ad8a <_dtoa_r+0x6b2>
 800ad82:	4639      	mov	r1, r7
 800ad84:	4658      	mov	r0, fp
 800ad86:	f000 faf5 	bl	800b374 <_Bfree>
 800ad8a:	4629      	mov	r1, r5
 800ad8c:	4658      	mov	r0, fp
 800ad8e:	f000 faf1 	bl	800b374 <_Bfree>
 800ad92:	e7d0      	b.n	800ad36 <_dtoa_r+0x65e>
 800ad94:	9704      	str	r7, [sp, #16]
 800ad96:	4633      	mov	r3, r6
 800ad98:	461e      	mov	r6, r3
 800ad9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad9e:	2a39      	cmp	r2, #57	@ 0x39
 800ada0:	d107      	bne.n	800adb2 <_dtoa_r+0x6da>
 800ada2:	459a      	cmp	sl, r3
 800ada4:	d1f8      	bne.n	800ad98 <_dtoa_r+0x6c0>
 800ada6:	9a04      	ldr	r2, [sp, #16]
 800ada8:	3201      	adds	r2, #1
 800adaa:	9204      	str	r2, [sp, #16]
 800adac:	2230      	movs	r2, #48	@ 0x30
 800adae:	f88a 2000 	strb.w	r2, [sl]
 800adb2:	781a      	ldrb	r2, [r3, #0]
 800adb4:	3201      	adds	r2, #1
 800adb6:	701a      	strb	r2, [r3, #0]
 800adb8:	e7bd      	b.n	800ad36 <_dtoa_r+0x65e>
 800adba:	4b7b      	ldr	r3, [pc, #492]	@ (800afa8 <_dtoa_r+0x8d0>)
 800adbc:	2200      	movs	r2, #0
 800adbe:	f7f5 fc3b 	bl	8000638 <__aeabi_dmul>
 800adc2:	2200      	movs	r2, #0
 800adc4:	2300      	movs	r3, #0
 800adc6:	4604      	mov	r4, r0
 800adc8:	460d      	mov	r5, r1
 800adca:	f7f5 fe9d 	bl	8000b08 <__aeabi_dcmpeq>
 800adce:	2800      	cmp	r0, #0
 800add0:	f43f aebb 	beq.w	800ab4a <_dtoa_r+0x472>
 800add4:	e6f0      	b.n	800abb8 <_dtoa_r+0x4e0>
 800add6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800add8:	2a00      	cmp	r2, #0
 800adda:	f000 80db 	beq.w	800af94 <_dtoa_r+0x8bc>
 800adde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ade0:	2a01      	cmp	r2, #1
 800ade2:	f300 80bf 	bgt.w	800af64 <_dtoa_r+0x88c>
 800ade6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ade8:	2a00      	cmp	r2, #0
 800adea:	f000 80b7 	beq.w	800af5c <_dtoa_r+0x884>
 800adee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800adf2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800adf4:	4646      	mov	r6, r8
 800adf6:	9a08      	ldr	r2, [sp, #32]
 800adf8:	2101      	movs	r1, #1
 800adfa:	441a      	add	r2, r3
 800adfc:	4658      	mov	r0, fp
 800adfe:	4498      	add	r8, r3
 800ae00:	9208      	str	r2, [sp, #32]
 800ae02:	f000 fb6b 	bl	800b4dc <__i2b>
 800ae06:	4605      	mov	r5, r0
 800ae08:	b15e      	cbz	r6, 800ae22 <_dtoa_r+0x74a>
 800ae0a:	9b08      	ldr	r3, [sp, #32]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	dd08      	ble.n	800ae22 <_dtoa_r+0x74a>
 800ae10:	42b3      	cmp	r3, r6
 800ae12:	9a08      	ldr	r2, [sp, #32]
 800ae14:	bfa8      	it	ge
 800ae16:	4633      	movge	r3, r6
 800ae18:	eba8 0803 	sub.w	r8, r8, r3
 800ae1c:	1af6      	subs	r6, r6, r3
 800ae1e:	1ad3      	subs	r3, r2, r3
 800ae20:	9308      	str	r3, [sp, #32]
 800ae22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae24:	b1f3      	cbz	r3, 800ae64 <_dtoa_r+0x78c>
 800ae26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	f000 80b7 	beq.w	800af9c <_dtoa_r+0x8c4>
 800ae2e:	b18c      	cbz	r4, 800ae54 <_dtoa_r+0x77c>
 800ae30:	4629      	mov	r1, r5
 800ae32:	4622      	mov	r2, r4
 800ae34:	4658      	mov	r0, fp
 800ae36:	f000 fc11 	bl	800b65c <__pow5mult>
 800ae3a:	464a      	mov	r2, r9
 800ae3c:	4601      	mov	r1, r0
 800ae3e:	4605      	mov	r5, r0
 800ae40:	4658      	mov	r0, fp
 800ae42:	f000 fb61 	bl	800b508 <__multiply>
 800ae46:	4649      	mov	r1, r9
 800ae48:	9004      	str	r0, [sp, #16]
 800ae4a:	4658      	mov	r0, fp
 800ae4c:	f000 fa92 	bl	800b374 <_Bfree>
 800ae50:	9b04      	ldr	r3, [sp, #16]
 800ae52:	4699      	mov	r9, r3
 800ae54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae56:	1b1a      	subs	r2, r3, r4
 800ae58:	d004      	beq.n	800ae64 <_dtoa_r+0x78c>
 800ae5a:	4649      	mov	r1, r9
 800ae5c:	4658      	mov	r0, fp
 800ae5e:	f000 fbfd 	bl	800b65c <__pow5mult>
 800ae62:	4681      	mov	r9, r0
 800ae64:	2101      	movs	r1, #1
 800ae66:	4658      	mov	r0, fp
 800ae68:	f000 fb38 	bl	800b4dc <__i2b>
 800ae6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae6e:	4604      	mov	r4, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	f000 81cf 	beq.w	800b214 <_dtoa_r+0xb3c>
 800ae76:	461a      	mov	r2, r3
 800ae78:	4601      	mov	r1, r0
 800ae7a:	4658      	mov	r0, fp
 800ae7c:	f000 fbee 	bl	800b65c <__pow5mult>
 800ae80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	4604      	mov	r4, r0
 800ae86:	f300 8095 	bgt.w	800afb4 <_dtoa_r+0x8dc>
 800ae8a:	9b02      	ldr	r3, [sp, #8]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	f040 8087 	bne.w	800afa0 <_dtoa_r+0x8c8>
 800ae92:	9b03      	ldr	r3, [sp, #12]
 800ae94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	f040 8089 	bne.w	800afb0 <_dtoa_r+0x8d8>
 800ae9e:	9b03      	ldr	r3, [sp, #12]
 800aea0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aea4:	0d1b      	lsrs	r3, r3, #20
 800aea6:	051b      	lsls	r3, r3, #20
 800aea8:	b12b      	cbz	r3, 800aeb6 <_dtoa_r+0x7de>
 800aeaa:	9b08      	ldr	r3, [sp, #32]
 800aeac:	3301      	adds	r3, #1
 800aeae:	9308      	str	r3, [sp, #32]
 800aeb0:	f108 0801 	add.w	r8, r8, #1
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800aeb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	f000 81b0 	beq.w	800b220 <_dtoa_r+0xb48>
 800aec0:	6923      	ldr	r3, [r4, #16]
 800aec2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aec6:	6918      	ldr	r0, [r3, #16]
 800aec8:	f000 fabc 	bl	800b444 <__hi0bits>
 800aecc:	f1c0 0020 	rsb	r0, r0, #32
 800aed0:	9b08      	ldr	r3, [sp, #32]
 800aed2:	4418      	add	r0, r3
 800aed4:	f010 001f 	ands.w	r0, r0, #31
 800aed8:	d077      	beq.n	800afca <_dtoa_r+0x8f2>
 800aeda:	f1c0 0320 	rsb	r3, r0, #32
 800aede:	2b04      	cmp	r3, #4
 800aee0:	dd6b      	ble.n	800afba <_dtoa_r+0x8e2>
 800aee2:	9b08      	ldr	r3, [sp, #32]
 800aee4:	f1c0 001c 	rsb	r0, r0, #28
 800aee8:	4403      	add	r3, r0
 800aeea:	4480      	add	r8, r0
 800aeec:	4406      	add	r6, r0
 800aeee:	9308      	str	r3, [sp, #32]
 800aef0:	f1b8 0f00 	cmp.w	r8, #0
 800aef4:	dd05      	ble.n	800af02 <_dtoa_r+0x82a>
 800aef6:	4649      	mov	r1, r9
 800aef8:	4642      	mov	r2, r8
 800aefa:	4658      	mov	r0, fp
 800aefc:	f000 fc08 	bl	800b710 <__lshift>
 800af00:	4681      	mov	r9, r0
 800af02:	9b08      	ldr	r3, [sp, #32]
 800af04:	2b00      	cmp	r3, #0
 800af06:	dd05      	ble.n	800af14 <_dtoa_r+0x83c>
 800af08:	4621      	mov	r1, r4
 800af0a:	461a      	mov	r2, r3
 800af0c:	4658      	mov	r0, fp
 800af0e:	f000 fbff 	bl	800b710 <__lshift>
 800af12:	4604      	mov	r4, r0
 800af14:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800af16:	2b00      	cmp	r3, #0
 800af18:	d059      	beq.n	800afce <_dtoa_r+0x8f6>
 800af1a:	4621      	mov	r1, r4
 800af1c:	4648      	mov	r0, r9
 800af1e:	f000 fc63 	bl	800b7e8 <__mcmp>
 800af22:	2800      	cmp	r0, #0
 800af24:	da53      	bge.n	800afce <_dtoa_r+0x8f6>
 800af26:	1e7b      	subs	r3, r7, #1
 800af28:	9304      	str	r3, [sp, #16]
 800af2a:	4649      	mov	r1, r9
 800af2c:	2300      	movs	r3, #0
 800af2e:	220a      	movs	r2, #10
 800af30:	4658      	mov	r0, fp
 800af32:	f000 fa41 	bl	800b3b8 <__multadd>
 800af36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af38:	4681      	mov	r9, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	f000 8172 	beq.w	800b224 <_dtoa_r+0xb4c>
 800af40:	2300      	movs	r3, #0
 800af42:	4629      	mov	r1, r5
 800af44:	220a      	movs	r2, #10
 800af46:	4658      	mov	r0, fp
 800af48:	f000 fa36 	bl	800b3b8 <__multadd>
 800af4c:	9b00      	ldr	r3, [sp, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	4605      	mov	r5, r0
 800af52:	dc67      	bgt.n	800b024 <_dtoa_r+0x94c>
 800af54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af56:	2b02      	cmp	r3, #2
 800af58:	dc41      	bgt.n	800afde <_dtoa_r+0x906>
 800af5a:	e063      	b.n	800b024 <_dtoa_r+0x94c>
 800af5c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800af5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800af62:	e746      	b.n	800adf2 <_dtoa_r+0x71a>
 800af64:	9b07      	ldr	r3, [sp, #28]
 800af66:	1e5c      	subs	r4, r3, #1
 800af68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af6a:	42a3      	cmp	r3, r4
 800af6c:	bfbf      	itttt	lt
 800af6e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800af70:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800af72:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800af74:	1ae3      	sublt	r3, r4, r3
 800af76:	bfb4      	ite	lt
 800af78:	18d2      	addlt	r2, r2, r3
 800af7a:	1b1c      	subge	r4, r3, r4
 800af7c:	9b07      	ldr	r3, [sp, #28]
 800af7e:	bfbc      	itt	lt
 800af80:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800af82:	2400      	movlt	r4, #0
 800af84:	2b00      	cmp	r3, #0
 800af86:	bfb5      	itete	lt
 800af88:	eba8 0603 	sublt.w	r6, r8, r3
 800af8c:	9b07      	ldrge	r3, [sp, #28]
 800af8e:	2300      	movlt	r3, #0
 800af90:	4646      	movge	r6, r8
 800af92:	e730      	b.n	800adf6 <_dtoa_r+0x71e>
 800af94:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800af96:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800af98:	4646      	mov	r6, r8
 800af9a:	e735      	b.n	800ae08 <_dtoa_r+0x730>
 800af9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af9e:	e75c      	b.n	800ae5a <_dtoa_r+0x782>
 800afa0:	2300      	movs	r3, #0
 800afa2:	e788      	b.n	800aeb6 <_dtoa_r+0x7de>
 800afa4:	3fe00000 	.word	0x3fe00000
 800afa8:	40240000 	.word	0x40240000
 800afac:	40140000 	.word	0x40140000
 800afb0:	9b02      	ldr	r3, [sp, #8]
 800afb2:	e780      	b.n	800aeb6 <_dtoa_r+0x7de>
 800afb4:	2300      	movs	r3, #0
 800afb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800afb8:	e782      	b.n	800aec0 <_dtoa_r+0x7e8>
 800afba:	d099      	beq.n	800aef0 <_dtoa_r+0x818>
 800afbc:	9a08      	ldr	r2, [sp, #32]
 800afbe:	331c      	adds	r3, #28
 800afc0:	441a      	add	r2, r3
 800afc2:	4498      	add	r8, r3
 800afc4:	441e      	add	r6, r3
 800afc6:	9208      	str	r2, [sp, #32]
 800afc8:	e792      	b.n	800aef0 <_dtoa_r+0x818>
 800afca:	4603      	mov	r3, r0
 800afcc:	e7f6      	b.n	800afbc <_dtoa_r+0x8e4>
 800afce:	9b07      	ldr	r3, [sp, #28]
 800afd0:	9704      	str	r7, [sp, #16]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	dc20      	bgt.n	800b018 <_dtoa_r+0x940>
 800afd6:	9300      	str	r3, [sp, #0]
 800afd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afda:	2b02      	cmp	r3, #2
 800afdc:	dd1e      	ble.n	800b01c <_dtoa_r+0x944>
 800afde:	9b00      	ldr	r3, [sp, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f47f aec0 	bne.w	800ad66 <_dtoa_r+0x68e>
 800afe6:	4621      	mov	r1, r4
 800afe8:	2205      	movs	r2, #5
 800afea:	4658      	mov	r0, fp
 800afec:	f000 f9e4 	bl	800b3b8 <__multadd>
 800aff0:	4601      	mov	r1, r0
 800aff2:	4604      	mov	r4, r0
 800aff4:	4648      	mov	r0, r9
 800aff6:	f000 fbf7 	bl	800b7e8 <__mcmp>
 800affa:	2800      	cmp	r0, #0
 800affc:	f77f aeb3 	ble.w	800ad66 <_dtoa_r+0x68e>
 800b000:	4656      	mov	r6, sl
 800b002:	2331      	movs	r3, #49	@ 0x31
 800b004:	f806 3b01 	strb.w	r3, [r6], #1
 800b008:	9b04      	ldr	r3, [sp, #16]
 800b00a:	3301      	adds	r3, #1
 800b00c:	9304      	str	r3, [sp, #16]
 800b00e:	e6ae      	b.n	800ad6e <_dtoa_r+0x696>
 800b010:	9c07      	ldr	r4, [sp, #28]
 800b012:	9704      	str	r7, [sp, #16]
 800b014:	4625      	mov	r5, r4
 800b016:	e7f3      	b.n	800b000 <_dtoa_r+0x928>
 800b018:	9b07      	ldr	r3, [sp, #28]
 800b01a:	9300      	str	r3, [sp, #0]
 800b01c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b01e:	2b00      	cmp	r3, #0
 800b020:	f000 8104 	beq.w	800b22c <_dtoa_r+0xb54>
 800b024:	2e00      	cmp	r6, #0
 800b026:	dd05      	ble.n	800b034 <_dtoa_r+0x95c>
 800b028:	4629      	mov	r1, r5
 800b02a:	4632      	mov	r2, r6
 800b02c:	4658      	mov	r0, fp
 800b02e:	f000 fb6f 	bl	800b710 <__lshift>
 800b032:	4605      	mov	r5, r0
 800b034:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b036:	2b00      	cmp	r3, #0
 800b038:	d05a      	beq.n	800b0f0 <_dtoa_r+0xa18>
 800b03a:	6869      	ldr	r1, [r5, #4]
 800b03c:	4658      	mov	r0, fp
 800b03e:	f000 f959 	bl	800b2f4 <_Balloc>
 800b042:	4606      	mov	r6, r0
 800b044:	b928      	cbnz	r0, 800b052 <_dtoa_r+0x97a>
 800b046:	4b84      	ldr	r3, [pc, #528]	@ (800b258 <_dtoa_r+0xb80>)
 800b048:	4602      	mov	r2, r0
 800b04a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b04e:	f7ff bb5a 	b.w	800a706 <_dtoa_r+0x2e>
 800b052:	692a      	ldr	r2, [r5, #16]
 800b054:	3202      	adds	r2, #2
 800b056:	0092      	lsls	r2, r2, #2
 800b058:	f105 010c 	add.w	r1, r5, #12
 800b05c:	300c      	adds	r0, #12
 800b05e:	f7ff faa2 	bl	800a5a6 <memcpy>
 800b062:	2201      	movs	r2, #1
 800b064:	4631      	mov	r1, r6
 800b066:	4658      	mov	r0, fp
 800b068:	f000 fb52 	bl	800b710 <__lshift>
 800b06c:	f10a 0301 	add.w	r3, sl, #1
 800b070:	9307      	str	r3, [sp, #28]
 800b072:	9b00      	ldr	r3, [sp, #0]
 800b074:	4453      	add	r3, sl
 800b076:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b078:	9b02      	ldr	r3, [sp, #8]
 800b07a:	f003 0301 	and.w	r3, r3, #1
 800b07e:	462f      	mov	r7, r5
 800b080:	930a      	str	r3, [sp, #40]	@ 0x28
 800b082:	4605      	mov	r5, r0
 800b084:	9b07      	ldr	r3, [sp, #28]
 800b086:	4621      	mov	r1, r4
 800b088:	3b01      	subs	r3, #1
 800b08a:	4648      	mov	r0, r9
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	f7ff fa98 	bl	800a5c2 <quorem>
 800b092:	4639      	mov	r1, r7
 800b094:	9002      	str	r0, [sp, #8]
 800b096:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b09a:	4648      	mov	r0, r9
 800b09c:	f000 fba4 	bl	800b7e8 <__mcmp>
 800b0a0:	462a      	mov	r2, r5
 800b0a2:	9008      	str	r0, [sp, #32]
 800b0a4:	4621      	mov	r1, r4
 800b0a6:	4658      	mov	r0, fp
 800b0a8:	f000 fbba 	bl	800b820 <__mdiff>
 800b0ac:	68c2      	ldr	r2, [r0, #12]
 800b0ae:	4606      	mov	r6, r0
 800b0b0:	bb02      	cbnz	r2, 800b0f4 <_dtoa_r+0xa1c>
 800b0b2:	4601      	mov	r1, r0
 800b0b4:	4648      	mov	r0, r9
 800b0b6:	f000 fb97 	bl	800b7e8 <__mcmp>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	4631      	mov	r1, r6
 800b0be:	4658      	mov	r0, fp
 800b0c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b0c2:	f000 f957 	bl	800b374 <_Bfree>
 800b0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0ca:	9e07      	ldr	r6, [sp, #28]
 800b0cc:	ea43 0102 	orr.w	r1, r3, r2
 800b0d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0d2:	4319      	orrs	r1, r3
 800b0d4:	d110      	bne.n	800b0f8 <_dtoa_r+0xa20>
 800b0d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b0da:	d029      	beq.n	800b130 <_dtoa_r+0xa58>
 800b0dc:	9b08      	ldr	r3, [sp, #32]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	dd02      	ble.n	800b0e8 <_dtoa_r+0xa10>
 800b0e2:	9b02      	ldr	r3, [sp, #8]
 800b0e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b0e8:	9b00      	ldr	r3, [sp, #0]
 800b0ea:	f883 8000 	strb.w	r8, [r3]
 800b0ee:	e63f      	b.n	800ad70 <_dtoa_r+0x698>
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	e7bb      	b.n	800b06c <_dtoa_r+0x994>
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	e7e1      	b.n	800b0bc <_dtoa_r+0x9e4>
 800b0f8:	9b08      	ldr	r3, [sp, #32]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	db04      	blt.n	800b108 <_dtoa_r+0xa30>
 800b0fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b100:	430b      	orrs	r3, r1
 800b102:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b104:	430b      	orrs	r3, r1
 800b106:	d120      	bne.n	800b14a <_dtoa_r+0xa72>
 800b108:	2a00      	cmp	r2, #0
 800b10a:	dded      	ble.n	800b0e8 <_dtoa_r+0xa10>
 800b10c:	4649      	mov	r1, r9
 800b10e:	2201      	movs	r2, #1
 800b110:	4658      	mov	r0, fp
 800b112:	f000 fafd 	bl	800b710 <__lshift>
 800b116:	4621      	mov	r1, r4
 800b118:	4681      	mov	r9, r0
 800b11a:	f000 fb65 	bl	800b7e8 <__mcmp>
 800b11e:	2800      	cmp	r0, #0
 800b120:	dc03      	bgt.n	800b12a <_dtoa_r+0xa52>
 800b122:	d1e1      	bne.n	800b0e8 <_dtoa_r+0xa10>
 800b124:	f018 0f01 	tst.w	r8, #1
 800b128:	d0de      	beq.n	800b0e8 <_dtoa_r+0xa10>
 800b12a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b12e:	d1d8      	bne.n	800b0e2 <_dtoa_r+0xa0a>
 800b130:	9a00      	ldr	r2, [sp, #0]
 800b132:	2339      	movs	r3, #57	@ 0x39
 800b134:	7013      	strb	r3, [r2, #0]
 800b136:	4633      	mov	r3, r6
 800b138:	461e      	mov	r6, r3
 800b13a:	3b01      	subs	r3, #1
 800b13c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b140:	2a39      	cmp	r2, #57	@ 0x39
 800b142:	d052      	beq.n	800b1ea <_dtoa_r+0xb12>
 800b144:	3201      	adds	r2, #1
 800b146:	701a      	strb	r2, [r3, #0]
 800b148:	e612      	b.n	800ad70 <_dtoa_r+0x698>
 800b14a:	2a00      	cmp	r2, #0
 800b14c:	dd07      	ble.n	800b15e <_dtoa_r+0xa86>
 800b14e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b152:	d0ed      	beq.n	800b130 <_dtoa_r+0xa58>
 800b154:	9a00      	ldr	r2, [sp, #0]
 800b156:	f108 0301 	add.w	r3, r8, #1
 800b15a:	7013      	strb	r3, [r2, #0]
 800b15c:	e608      	b.n	800ad70 <_dtoa_r+0x698>
 800b15e:	9b07      	ldr	r3, [sp, #28]
 800b160:	9a07      	ldr	r2, [sp, #28]
 800b162:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b166:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b168:	4293      	cmp	r3, r2
 800b16a:	d028      	beq.n	800b1be <_dtoa_r+0xae6>
 800b16c:	4649      	mov	r1, r9
 800b16e:	2300      	movs	r3, #0
 800b170:	220a      	movs	r2, #10
 800b172:	4658      	mov	r0, fp
 800b174:	f000 f920 	bl	800b3b8 <__multadd>
 800b178:	42af      	cmp	r7, r5
 800b17a:	4681      	mov	r9, r0
 800b17c:	f04f 0300 	mov.w	r3, #0
 800b180:	f04f 020a 	mov.w	r2, #10
 800b184:	4639      	mov	r1, r7
 800b186:	4658      	mov	r0, fp
 800b188:	d107      	bne.n	800b19a <_dtoa_r+0xac2>
 800b18a:	f000 f915 	bl	800b3b8 <__multadd>
 800b18e:	4607      	mov	r7, r0
 800b190:	4605      	mov	r5, r0
 800b192:	9b07      	ldr	r3, [sp, #28]
 800b194:	3301      	adds	r3, #1
 800b196:	9307      	str	r3, [sp, #28]
 800b198:	e774      	b.n	800b084 <_dtoa_r+0x9ac>
 800b19a:	f000 f90d 	bl	800b3b8 <__multadd>
 800b19e:	4629      	mov	r1, r5
 800b1a0:	4607      	mov	r7, r0
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	220a      	movs	r2, #10
 800b1a6:	4658      	mov	r0, fp
 800b1a8:	f000 f906 	bl	800b3b8 <__multadd>
 800b1ac:	4605      	mov	r5, r0
 800b1ae:	e7f0      	b.n	800b192 <_dtoa_r+0xaba>
 800b1b0:	9b00      	ldr	r3, [sp, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	bfcc      	ite	gt
 800b1b6:	461e      	movgt	r6, r3
 800b1b8:	2601      	movle	r6, #1
 800b1ba:	4456      	add	r6, sl
 800b1bc:	2700      	movs	r7, #0
 800b1be:	4649      	mov	r1, r9
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	4658      	mov	r0, fp
 800b1c4:	f000 faa4 	bl	800b710 <__lshift>
 800b1c8:	4621      	mov	r1, r4
 800b1ca:	4681      	mov	r9, r0
 800b1cc:	f000 fb0c 	bl	800b7e8 <__mcmp>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	dcb0      	bgt.n	800b136 <_dtoa_r+0xa5e>
 800b1d4:	d102      	bne.n	800b1dc <_dtoa_r+0xb04>
 800b1d6:	f018 0f01 	tst.w	r8, #1
 800b1da:	d1ac      	bne.n	800b136 <_dtoa_r+0xa5e>
 800b1dc:	4633      	mov	r3, r6
 800b1de:	461e      	mov	r6, r3
 800b1e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1e4:	2a30      	cmp	r2, #48	@ 0x30
 800b1e6:	d0fa      	beq.n	800b1de <_dtoa_r+0xb06>
 800b1e8:	e5c2      	b.n	800ad70 <_dtoa_r+0x698>
 800b1ea:	459a      	cmp	sl, r3
 800b1ec:	d1a4      	bne.n	800b138 <_dtoa_r+0xa60>
 800b1ee:	9b04      	ldr	r3, [sp, #16]
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	9304      	str	r3, [sp, #16]
 800b1f4:	2331      	movs	r3, #49	@ 0x31
 800b1f6:	f88a 3000 	strb.w	r3, [sl]
 800b1fa:	e5b9      	b.n	800ad70 <_dtoa_r+0x698>
 800b1fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b1fe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b25c <_dtoa_r+0xb84>
 800b202:	b11b      	cbz	r3, 800b20c <_dtoa_r+0xb34>
 800b204:	f10a 0308 	add.w	r3, sl, #8
 800b208:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b20a:	6013      	str	r3, [r2, #0]
 800b20c:	4650      	mov	r0, sl
 800b20e:	b019      	add	sp, #100	@ 0x64
 800b210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b216:	2b01      	cmp	r3, #1
 800b218:	f77f ae37 	ble.w	800ae8a <_dtoa_r+0x7b2>
 800b21c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b21e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b220:	2001      	movs	r0, #1
 800b222:	e655      	b.n	800aed0 <_dtoa_r+0x7f8>
 800b224:	9b00      	ldr	r3, [sp, #0]
 800b226:	2b00      	cmp	r3, #0
 800b228:	f77f aed6 	ble.w	800afd8 <_dtoa_r+0x900>
 800b22c:	4656      	mov	r6, sl
 800b22e:	4621      	mov	r1, r4
 800b230:	4648      	mov	r0, r9
 800b232:	f7ff f9c6 	bl	800a5c2 <quorem>
 800b236:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b23a:	f806 8b01 	strb.w	r8, [r6], #1
 800b23e:	9b00      	ldr	r3, [sp, #0]
 800b240:	eba6 020a 	sub.w	r2, r6, sl
 800b244:	4293      	cmp	r3, r2
 800b246:	ddb3      	ble.n	800b1b0 <_dtoa_r+0xad8>
 800b248:	4649      	mov	r1, r9
 800b24a:	2300      	movs	r3, #0
 800b24c:	220a      	movs	r2, #10
 800b24e:	4658      	mov	r0, fp
 800b250:	f000 f8b2 	bl	800b3b8 <__multadd>
 800b254:	4681      	mov	r9, r0
 800b256:	e7ea      	b.n	800b22e <_dtoa_r+0xb56>
 800b258:	0800c700 	.word	0x0800c700
 800b25c:	0800c684 	.word	0x0800c684

0800b260 <_free_r>:
 800b260:	b538      	push	{r3, r4, r5, lr}
 800b262:	4605      	mov	r5, r0
 800b264:	2900      	cmp	r1, #0
 800b266:	d041      	beq.n	800b2ec <_free_r+0x8c>
 800b268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b26c:	1f0c      	subs	r4, r1, #4
 800b26e:	2b00      	cmp	r3, #0
 800b270:	bfb8      	it	lt
 800b272:	18e4      	addlt	r4, r4, r3
 800b274:	f7fe fb1a 	bl	80098ac <__malloc_lock>
 800b278:	4a1d      	ldr	r2, [pc, #116]	@ (800b2f0 <_free_r+0x90>)
 800b27a:	6813      	ldr	r3, [r2, #0]
 800b27c:	b933      	cbnz	r3, 800b28c <_free_r+0x2c>
 800b27e:	6063      	str	r3, [r4, #4]
 800b280:	6014      	str	r4, [r2, #0]
 800b282:	4628      	mov	r0, r5
 800b284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b288:	f7fe bb16 	b.w	80098b8 <__malloc_unlock>
 800b28c:	42a3      	cmp	r3, r4
 800b28e:	d908      	bls.n	800b2a2 <_free_r+0x42>
 800b290:	6820      	ldr	r0, [r4, #0]
 800b292:	1821      	adds	r1, r4, r0
 800b294:	428b      	cmp	r3, r1
 800b296:	bf01      	itttt	eq
 800b298:	6819      	ldreq	r1, [r3, #0]
 800b29a:	685b      	ldreq	r3, [r3, #4]
 800b29c:	1809      	addeq	r1, r1, r0
 800b29e:	6021      	streq	r1, [r4, #0]
 800b2a0:	e7ed      	b.n	800b27e <_free_r+0x1e>
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	b10b      	cbz	r3, 800b2ac <_free_r+0x4c>
 800b2a8:	42a3      	cmp	r3, r4
 800b2aa:	d9fa      	bls.n	800b2a2 <_free_r+0x42>
 800b2ac:	6811      	ldr	r1, [r2, #0]
 800b2ae:	1850      	adds	r0, r2, r1
 800b2b0:	42a0      	cmp	r0, r4
 800b2b2:	d10b      	bne.n	800b2cc <_free_r+0x6c>
 800b2b4:	6820      	ldr	r0, [r4, #0]
 800b2b6:	4401      	add	r1, r0
 800b2b8:	1850      	adds	r0, r2, r1
 800b2ba:	4283      	cmp	r3, r0
 800b2bc:	6011      	str	r1, [r2, #0]
 800b2be:	d1e0      	bne.n	800b282 <_free_r+0x22>
 800b2c0:	6818      	ldr	r0, [r3, #0]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	6053      	str	r3, [r2, #4]
 800b2c6:	4408      	add	r0, r1
 800b2c8:	6010      	str	r0, [r2, #0]
 800b2ca:	e7da      	b.n	800b282 <_free_r+0x22>
 800b2cc:	d902      	bls.n	800b2d4 <_free_r+0x74>
 800b2ce:	230c      	movs	r3, #12
 800b2d0:	602b      	str	r3, [r5, #0]
 800b2d2:	e7d6      	b.n	800b282 <_free_r+0x22>
 800b2d4:	6820      	ldr	r0, [r4, #0]
 800b2d6:	1821      	adds	r1, r4, r0
 800b2d8:	428b      	cmp	r3, r1
 800b2da:	bf04      	itt	eq
 800b2dc:	6819      	ldreq	r1, [r3, #0]
 800b2de:	685b      	ldreq	r3, [r3, #4]
 800b2e0:	6063      	str	r3, [r4, #4]
 800b2e2:	bf04      	itt	eq
 800b2e4:	1809      	addeq	r1, r1, r0
 800b2e6:	6021      	streq	r1, [r4, #0]
 800b2e8:	6054      	str	r4, [r2, #4]
 800b2ea:	e7ca      	b.n	800b282 <_free_r+0x22>
 800b2ec:	bd38      	pop	{r3, r4, r5, pc}
 800b2ee:	bf00      	nop
 800b2f0:	20004d4c 	.word	0x20004d4c

0800b2f4 <_Balloc>:
 800b2f4:	b570      	push	{r4, r5, r6, lr}
 800b2f6:	69c6      	ldr	r6, [r0, #28]
 800b2f8:	4604      	mov	r4, r0
 800b2fa:	460d      	mov	r5, r1
 800b2fc:	b976      	cbnz	r6, 800b31c <_Balloc+0x28>
 800b2fe:	2010      	movs	r0, #16
 800b300:	f7fe fa2a 	bl	8009758 <malloc>
 800b304:	4602      	mov	r2, r0
 800b306:	61e0      	str	r0, [r4, #28]
 800b308:	b920      	cbnz	r0, 800b314 <_Balloc+0x20>
 800b30a:	4b18      	ldr	r3, [pc, #96]	@ (800b36c <_Balloc+0x78>)
 800b30c:	4818      	ldr	r0, [pc, #96]	@ (800b370 <_Balloc+0x7c>)
 800b30e:	216b      	movs	r1, #107	@ 0x6b
 800b310:	f000 fd90 	bl	800be34 <__assert_func>
 800b314:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b318:	6006      	str	r6, [r0, #0]
 800b31a:	60c6      	str	r6, [r0, #12]
 800b31c:	69e6      	ldr	r6, [r4, #28]
 800b31e:	68f3      	ldr	r3, [r6, #12]
 800b320:	b183      	cbz	r3, 800b344 <_Balloc+0x50>
 800b322:	69e3      	ldr	r3, [r4, #28]
 800b324:	68db      	ldr	r3, [r3, #12]
 800b326:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b32a:	b9b8      	cbnz	r0, 800b35c <_Balloc+0x68>
 800b32c:	2101      	movs	r1, #1
 800b32e:	fa01 f605 	lsl.w	r6, r1, r5
 800b332:	1d72      	adds	r2, r6, #5
 800b334:	0092      	lsls	r2, r2, #2
 800b336:	4620      	mov	r0, r4
 800b338:	f000 fd9a 	bl	800be70 <_calloc_r>
 800b33c:	b160      	cbz	r0, 800b358 <_Balloc+0x64>
 800b33e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b342:	e00e      	b.n	800b362 <_Balloc+0x6e>
 800b344:	2221      	movs	r2, #33	@ 0x21
 800b346:	2104      	movs	r1, #4
 800b348:	4620      	mov	r0, r4
 800b34a:	f000 fd91 	bl	800be70 <_calloc_r>
 800b34e:	69e3      	ldr	r3, [r4, #28]
 800b350:	60f0      	str	r0, [r6, #12]
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d1e4      	bne.n	800b322 <_Balloc+0x2e>
 800b358:	2000      	movs	r0, #0
 800b35a:	bd70      	pop	{r4, r5, r6, pc}
 800b35c:	6802      	ldr	r2, [r0, #0]
 800b35e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b362:	2300      	movs	r3, #0
 800b364:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b368:	e7f7      	b.n	800b35a <_Balloc+0x66>
 800b36a:	bf00      	nop
 800b36c:	0800c691 	.word	0x0800c691
 800b370:	0800c711 	.word	0x0800c711

0800b374 <_Bfree>:
 800b374:	b570      	push	{r4, r5, r6, lr}
 800b376:	69c6      	ldr	r6, [r0, #28]
 800b378:	4605      	mov	r5, r0
 800b37a:	460c      	mov	r4, r1
 800b37c:	b976      	cbnz	r6, 800b39c <_Bfree+0x28>
 800b37e:	2010      	movs	r0, #16
 800b380:	f7fe f9ea 	bl	8009758 <malloc>
 800b384:	4602      	mov	r2, r0
 800b386:	61e8      	str	r0, [r5, #28]
 800b388:	b920      	cbnz	r0, 800b394 <_Bfree+0x20>
 800b38a:	4b09      	ldr	r3, [pc, #36]	@ (800b3b0 <_Bfree+0x3c>)
 800b38c:	4809      	ldr	r0, [pc, #36]	@ (800b3b4 <_Bfree+0x40>)
 800b38e:	218f      	movs	r1, #143	@ 0x8f
 800b390:	f000 fd50 	bl	800be34 <__assert_func>
 800b394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b398:	6006      	str	r6, [r0, #0]
 800b39a:	60c6      	str	r6, [r0, #12]
 800b39c:	b13c      	cbz	r4, 800b3ae <_Bfree+0x3a>
 800b39e:	69eb      	ldr	r3, [r5, #28]
 800b3a0:	6862      	ldr	r2, [r4, #4]
 800b3a2:	68db      	ldr	r3, [r3, #12]
 800b3a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b3a8:	6021      	str	r1, [r4, #0]
 800b3aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b3ae:	bd70      	pop	{r4, r5, r6, pc}
 800b3b0:	0800c691 	.word	0x0800c691
 800b3b4:	0800c711 	.word	0x0800c711

0800b3b8 <__multadd>:
 800b3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3bc:	690d      	ldr	r5, [r1, #16]
 800b3be:	4607      	mov	r7, r0
 800b3c0:	460c      	mov	r4, r1
 800b3c2:	461e      	mov	r6, r3
 800b3c4:	f101 0c14 	add.w	ip, r1, #20
 800b3c8:	2000      	movs	r0, #0
 800b3ca:	f8dc 3000 	ldr.w	r3, [ip]
 800b3ce:	b299      	uxth	r1, r3
 800b3d0:	fb02 6101 	mla	r1, r2, r1, r6
 800b3d4:	0c1e      	lsrs	r6, r3, #16
 800b3d6:	0c0b      	lsrs	r3, r1, #16
 800b3d8:	fb02 3306 	mla	r3, r2, r6, r3
 800b3dc:	b289      	uxth	r1, r1
 800b3de:	3001      	adds	r0, #1
 800b3e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b3e4:	4285      	cmp	r5, r0
 800b3e6:	f84c 1b04 	str.w	r1, [ip], #4
 800b3ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b3ee:	dcec      	bgt.n	800b3ca <__multadd+0x12>
 800b3f0:	b30e      	cbz	r6, 800b436 <__multadd+0x7e>
 800b3f2:	68a3      	ldr	r3, [r4, #8]
 800b3f4:	42ab      	cmp	r3, r5
 800b3f6:	dc19      	bgt.n	800b42c <__multadd+0x74>
 800b3f8:	6861      	ldr	r1, [r4, #4]
 800b3fa:	4638      	mov	r0, r7
 800b3fc:	3101      	adds	r1, #1
 800b3fe:	f7ff ff79 	bl	800b2f4 <_Balloc>
 800b402:	4680      	mov	r8, r0
 800b404:	b928      	cbnz	r0, 800b412 <__multadd+0x5a>
 800b406:	4602      	mov	r2, r0
 800b408:	4b0c      	ldr	r3, [pc, #48]	@ (800b43c <__multadd+0x84>)
 800b40a:	480d      	ldr	r0, [pc, #52]	@ (800b440 <__multadd+0x88>)
 800b40c:	21ba      	movs	r1, #186	@ 0xba
 800b40e:	f000 fd11 	bl	800be34 <__assert_func>
 800b412:	6922      	ldr	r2, [r4, #16]
 800b414:	3202      	adds	r2, #2
 800b416:	f104 010c 	add.w	r1, r4, #12
 800b41a:	0092      	lsls	r2, r2, #2
 800b41c:	300c      	adds	r0, #12
 800b41e:	f7ff f8c2 	bl	800a5a6 <memcpy>
 800b422:	4621      	mov	r1, r4
 800b424:	4638      	mov	r0, r7
 800b426:	f7ff ffa5 	bl	800b374 <_Bfree>
 800b42a:	4644      	mov	r4, r8
 800b42c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b430:	3501      	adds	r5, #1
 800b432:	615e      	str	r6, [r3, #20]
 800b434:	6125      	str	r5, [r4, #16]
 800b436:	4620      	mov	r0, r4
 800b438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b43c:	0800c700 	.word	0x0800c700
 800b440:	0800c711 	.word	0x0800c711

0800b444 <__hi0bits>:
 800b444:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b448:	4603      	mov	r3, r0
 800b44a:	bf36      	itet	cc
 800b44c:	0403      	lslcc	r3, r0, #16
 800b44e:	2000      	movcs	r0, #0
 800b450:	2010      	movcc	r0, #16
 800b452:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b456:	bf3c      	itt	cc
 800b458:	021b      	lslcc	r3, r3, #8
 800b45a:	3008      	addcc	r0, #8
 800b45c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b460:	bf3c      	itt	cc
 800b462:	011b      	lslcc	r3, r3, #4
 800b464:	3004      	addcc	r0, #4
 800b466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b46a:	bf3c      	itt	cc
 800b46c:	009b      	lslcc	r3, r3, #2
 800b46e:	3002      	addcc	r0, #2
 800b470:	2b00      	cmp	r3, #0
 800b472:	db05      	blt.n	800b480 <__hi0bits+0x3c>
 800b474:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b478:	f100 0001 	add.w	r0, r0, #1
 800b47c:	bf08      	it	eq
 800b47e:	2020      	moveq	r0, #32
 800b480:	4770      	bx	lr

0800b482 <__lo0bits>:
 800b482:	6803      	ldr	r3, [r0, #0]
 800b484:	4602      	mov	r2, r0
 800b486:	f013 0007 	ands.w	r0, r3, #7
 800b48a:	d00b      	beq.n	800b4a4 <__lo0bits+0x22>
 800b48c:	07d9      	lsls	r1, r3, #31
 800b48e:	d421      	bmi.n	800b4d4 <__lo0bits+0x52>
 800b490:	0798      	lsls	r0, r3, #30
 800b492:	bf49      	itett	mi
 800b494:	085b      	lsrmi	r3, r3, #1
 800b496:	089b      	lsrpl	r3, r3, #2
 800b498:	2001      	movmi	r0, #1
 800b49a:	6013      	strmi	r3, [r2, #0]
 800b49c:	bf5c      	itt	pl
 800b49e:	6013      	strpl	r3, [r2, #0]
 800b4a0:	2002      	movpl	r0, #2
 800b4a2:	4770      	bx	lr
 800b4a4:	b299      	uxth	r1, r3
 800b4a6:	b909      	cbnz	r1, 800b4ac <__lo0bits+0x2a>
 800b4a8:	0c1b      	lsrs	r3, r3, #16
 800b4aa:	2010      	movs	r0, #16
 800b4ac:	b2d9      	uxtb	r1, r3
 800b4ae:	b909      	cbnz	r1, 800b4b4 <__lo0bits+0x32>
 800b4b0:	3008      	adds	r0, #8
 800b4b2:	0a1b      	lsrs	r3, r3, #8
 800b4b4:	0719      	lsls	r1, r3, #28
 800b4b6:	bf04      	itt	eq
 800b4b8:	091b      	lsreq	r3, r3, #4
 800b4ba:	3004      	addeq	r0, #4
 800b4bc:	0799      	lsls	r1, r3, #30
 800b4be:	bf04      	itt	eq
 800b4c0:	089b      	lsreq	r3, r3, #2
 800b4c2:	3002      	addeq	r0, #2
 800b4c4:	07d9      	lsls	r1, r3, #31
 800b4c6:	d403      	bmi.n	800b4d0 <__lo0bits+0x4e>
 800b4c8:	085b      	lsrs	r3, r3, #1
 800b4ca:	f100 0001 	add.w	r0, r0, #1
 800b4ce:	d003      	beq.n	800b4d8 <__lo0bits+0x56>
 800b4d0:	6013      	str	r3, [r2, #0]
 800b4d2:	4770      	bx	lr
 800b4d4:	2000      	movs	r0, #0
 800b4d6:	4770      	bx	lr
 800b4d8:	2020      	movs	r0, #32
 800b4da:	4770      	bx	lr

0800b4dc <__i2b>:
 800b4dc:	b510      	push	{r4, lr}
 800b4de:	460c      	mov	r4, r1
 800b4e0:	2101      	movs	r1, #1
 800b4e2:	f7ff ff07 	bl	800b2f4 <_Balloc>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	b928      	cbnz	r0, 800b4f6 <__i2b+0x1a>
 800b4ea:	4b05      	ldr	r3, [pc, #20]	@ (800b500 <__i2b+0x24>)
 800b4ec:	4805      	ldr	r0, [pc, #20]	@ (800b504 <__i2b+0x28>)
 800b4ee:	f240 1145 	movw	r1, #325	@ 0x145
 800b4f2:	f000 fc9f 	bl	800be34 <__assert_func>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	6144      	str	r4, [r0, #20]
 800b4fa:	6103      	str	r3, [r0, #16]
 800b4fc:	bd10      	pop	{r4, pc}
 800b4fe:	bf00      	nop
 800b500:	0800c700 	.word	0x0800c700
 800b504:	0800c711 	.word	0x0800c711

0800b508 <__multiply>:
 800b508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b50c:	4614      	mov	r4, r2
 800b50e:	690a      	ldr	r2, [r1, #16]
 800b510:	6923      	ldr	r3, [r4, #16]
 800b512:	429a      	cmp	r2, r3
 800b514:	bfa8      	it	ge
 800b516:	4623      	movge	r3, r4
 800b518:	460f      	mov	r7, r1
 800b51a:	bfa4      	itt	ge
 800b51c:	460c      	movge	r4, r1
 800b51e:	461f      	movge	r7, r3
 800b520:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b524:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b528:	68a3      	ldr	r3, [r4, #8]
 800b52a:	6861      	ldr	r1, [r4, #4]
 800b52c:	eb0a 0609 	add.w	r6, sl, r9
 800b530:	42b3      	cmp	r3, r6
 800b532:	b085      	sub	sp, #20
 800b534:	bfb8      	it	lt
 800b536:	3101      	addlt	r1, #1
 800b538:	f7ff fedc 	bl	800b2f4 <_Balloc>
 800b53c:	b930      	cbnz	r0, 800b54c <__multiply+0x44>
 800b53e:	4602      	mov	r2, r0
 800b540:	4b44      	ldr	r3, [pc, #272]	@ (800b654 <__multiply+0x14c>)
 800b542:	4845      	ldr	r0, [pc, #276]	@ (800b658 <__multiply+0x150>)
 800b544:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b548:	f000 fc74 	bl	800be34 <__assert_func>
 800b54c:	f100 0514 	add.w	r5, r0, #20
 800b550:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b554:	462b      	mov	r3, r5
 800b556:	2200      	movs	r2, #0
 800b558:	4543      	cmp	r3, r8
 800b55a:	d321      	bcc.n	800b5a0 <__multiply+0x98>
 800b55c:	f107 0114 	add.w	r1, r7, #20
 800b560:	f104 0214 	add.w	r2, r4, #20
 800b564:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b568:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b56c:	9302      	str	r3, [sp, #8]
 800b56e:	1b13      	subs	r3, r2, r4
 800b570:	3b15      	subs	r3, #21
 800b572:	f023 0303 	bic.w	r3, r3, #3
 800b576:	3304      	adds	r3, #4
 800b578:	f104 0715 	add.w	r7, r4, #21
 800b57c:	42ba      	cmp	r2, r7
 800b57e:	bf38      	it	cc
 800b580:	2304      	movcc	r3, #4
 800b582:	9301      	str	r3, [sp, #4]
 800b584:	9b02      	ldr	r3, [sp, #8]
 800b586:	9103      	str	r1, [sp, #12]
 800b588:	428b      	cmp	r3, r1
 800b58a:	d80c      	bhi.n	800b5a6 <__multiply+0x9e>
 800b58c:	2e00      	cmp	r6, #0
 800b58e:	dd03      	ble.n	800b598 <__multiply+0x90>
 800b590:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b594:	2b00      	cmp	r3, #0
 800b596:	d05b      	beq.n	800b650 <__multiply+0x148>
 800b598:	6106      	str	r6, [r0, #16]
 800b59a:	b005      	add	sp, #20
 800b59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5a0:	f843 2b04 	str.w	r2, [r3], #4
 800b5a4:	e7d8      	b.n	800b558 <__multiply+0x50>
 800b5a6:	f8b1 a000 	ldrh.w	sl, [r1]
 800b5aa:	f1ba 0f00 	cmp.w	sl, #0
 800b5ae:	d024      	beq.n	800b5fa <__multiply+0xf2>
 800b5b0:	f104 0e14 	add.w	lr, r4, #20
 800b5b4:	46a9      	mov	r9, r5
 800b5b6:	f04f 0c00 	mov.w	ip, #0
 800b5ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b5be:	f8d9 3000 	ldr.w	r3, [r9]
 800b5c2:	fa1f fb87 	uxth.w	fp, r7
 800b5c6:	b29b      	uxth	r3, r3
 800b5c8:	fb0a 330b 	mla	r3, sl, fp, r3
 800b5cc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b5d0:	f8d9 7000 	ldr.w	r7, [r9]
 800b5d4:	4463      	add	r3, ip
 800b5d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b5da:	fb0a c70b 	mla	r7, sl, fp, ip
 800b5de:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b5e8:	4572      	cmp	r2, lr
 800b5ea:	f849 3b04 	str.w	r3, [r9], #4
 800b5ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b5f2:	d8e2      	bhi.n	800b5ba <__multiply+0xb2>
 800b5f4:	9b01      	ldr	r3, [sp, #4]
 800b5f6:	f845 c003 	str.w	ip, [r5, r3]
 800b5fa:	9b03      	ldr	r3, [sp, #12]
 800b5fc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b600:	3104      	adds	r1, #4
 800b602:	f1b9 0f00 	cmp.w	r9, #0
 800b606:	d021      	beq.n	800b64c <__multiply+0x144>
 800b608:	682b      	ldr	r3, [r5, #0]
 800b60a:	f104 0c14 	add.w	ip, r4, #20
 800b60e:	46ae      	mov	lr, r5
 800b610:	f04f 0a00 	mov.w	sl, #0
 800b614:	f8bc b000 	ldrh.w	fp, [ip]
 800b618:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b61c:	fb09 770b 	mla	r7, r9, fp, r7
 800b620:	4457      	add	r7, sl
 800b622:	b29b      	uxth	r3, r3
 800b624:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b628:	f84e 3b04 	str.w	r3, [lr], #4
 800b62c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b630:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b634:	f8be 3000 	ldrh.w	r3, [lr]
 800b638:	fb09 330a 	mla	r3, r9, sl, r3
 800b63c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b640:	4562      	cmp	r2, ip
 800b642:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b646:	d8e5      	bhi.n	800b614 <__multiply+0x10c>
 800b648:	9f01      	ldr	r7, [sp, #4]
 800b64a:	51eb      	str	r3, [r5, r7]
 800b64c:	3504      	adds	r5, #4
 800b64e:	e799      	b.n	800b584 <__multiply+0x7c>
 800b650:	3e01      	subs	r6, #1
 800b652:	e79b      	b.n	800b58c <__multiply+0x84>
 800b654:	0800c700 	.word	0x0800c700
 800b658:	0800c711 	.word	0x0800c711

0800b65c <__pow5mult>:
 800b65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b660:	4615      	mov	r5, r2
 800b662:	f012 0203 	ands.w	r2, r2, #3
 800b666:	4607      	mov	r7, r0
 800b668:	460e      	mov	r6, r1
 800b66a:	d007      	beq.n	800b67c <__pow5mult+0x20>
 800b66c:	4c25      	ldr	r4, [pc, #148]	@ (800b704 <__pow5mult+0xa8>)
 800b66e:	3a01      	subs	r2, #1
 800b670:	2300      	movs	r3, #0
 800b672:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b676:	f7ff fe9f 	bl	800b3b8 <__multadd>
 800b67a:	4606      	mov	r6, r0
 800b67c:	10ad      	asrs	r5, r5, #2
 800b67e:	d03d      	beq.n	800b6fc <__pow5mult+0xa0>
 800b680:	69fc      	ldr	r4, [r7, #28]
 800b682:	b97c      	cbnz	r4, 800b6a4 <__pow5mult+0x48>
 800b684:	2010      	movs	r0, #16
 800b686:	f7fe f867 	bl	8009758 <malloc>
 800b68a:	4602      	mov	r2, r0
 800b68c:	61f8      	str	r0, [r7, #28]
 800b68e:	b928      	cbnz	r0, 800b69c <__pow5mult+0x40>
 800b690:	4b1d      	ldr	r3, [pc, #116]	@ (800b708 <__pow5mult+0xac>)
 800b692:	481e      	ldr	r0, [pc, #120]	@ (800b70c <__pow5mult+0xb0>)
 800b694:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b698:	f000 fbcc 	bl	800be34 <__assert_func>
 800b69c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b6a0:	6004      	str	r4, [r0, #0]
 800b6a2:	60c4      	str	r4, [r0, #12]
 800b6a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b6a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b6ac:	b94c      	cbnz	r4, 800b6c2 <__pow5mult+0x66>
 800b6ae:	f240 2171 	movw	r1, #625	@ 0x271
 800b6b2:	4638      	mov	r0, r7
 800b6b4:	f7ff ff12 	bl	800b4dc <__i2b>
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800b6be:	4604      	mov	r4, r0
 800b6c0:	6003      	str	r3, [r0, #0]
 800b6c2:	f04f 0900 	mov.w	r9, #0
 800b6c6:	07eb      	lsls	r3, r5, #31
 800b6c8:	d50a      	bpl.n	800b6e0 <__pow5mult+0x84>
 800b6ca:	4631      	mov	r1, r6
 800b6cc:	4622      	mov	r2, r4
 800b6ce:	4638      	mov	r0, r7
 800b6d0:	f7ff ff1a 	bl	800b508 <__multiply>
 800b6d4:	4631      	mov	r1, r6
 800b6d6:	4680      	mov	r8, r0
 800b6d8:	4638      	mov	r0, r7
 800b6da:	f7ff fe4b 	bl	800b374 <_Bfree>
 800b6de:	4646      	mov	r6, r8
 800b6e0:	106d      	asrs	r5, r5, #1
 800b6e2:	d00b      	beq.n	800b6fc <__pow5mult+0xa0>
 800b6e4:	6820      	ldr	r0, [r4, #0]
 800b6e6:	b938      	cbnz	r0, 800b6f8 <__pow5mult+0x9c>
 800b6e8:	4622      	mov	r2, r4
 800b6ea:	4621      	mov	r1, r4
 800b6ec:	4638      	mov	r0, r7
 800b6ee:	f7ff ff0b 	bl	800b508 <__multiply>
 800b6f2:	6020      	str	r0, [r4, #0]
 800b6f4:	f8c0 9000 	str.w	r9, [r0]
 800b6f8:	4604      	mov	r4, r0
 800b6fa:	e7e4      	b.n	800b6c6 <__pow5mult+0x6a>
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b702:	bf00      	nop
 800b704:	0800c76c 	.word	0x0800c76c
 800b708:	0800c691 	.word	0x0800c691
 800b70c:	0800c711 	.word	0x0800c711

0800b710 <__lshift>:
 800b710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b714:	460c      	mov	r4, r1
 800b716:	6849      	ldr	r1, [r1, #4]
 800b718:	6923      	ldr	r3, [r4, #16]
 800b71a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b71e:	68a3      	ldr	r3, [r4, #8]
 800b720:	4607      	mov	r7, r0
 800b722:	4691      	mov	r9, r2
 800b724:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b728:	f108 0601 	add.w	r6, r8, #1
 800b72c:	42b3      	cmp	r3, r6
 800b72e:	db0b      	blt.n	800b748 <__lshift+0x38>
 800b730:	4638      	mov	r0, r7
 800b732:	f7ff fddf 	bl	800b2f4 <_Balloc>
 800b736:	4605      	mov	r5, r0
 800b738:	b948      	cbnz	r0, 800b74e <__lshift+0x3e>
 800b73a:	4602      	mov	r2, r0
 800b73c:	4b28      	ldr	r3, [pc, #160]	@ (800b7e0 <__lshift+0xd0>)
 800b73e:	4829      	ldr	r0, [pc, #164]	@ (800b7e4 <__lshift+0xd4>)
 800b740:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b744:	f000 fb76 	bl	800be34 <__assert_func>
 800b748:	3101      	adds	r1, #1
 800b74a:	005b      	lsls	r3, r3, #1
 800b74c:	e7ee      	b.n	800b72c <__lshift+0x1c>
 800b74e:	2300      	movs	r3, #0
 800b750:	f100 0114 	add.w	r1, r0, #20
 800b754:	f100 0210 	add.w	r2, r0, #16
 800b758:	4618      	mov	r0, r3
 800b75a:	4553      	cmp	r3, sl
 800b75c:	db33      	blt.n	800b7c6 <__lshift+0xb6>
 800b75e:	6920      	ldr	r0, [r4, #16]
 800b760:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b764:	f104 0314 	add.w	r3, r4, #20
 800b768:	f019 091f 	ands.w	r9, r9, #31
 800b76c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b770:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b774:	d02b      	beq.n	800b7ce <__lshift+0xbe>
 800b776:	f1c9 0e20 	rsb	lr, r9, #32
 800b77a:	468a      	mov	sl, r1
 800b77c:	2200      	movs	r2, #0
 800b77e:	6818      	ldr	r0, [r3, #0]
 800b780:	fa00 f009 	lsl.w	r0, r0, r9
 800b784:	4310      	orrs	r0, r2
 800b786:	f84a 0b04 	str.w	r0, [sl], #4
 800b78a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b78e:	459c      	cmp	ip, r3
 800b790:	fa22 f20e 	lsr.w	r2, r2, lr
 800b794:	d8f3      	bhi.n	800b77e <__lshift+0x6e>
 800b796:	ebac 0304 	sub.w	r3, ip, r4
 800b79a:	3b15      	subs	r3, #21
 800b79c:	f023 0303 	bic.w	r3, r3, #3
 800b7a0:	3304      	adds	r3, #4
 800b7a2:	f104 0015 	add.w	r0, r4, #21
 800b7a6:	4584      	cmp	ip, r0
 800b7a8:	bf38      	it	cc
 800b7aa:	2304      	movcc	r3, #4
 800b7ac:	50ca      	str	r2, [r1, r3]
 800b7ae:	b10a      	cbz	r2, 800b7b4 <__lshift+0xa4>
 800b7b0:	f108 0602 	add.w	r6, r8, #2
 800b7b4:	3e01      	subs	r6, #1
 800b7b6:	4638      	mov	r0, r7
 800b7b8:	612e      	str	r6, [r5, #16]
 800b7ba:	4621      	mov	r1, r4
 800b7bc:	f7ff fdda 	bl	800b374 <_Bfree>
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	e7c5      	b.n	800b75a <__lshift+0x4a>
 800b7ce:	3904      	subs	r1, #4
 800b7d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b7d8:	459c      	cmp	ip, r3
 800b7da:	d8f9      	bhi.n	800b7d0 <__lshift+0xc0>
 800b7dc:	e7ea      	b.n	800b7b4 <__lshift+0xa4>
 800b7de:	bf00      	nop
 800b7e0:	0800c700 	.word	0x0800c700
 800b7e4:	0800c711 	.word	0x0800c711

0800b7e8 <__mcmp>:
 800b7e8:	690a      	ldr	r2, [r1, #16]
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	6900      	ldr	r0, [r0, #16]
 800b7ee:	1a80      	subs	r0, r0, r2
 800b7f0:	b530      	push	{r4, r5, lr}
 800b7f2:	d10e      	bne.n	800b812 <__mcmp+0x2a>
 800b7f4:	3314      	adds	r3, #20
 800b7f6:	3114      	adds	r1, #20
 800b7f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b7fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b800:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b804:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b808:	4295      	cmp	r5, r2
 800b80a:	d003      	beq.n	800b814 <__mcmp+0x2c>
 800b80c:	d205      	bcs.n	800b81a <__mcmp+0x32>
 800b80e:	f04f 30ff 	mov.w	r0, #4294967295
 800b812:	bd30      	pop	{r4, r5, pc}
 800b814:	42a3      	cmp	r3, r4
 800b816:	d3f3      	bcc.n	800b800 <__mcmp+0x18>
 800b818:	e7fb      	b.n	800b812 <__mcmp+0x2a>
 800b81a:	2001      	movs	r0, #1
 800b81c:	e7f9      	b.n	800b812 <__mcmp+0x2a>
	...

0800b820 <__mdiff>:
 800b820:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b824:	4689      	mov	r9, r1
 800b826:	4606      	mov	r6, r0
 800b828:	4611      	mov	r1, r2
 800b82a:	4648      	mov	r0, r9
 800b82c:	4614      	mov	r4, r2
 800b82e:	f7ff ffdb 	bl	800b7e8 <__mcmp>
 800b832:	1e05      	subs	r5, r0, #0
 800b834:	d112      	bne.n	800b85c <__mdiff+0x3c>
 800b836:	4629      	mov	r1, r5
 800b838:	4630      	mov	r0, r6
 800b83a:	f7ff fd5b 	bl	800b2f4 <_Balloc>
 800b83e:	4602      	mov	r2, r0
 800b840:	b928      	cbnz	r0, 800b84e <__mdiff+0x2e>
 800b842:	4b3f      	ldr	r3, [pc, #252]	@ (800b940 <__mdiff+0x120>)
 800b844:	f240 2137 	movw	r1, #567	@ 0x237
 800b848:	483e      	ldr	r0, [pc, #248]	@ (800b944 <__mdiff+0x124>)
 800b84a:	f000 faf3 	bl	800be34 <__assert_func>
 800b84e:	2301      	movs	r3, #1
 800b850:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b854:	4610      	mov	r0, r2
 800b856:	b003      	add	sp, #12
 800b858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b85c:	bfbc      	itt	lt
 800b85e:	464b      	movlt	r3, r9
 800b860:	46a1      	movlt	r9, r4
 800b862:	4630      	mov	r0, r6
 800b864:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b868:	bfba      	itte	lt
 800b86a:	461c      	movlt	r4, r3
 800b86c:	2501      	movlt	r5, #1
 800b86e:	2500      	movge	r5, #0
 800b870:	f7ff fd40 	bl	800b2f4 <_Balloc>
 800b874:	4602      	mov	r2, r0
 800b876:	b918      	cbnz	r0, 800b880 <__mdiff+0x60>
 800b878:	4b31      	ldr	r3, [pc, #196]	@ (800b940 <__mdiff+0x120>)
 800b87a:	f240 2145 	movw	r1, #581	@ 0x245
 800b87e:	e7e3      	b.n	800b848 <__mdiff+0x28>
 800b880:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b884:	6926      	ldr	r6, [r4, #16]
 800b886:	60c5      	str	r5, [r0, #12]
 800b888:	f109 0310 	add.w	r3, r9, #16
 800b88c:	f109 0514 	add.w	r5, r9, #20
 800b890:	f104 0e14 	add.w	lr, r4, #20
 800b894:	f100 0b14 	add.w	fp, r0, #20
 800b898:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b89c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b8a0:	9301      	str	r3, [sp, #4]
 800b8a2:	46d9      	mov	r9, fp
 800b8a4:	f04f 0c00 	mov.w	ip, #0
 800b8a8:	9b01      	ldr	r3, [sp, #4]
 800b8aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b8ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b8b2:	9301      	str	r3, [sp, #4]
 800b8b4:	fa1f f38a 	uxth.w	r3, sl
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	b283      	uxth	r3, r0
 800b8bc:	1acb      	subs	r3, r1, r3
 800b8be:	0c00      	lsrs	r0, r0, #16
 800b8c0:	4463      	add	r3, ip
 800b8c2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b8c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b8d0:	4576      	cmp	r6, lr
 800b8d2:	f849 3b04 	str.w	r3, [r9], #4
 800b8d6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b8da:	d8e5      	bhi.n	800b8a8 <__mdiff+0x88>
 800b8dc:	1b33      	subs	r3, r6, r4
 800b8de:	3b15      	subs	r3, #21
 800b8e0:	f023 0303 	bic.w	r3, r3, #3
 800b8e4:	3415      	adds	r4, #21
 800b8e6:	3304      	adds	r3, #4
 800b8e8:	42a6      	cmp	r6, r4
 800b8ea:	bf38      	it	cc
 800b8ec:	2304      	movcc	r3, #4
 800b8ee:	441d      	add	r5, r3
 800b8f0:	445b      	add	r3, fp
 800b8f2:	461e      	mov	r6, r3
 800b8f4:	462c      	mov	r4, r5
 800b8f6:	4544      	cmp	r4, r8
 800b8f8:	d30e      	bcc.n	800b918 <__mdiff+0xf8>
 800b8fa:	f108 0103 	add.w	r1, r8, #3
 800b8fe:	1b49      	subs	r1, r1, r5
 800b900:	f021 0103 	bic.w	r1, r1, #3
 800b904:	3d03      	subs	r5, #3
 800b906:	45a8      	cmp	r8, r5
 800b908:	bf38      	it	cc
 800b90a:	2100      	movcc	r1, #0
 800b90c:	440b      	add	r3, r1
 800b90e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b912:	b191      	cbz	r1, 800b93a <__mdiff+0x11a>
 800b914:	6117      	str	r7, [r2, #16]
 800b916:	e79d      	b.n	800b854 <__mdiff+0x34>
 800b918:	f854 1b04 	ldr.w	r1, [r4], #4
 800b91c:	46e6      	mov	lr, ip
 800b91e:	0c08      	lsrs	r0, r1, #16
 800b920:	fa1c fc81 	uxtah	ip, ip, r1
 800b924:	4471      	add	r1, lr
 800b926:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b92a:	b289      	uxth	r1, r1
 800b92c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b930:	f846 1b04 	str.w	r1, [r6], #4
 800b934:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b938:	e7dd      	b.n	800b8f6 <__mdiff+0xd6>
 800b93a:	3f01      	subs	r7, #1
 800b93c:	e7e7      	b.n	800b90e <__mdiff+0xee>
 800b93e:	bf00      	nop
 800b940:	0800c700 	.word	0x0800c700
 800b944:	0800c711 	.word	0x0800c711

0800b948 <__d2b>:
 800b948:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b94c:	460f      	mov	r7, r1
 800b94e:	2101      	movs	r1, #1
 800b950:	ec59 8b10 	vmov	r8, r9, d0
 800b954:	4616      	mov	r6, r2
 800b956:	f7ff fccd 	bl	800b2f4 <_Balloc>
 800b95a:	4604      	mov	r4, r0
 800b95c:	b930      	cbnz	r0, 800b96c <__d2b+0x24>
 800b95e:	4602      	mov	r2, r0
 800b960:	4b23      	ldr	r3, [pc, #140]	@ (800b9f0 <__d2b+0xa8>)
 800b962:	4824      	ldr	r0, [pc, #144]	@ (800b9f4 <__d2b+0xac>)
 800b964:	f240 310f 	movw	r1, #783	@ 0x30f
 800b968:	f000 fa64 	bl	800be34 <__assert_func>
 800b96c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b970:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b974:	b10d      	cbz	r5, 800b97a <__d2b+0x32>
 800b976:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b97a:	9301      	str	r3, [sp, #4]
 800b97c:	f1b8 0300 	subs.w	r3, r8, #0
 800b980:	d023      	beq.n	800b9ca <__d2b+0x82>
 800b982:	4668      	mov	r0, sp
 800b984:	9300      	str	r3, [sp, #0]
 800b986:	f7ff fd7c 	bl	800b482 <__lo0bits>
 800b98a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b98e:	b1d0      	cbz	r0, 800b9c6 <__d2b+0x7e>
 800b990:	f1c0 0320 	rsb	r3, r0, #32
 800b994:	fa02 f303 	lsl.w	r3, r2, r3
 800b998:	430b      	orrs	r3, r1
 800b99a:	40c2      	lsrs	r2, r0
 800b99c:	6163      	str	r3, [r4, #20]
 800b99e:	9201      	str	r2, [sp, #4]
 800b9a0:	9b01      	ldr	r3, [sp, #4]
 800b9a2:	61a3      	str	r3, [r4, #24]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	bf0c      	ite	eq
 800b9a8:	2201      	moveq	r2, #1
 800b9aa:	2202      	movne	r2, #2
 800b9ac:	6122      	str	r2, [r4, #16]
 800b9ae:	b1a5      	cbz	r5, 800b9da <__d2b+0x92>
 800b9b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b9b4:	4405      	add	r5, r0
 800b9b6:	603d      	str	r5, [r7, #0]
 800b9b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b9bc:	6030      	str	r0, [r6, #0]
 800b9be:	4620      	mov	r0, r4
 800b9c0:	b003      	add	sp, #12
 800b9c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9c6:	6161      	str	r1, [r4, #20]
 800b9c8:	e7ea      	b.n	800b9a0 <__d2b+0x58>
 800b9ca:	a801      	add	r0, sp, #4
 800b9cc:	f7ff fd59 	bl	800b482 <__lo0bits>
 800b9d0:	9b01      	ldr	r3, [sp, #4]
 800b9d2:	6163      	str	r3, [r4, #20]
 800b9d4:	3020      	adds	r0, #32
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	e7e8      	b.n	800b9ac <__d2b+0x64>
 800b9da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b9de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b9e2:	6038      	str	r0, [r7, #0]
 800b9e4:	6918      	ldr	r0, [r3, #16]
 800b9e6:	f7ff fd2d 	bl	800b444 <__hi0bits>
 800b9ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b9ee:	e7e5      	b.n	800b9bc <__d2b+0x74>
 800b9f0:	0800c700 	.word	0x0800c700
 800b9f4:	0800c711 	.word	0x0800c711

0800b9f8 <__ssputs_r>:
 800b9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9fc:	688e      	ldr	r6, [r1, #8]
 800b9fe:	461f      	mov	r7, r3
 800ba00:	42be      	cmp	r6, r7
 800ba02:	680b      	ldr	r3, [r1, #0]
 800ba04:	4682      	mov	sl, r0
 800ba06:	460c      	mov	r4, r1
 800ba08:	4690      	mov	r8, r2
 800ba0a:	d82d      	bhi.n	800ba68 <__ssputs_r+0x70>
 800ba0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ba14:	d026      	beq.n	800ba64 <__ssputs_r+0x6c>
 800ba16:	6965      	ldr	r5, [r4, #20]
 800ba18:	6909      	ldr	r1, [r1, #16]
 800ba1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba1e:	eba3 0901 	sub.w	r9, r3, r1
 800ba22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba26:	1c7b      	adds	r3, r7, #1
 800ba28:	444b      	add	r3, r9
 800ba2a:	106d      	asrs	r5, r5, #1
 800ba2c:	429d      	cmp	r5, r3
 800ba2e:	bf38      	it	cc
 800ba30:	461d      	movcc	r5, r3
 800ba32:	0553      	lsls	r3, r2, #21
 800ba34:	d527      	bpl.n	800ba86 <__ssputs_r+0x8e>
 800ba36:	4629      	mov	r1, r5
 800ba38:	f7fd feb8 	bl	80097ac <_malloc_r>
 800ba3c:	4606      	mov	r6, r0
 800ba3e:	b360      	cbz	r0, 800ba9a <__ssputs_r+0xa2>
 800ba40:	6921      	ldr	r1, [r4, #16]
 800ba42:	464a      	mov	r2, r9
 800ba44:	f7fe fdaf 	bl	800a5a6 <memcpy>
 800ba48:	89a3      	ldrh	r3, [r4, #12]
 800ba4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ba4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba52:	81a3      	strh	r3, [r4, #12]
 800ba54:	6126      	str	r6, [r4, #16]
 800ba56:	6165      	str	r5, [r4, #20]
 800ba58:	444e      	add	r6, r9
 800ba5a:	eba5 0509 	sub.w	r5, r5, r9
 800ba5e:	6026      	str	r6, [r4, #0]
 800ba60:	60a5      	str	r5, [r4, #8]
 800ba62:	463e      	mov	r6, r7
 800ba64:	42be      	cmp	r6, r7
 800ba66:	d900      	bls.n	800ba6a <__ssputs_r+0x72>
 800ba68:	463e      	mov	r6, r7
 800ba6a:	6820      	ldr	r0, [r4, #0]
 800ba6c:	4632      	mov	r2, r6
 800ba6e:	4641      	mov	r1, r8
 800ba70:	f000 f9c6 	bl	800be00 <memmove>
 800ba74:	68a3      	ldr	r3, [r4, #8]
 800ba76:	1b9b      	subs	r3, r3, r6
 800ba78:	60a3      	str	r3, [r4, #8]
 800ba7a:	6823      	ldr	r3, [r4, #0]
 800ba7c:	4433      	add	r3, r6
 800ba7e:	6023      	str	r3, [r4, #0]
 800ba80:	2000      	movs	r0, #0
 800ba82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba86:	462a      	mov	r2, r5
 800ba88:	f000 fa18 	bl	800bebc <_realloc_r>
 800ba8c:	4606      	mov	r6, r0
 800ba8e:	2800      	cmp	r0, #0
 800ba90:	d1e0      	bne.n	800ba54 <__ssputs_r+0x5c>
 800ba92:	6921      	ldr	r1, [r4, #16]
 800ba94:	4650      	mov	r0, sl
 800ba96:	f7ff fbe3 	bl	800b260 <_free_r>
 800ba9a:	230c      	movs	r3, #12
 800ba9c:	f8ca 3000 	str.w	r3, [sl]
 800baa0:	89a3      	ldrh	r3, [r4, #12]
 800baa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800baa6:	81a3      	strh	r3, [r4, #12]
 800baa8:	f04f 30ff 	mov.w	r0, #4294967295
 800baac:	e7e9      	b.n	800ba82 <__ssputs_r+0x8a>
	...

0800bab0 <_svfiprintf_r>:
 800bab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab4:	4698      	mov	r8, r3
 800bab6:	898b      	ldrh	r3, [r1, #12]
 800bab8:	061b      	lsls	r3, r3, #24
 800baba:	b09d      	sub	sp, #116	@ 0x74
 800babc:	4607      	mov	r7, r0
 800babe:	460d      	mov	r5, r1
 800bac0:	4614      	mov	r4, r2
 800bac2:	d510      	bpl.n	800bae6 <_svfiprintf_r+0x36>
 800bac4:	690b      	ldr	r3, [r1, #16]
 800bac6:	b973      	cbnz	r3, 800bae6 <_svfiprintf_r+0x36>
 800bac8:	2140      	movs	r1, #64	@ 0x40
 800baca:	f7fd fe6f 	bl	80097ac <_malloc_r>
 800bace:	6028      	str	r0, [r5, #0]
 800bad0:	6128      	str	r0, [r5, #16]
 800bad2:	b930      	cbnz	r0, 800bae2 <_svfiprintf_r+0x32>
 800bad4:	230c      	movs	r3, #12
 800bad6:	603b      	str	r3, [r7, #0]
 800bad8:	f04f 30ff 	mov.w	r0, #4294967295
 800badc:	b01d      	add	sp, #116	@ 0x74
 800bade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae2:	2340      	movs	r3, #64	@ 0x40
 800bae4:	616b      	str	r3, [r5, #20]
 800bae6:	2300      	movs	r3, #0
 800bae8:	9309      	str	r3, [sp, #36]	@ 0x24
 800baea:	2320      	movs	r3, #32
 800baec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800baf0:	f8cd 800c 	str.w	r8, [sp, #12]
 800baf4:	2330      	movs	r3, #48	@ 0x30
 800baf6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bc94 <_svfiprintf_r+0x1e4>
 800bafa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bafe:	f04f 0901 	mov.w	r9, #1
 800bb02:	4623      	mov	r3, r4
 800bb04:	469a      	mov	sl, r3
 800bb06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb0a:	b10a      	cbz	r2, 800bb10 <_svfiprintf_r+0x60>
 800bb0c:	2a25      	cmp	r2, #37	@ 0x25
 800bb0e:	d1f9      	bne.n	800bb04 <_svfiprintf_r+0x54>
 800bb10:	ebba 0b04 	subs.w	fp, sl, r4
 800bb14:	d00b      	beq.n	800bb2e <_svfiprintf_r+0x7e>
 800bb16:	465b      	mov	r3, fp
 800bb18:	4622      	mov	r2, r4
 800bb1a:	4629      	mov	r1, r5
 800bb1c:	4638      	mov	r0, r7
 800bb1e:	f7ff ff6b 	bl	800b9f8 <__ssputs_r>
 800bb22:	3001      	adds	r0, #1
 800bb24:	f000 80a7 	beq.w	800bc76 <_svfiprintf_r+0x1c6>
 800bb28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb2a:	445a      	add	r2, fp
 800bb2c:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb2e:	f89a 3000 	ldrb.w	r3, [sl]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	f000 809f 	beq.w	800bc76 <_svfiprintf_r+0x1c6>
 800bb38:	2300      	movs	r3, #0
 800bb3a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb42:	f10a 0a01 	add.w	sl, sl, #1
 800bb46:	9304      	str	r3, [sp, #16]
 800bb48:	9307      	str	r3, [sp, #28]
 800bb4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb4e:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb50:	4654      	mov	r4, sl
 800bb52:	2205      	movs	r2, #5
 800bb54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb58:	484e      	ldr	r0, [pc, #312]	@ (800bc94 <_svfiprintf_r+0x1e4>)
 800bb5a:	f7f4 fb59 	bl	8000210 <memchr>
 800bb5e:	9a04      	ldr	r2, [sp, #16]
 800bb60:	b9d8      	cbnz	r0, 800bb9a <_svfiprintf_r+0xea>
 800bb62:	06d0      	lsls	r0, r2, #27
 800bb64:	bf44      	itt	mi
 800bb66:	2320      	movmi	r3, #32
 800bb68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb6c:	0711      	lsls	r1, r2, #28
 800bb6e:	bf44      	itt	mi
 800bb70:	232b      	movmi	r3, #43	@ 0x2b
 800bb72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb76:	f89a 3000 	ldrb.w	r3, [sl]
 800bb7a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb7c:	d015      	beq.n	800bbaa <_svfiprintf_r+0xfa>
 800bb7e:	9a07      	ldr	r2, [sp, #28]
 800bb80:	4654      	mov	r4, sl
 800bb82:	2000      	movs	r0, #0
 800bb84:	f04f 0c0a 	mov.w	ip, #10
 800bb88:	4621      	mov	r1, r4
 800bb8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb8e:	3b30      	subs	r3, #48	@ 0x30
 800bb90:	2b09      	cmp	r3, #9
 800bb92:	d94b      	bls.n	800bc2c <_svfiprintf_r+0x17c>
 800bb94:	b1b0      	cbz	r0, 800bbc4 <_svfiprintf_r+0x114>
 800bb96:	9207      	str	r2, [sp, #28]
 800bb98:	e014      	b.n	800bbc4 <_svfiprintf_r+0x114>
 800bb9a:	eba0 0308 	sub.w	r3, r0, r8
 800bb9e:	fa09 f303 	lsl.w	r3, r9, r3
 800bba2:	4313      	orrs	r3, r2
 800bba4:	9304      	str	r3, [sp, #16]
 800bba6:	46a2      	mov	sl, r4
 800bba8:	e7d2      	b.n	800bb50 <_svfiprintf_r+0xa0>
 800bbaa:	9b03      	ldr	r3, [sp, #12]
 800bbac:	1d19      	adds	r1, r3, #4
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	9103      	str	r1, [sp, #12]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	bfbb      	ittet	lt
 800bbb6:	425b      	neglt	r3, r3
 800bbb8:	f042 0202 	orrlt.w	r2, r2, #2
 800bbbc:	9307      	strge	r3, [sp, #28]
 800bbbe:	9307      	strlt	r3, [sp, #28]
 800bbc0:	bfb8      	it	lt
 800bbc2:	9204      	strlt	r2, [sp, #16]
 800bbc4:	7823      	ldrb	r3, [r4, #0]
 800bbc6:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbc8:	d10a      	bne.n	800bbe0 <_svfiprintf_r+0x130>
 800bbca:	7863      	ldrb	r3, [r4, #1]
 800bbcc:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbce:	d132      	bne.n	800bc36 <_svfiprintf_r+0x186>
 800bbd0:	9b03      	ldr	r3, [sp, #12]
 800bbd2:	1d1a      	adds	r2, r3, #4
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	9203      	str	r2, [sp, #12]
 800bbd8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bbdc:	3402      	adds	r4, #2
 800bbde:	9305      	str	r3, [sp, #20]
 800bbe0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bca4 <_svfiprintf_r+0x1f4>
 800bbe4:	7821      	ldrb	r1, [r4, #0]
 800bbe6:	2203      	movs	r2, #3
 800bbe8:	4650      	mov	r0, sl
 800bbea:	f7f4 fb11 	bl	8000210 <memchr>
 800bbee:	b138      	cbz	r0, 800bc00 <_svfiprintf_r+0x150>
 800bbf0:	9b04      	ldr	r3, [sp, #16]
 800bbf2:	eba0 000a 	sub.w	r0, r0, sl
 800bbf6:	2240      	movs	r2, #64	@ 0x40
 800bbf8:	4082      	lsls	r2, r0
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	3401      	adds	r4, #1
 800bbfe:	9304      	str	r3, [sp, #16]
 800bc00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc04:	4824      	ldr	r0, [pc, #144]	@ (800bc98 <_svfiprintf_r+0x1e8>)
 800bc06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc0a:	2206      	movs	r2, #6
 800bc0c:	f7f4 fb00 	bl	8000210 <memchr>
 800bc10:	2800      	cmp	r0, #0
 800bc12:	d036      	beq.n	800bc82 <_svfiprintf_r+0x1d2>
 800bc14:	4b21      	ldr	r3, [pc, #132]	@ (800bc9c <_svfiprintf_r+0x1ec>)
 800bc16:	bb1b      	cbnz	r3, 800bc60 <_svfiprintf_r+0x1b0>
 800bc18:	9b03      	ldr	r3, [sp, #12]
 800bc1a:	3307      	adds	r3, #7
 800bc1c:	f023 0307 	bic.w	r3, r3, #7
 800bc20:	3308      	adds	r3, #8
 800bc22:	9303      	str	r3, [sp, #12]
 800bc24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc26:	4433      	add	r3, r6
 800bc28:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc2a:	e76a      	b.n	800bb02 <_svfiprintf_r+0x52>
 800bc2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc30:	460c      	mov	r4, r1
 800bc32:	2001      	movs	r0, #1
 800bc34:	e7a8      	b.n	800bb88 <_svfiprintf_r+0xd8>
 800bc36:	2300      	movs	r3, #0
 800bc38:	3401      	adds	r4, #1
 800bc3a:	9305      	str	r3, [sp, #20]
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	f04f 0c0a 	mov.w	ip, #10
 800bc42:	4620      	mov	r0, r4
 800bc44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc48:	3a30      	subs	r2, #48	@ 0x30
 800bc4a:	2a09      	cmp	r2, #9
 800bc4c:	d903      	bls.n	800bc56 <_svfiprintf_r+0x1a6>
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d0c6      	beq.n	800bbe0 <_svfiprintf_r+0x130>
 800bc52:	9105      	str	r1, [sp, #20]
 800bc54:	e7c4      	b.n	800bbe0 <_svfiprintf_r+0x130>
 800bc56:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	e7f0      	b.n	800bc42 <_svfiprintf_r+0x192>
 800bc60:	ab03      	add	r3, sp, #12
 800bc62:	9300      	str	r3, [sp, #0]
 800bc64:	462a      	mov	r2, r5
 800bc66:	4b0e      	ldr	r3, [pc, #56]	@ (800bca0 <_svfiprintf_r+0x1f0>)
 800bc68:	a904      	add	r1, sp, #16
 800bc6a:	4638      	mov	r0, r7
 800bc6c:	f7fd feca 	bl	8009a04 <_printf_float>
 800bc70:	1c42      	adds	r2, r0, #1
 800bc72:	4606      	mov	r6, r0
 800bc74:	d1d6      	bne.n	800bc24 <_svfiprintf_r+0x174>
 800bc76:	89ab      	ldrh	r3, [r5, #12]
 800bc78:	065b      	lsls	r3, r3, #25
 800bc7a:	f53f af2d 	bmi.w	800bad8 <_svfiprintf_r+0x28>
 800bc7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc80:	e72c      	b.n	800badc <_svfiprintf_r+0x2c>
 800bc82:	ab03      	add	r3, sp, #12
 800bc84:	9300      	str	r3, [sp, #0]
 800bc86:	462a      	mov	r2, r5
 800bc88:	4b05      	ldr	r3, [pc, #20]	@ (800bca0 <_svfiprintf_r+0x1f0>)
 800bc8a:	a904      	add	r1, sp, #16
 800bc8c:	4638      	mov	r0, r7
 800bc8e:	f7fe f951 	bl	8009f34 <_printf_i>
 800bc92:	e7ed      	b.n	800bc70 <_svfiprintf_r+0x1c0>
 800bc94:	0800c868 	.word	0x0800c868
 800bc98:	0800c872 	.word	0x0800c872
 800bc9c:	08009a05 	.word	0x08009a05
 800bca0:	0800b9f9 	.word	0x0800b9f9
 800bca4:	0800c86e 	.word	0x0800c86e

0800bca8 <__sflush_r>:
 800bca8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bcac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb0:	0716      	lsls	r6, r2, #28
 800bcb2:	4605      	mov	r5, r0
 800bcb4:	460c      	mov	r4, r1
 800bcb6:	d454      	bmi.n	800bd62 <__sflush_r+0xba>
 800bcb8:	684b      	ldr	r3, [r1, #4]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	dc02      	bgt.n	800bcc4 <__sflush_r+0x1c>
 800bcbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	dd48      	ble.n	800bd56 <__sflush_r+0xae>
 800bcc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcc6:	2e00      	cmp	r6, #0
 800bcc8:	d045      	beq.n	800bd56 <__sflush_r+0xae>
 800bcca:	2300      	movs	r3, #0
 800bccc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bcd0:	682f      	ldr	r7, [r5, #0]
 800bcd2:	6a21      	ldr	r1, [r4, #32]
 800bcd4:	602b      	str	r3, [r5, #0]
 800bcd6:	d030      	beq.n	800bd3a <__sflush_r+0x92>
 800bcd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bcda:	89a3      	ldrh	r3, [r4, #12]
 800bcdc:	0759      	lsls	r1, r3, #29
 800bcde:	d505      	bpl.n	800bcec <__sflush_r+0x44>
 800bce0:	6863      	ldr	r3, [r4, #4]
 800bce2:	1ad2      	subs	r2, r2, r3
 800bce4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bce6:	b10b      	cbz	r3, 800bcec <__sflush_r+0x44>
 800bce8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bcea:	1ad2      	subs	r2, r2, r3
 800bcec:	2300      	movs	r3, #0
 800bcee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcf0:	6a21      	ldr	r1, [r4, #32]
 800bcf2:	4628      	mov	r0, r5
 800bcf4:	47b0      	blx	r6
 800bcf6:	1c43      	adds	r3, r0, #1
 800bcf8:	89a3      	ldrh	r3, [r4, #12]
 800bcfa:	d106      	bne.n	800bd0a <__sflush_r+0x62>
 800bcfc:	6829      	ldr	r1, [r5, #0]
 800bcfe:	291d      	cmp	r1, #29
 800bd00:	d82b      	bhi.n	800bd5a <__sflush_r+0xb2>
 800bd02:	4a2a      	ldr	r2, [pc, #168]	@ (800bdac <__sflush_r+0x104>)
 800bd04:	410a      	asrs	r2, r1
 800bd06:	07d6      	lsls	r6, r2, #31
 800bd08:	d427      	bmi.n	800bd5a <__sflush_r+0xb2>
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	6062      	str	r2, [r4, #4]
 800bd0e:	04d9      	lsls	r1, r3, #19
 800bd10:	6922      	ldr	r2, [r4, #16]
 800bd12:	6022      	str	r2, [r4, #0]
 800bd14:	d504      	bpl.n	800bd20 <__sflush_r+0x78>
 800bd16:	1c42      	adds	r2, r0, #1
 800bd18:	d101      	bne.n	800bd1e <__sflush_r+0x76>
 800bd1a:	682b      	ldr	r3, [r5, #0]
 800bd1c:	b903      	cbnz	r3, 800bd20 <__sflush_r+0x78>
 800bd1e:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd22:	602f      	str	r7, [r5, #0]
 800bd24:	b1b9      	cbz	r1, 800bd56 <__sflush_r+0xae>
 800bd26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd2a:	4299      	cmp	r1, r3
 800bd2c:	d002      	beq.n	800bd34 <__sflush_r+0x8c>
 800bd2e:	4628      	mov	r0, r5
 800bd30:	f7ff fa96 	bl	800b260 <_free_r>
 800bd34:	2300      	movs	r3, #0
 800bd36:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd38:	e00d      	b.n	800bd56 <__sflush_r+0xae>
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	4628      	mov	r0, r5
 800bd3e:	47b0      	blx	r6
 800bd40:	4602      	mov	r2, r0
 800bd42:	1c50      	adds	r0, r2, #1
 800bd44:	d1c9      	bne.n	800bcda <__sflush_r+0x32>
 800bd46:	682b      	ldr	r3, [r5, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d0c6      	beq.n	800bcda <__sflush_r+0x32>
 800bd4c:	2b1d      	cmp	r3, #29
 800bd4e:	d001      	beq.n	800bd54 <__sflush_r+0xac>
 800bd50:	2b16      	cmp	r3, #22
 800bd52:	d11e      	bne.n	800bd92 <__sflush_r+0xea>
 800bd54:	602f      	str	r7, [r5, #0]
 800bd56:	2000      	movs	r0, #0
 800bd58:	e022      	b.n	800bda0 <__sflush_r+0xf8>
 800bd5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd5e:	b21b      	sxth	r3, r3
 800bd60:	e01b      	b.n	800bd9a <__sflush_r+0xf2>
 800bd62:	690f      	ldr	r7, [r1, #16]
 800bd64:	2f00      	cmp	r7, #0
 800bd66:	d0f6      	beq.n	800bd56 <__sflush_r+0xae>
 800bd68:	0793      	lsls	r3, r2, #30
 800bd6a:	680e      	ldr	r6, [r1, #0]
 800bd6c:	bf08      	it	eq
 800bd6e:	694b      	ldreq	r3, [r1, #20]
 800bd70:	600f      	str	r7, [r1, #0]
 800bd72:	bf18      	it	ne
 800bd74:	2300      	movne	r3, #0
 800bd76:	eba6 0807 	sub.w	r8, r6, r7
 800bd7a:	608b      	str	r3, [r1, #8]
 800bd7c:	f1b8 0f00 	cmp.w	r8, #0
 800bd80:	dde9      	ble.n	800bd56 <__sflush_r+0xae>
 800bd82:	6a21      	ldr	r1, [r4, #32]
 800bd84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd86:	4643      	mov	r3, r8
 800bd88:	463a      	mov	r2, r7
 800bd8a:	4628      	mov	r0, r5
 800bd8c:	47b0      	blx	r6
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	dc08      	bgt.n	800bda4 <__sflush_r+0xfc>
 800bd92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd9a:	81a3      	strh	r3, [r4, #12]
 800bd9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bda4:	4407      	add	r7, r0
 800bda6:	eba8 0800 	sub.w	r8, r8, r0
 800bdaa:	e7e7      	b.n	800bd7c <__sflush_r+0xd4>
 800bdac:	dfbffffe 	.word	0xdfbffffe

0800bdb0 <_fflush_r>:
 800bdb0:	b538      	push	{r3, r4, r5, lr}
 800bdb2:	690b      	ldr	r3, [r1, #16]
 800bdb4:	4605      	mov	r5, r0
 800bdb6:	460c      	mov	r4, r1
 800bdb8:	b913      	cbnz	r3, 800bdc0 <_fflush_r+0x10>
 800bdba:	2500      	movs	r5, #0
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	bd38      	pop	{r3, r4, r5, pc}
 800bdc0:	b118      	cbz	r0, 800bdca <_fflush_r+0x1a>
 800bdc2:	6a03      	ldr	r3, [r0, #32]
 800bdc4:	b90b      	cbnz	r3, 800bdca <_fflush_r+0x1a>
 800bdc6:	f7fe fa61 	bl	800a28c <__sinit>
 800bdca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d0f3      	beq.n	800bdba <_fflush_r+0xa>
 800bdd2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bdd4:	07d0      	lsls	r0, r2, #31
 800bdd6:	d404      	bmi.n	800bde2 <_fflush_r+0x32>
 800bdd8:	0599      	lsls	r1, r3, #22
 800bdda:	d402      	bmi.n	800bde2 <_fflush_r+0x32>
 800bddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdde:	f7fe fbe0 	bl	800a5a2 <__retarget_lock_acquire_recursive>
 800bde2:	4628      	mov	r0, r5
 800bde4:	4621      	mov	r1, r4
 800bde6:	f7ff ff5f 	bl	800bca8 <__sflush_r>
 800bdea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bdec:	07da      	lsls	r2, r3, #31
 800bdee:	4605      	mov	r5, r0
 800bdf0:	d4e4      	bmi.n	800bdbc <_fflush_r+0xc>
 800bdf2:	89a3      	ldrh	r3, [r4, #12]
 800bdf4:	059b      	lsls	r3, r3, #22
 800bdf6:	d4e1      	bmi.n	800bdbc <_fflush_r+0xc>
 800bdf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdfa:	f7fe fbd3 	bl	800a5a4 <__retarget_lock_release_recursive>
 800bdfe:	e7dd      	b.n	800bdbc <_fflush_r+0xc>

0800be00 <memmove>:
 800be00:	4288      	cmp	r0, r1
 800be02:	b510      	push	{r4, lr}
 800be04:	eb01 0402 	add.w	r4, r1, r2
 800be08:	d902      	bls.n	800be10 <memmove+0x10>
 800be0a:	4284      	cmp	r4, r0
 800be0c:	4623      	mov	r3, r4
 800be0e:	d807      	bhi.n	800be20 <memmove+0x20>
 800be10:	1e43      	subs	r3, r0, #1
 800be12:	42a1      	cmp	r1, r4
 800be14:	d008      	beq.n	800be28 <memmove+0x28>
 800be16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be1e:	e7f8      	b.n	800be12 <memmove+0x12>
 800be20:	4402      	add	r2, r0
 800be22:	4601      	mov	r1, r0
 800be24:	428a      	cmp	r2, r1
 800be26:	d100      	bne.n	800be2a <memmove+0x2a>
 800be28:	bd10      	pop	{r4, pc}
 800be2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be32:	e7f7      	b.n	800be24 <memmove+0x24>

0800be34 <__assert_func>:
 800be34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be36:	4614      	mov	r4, r2
 800be38:	461a      	mov	r2, r3
 800be3a:	4b09      	ldr	r3, [pc, #36]	@ (800be60 <__assert_func+0x2c>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	4605      	mov	r5, r0
 800be40:	68d8      	ldr	r0, [r3, #12]
 800be42:	b954      	cbnz	r4, 800be5a <__assert_func+0x26>
 800be44:	4b07      	ldr	r3, [pc, #28]	@ (800be64 <__assert_func+0x30>)
 800be46:	461c      	mov	r4, r3
 800be48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be4c:	9100      	str	r1, [sp, #0]
 800be4e:	462b      	mov	r3, r5
 800be50:	4905      	ldr	r1, [pc, #20]	@ (800be68 <__assert_func+0x34>)
 800be52:	f000 f86f 	bl	800bf34 <fiprintf>
 800be56:	f000 f87f 	bl	800bf58 <abort>
 800be5a:	4b04      	ldr	r3, [pc, #16]	@ (800be6c <__assert_func+0x38>)
 800be5c:	e7f4      	b.n	800be48 <__assert_func+0x14>
 800be5e:	bf00      	nop
 800be60:	2000001c 	.word	0x2000001c
 800be64:	0800c8be 	.word	0x0800c8be
 800be68:	0800c890 	.word	0x0800c890
 800be6c:	0800c883 	.word	0x0800c883

0800be70 <_calloc_r>:
 800be70:	b570      	push	{r4, r5, r6, lr}
 800be72:	fba1 5402 	umull	r5, r4, r1, r2
 800be76:	b93c      	cbnz	r4, 800be88 <_calloc_r+0x18>
 800be78:	4629      	mov	r1, r5
 800be7a:	f7fd fc97 	bl	80097ac <_malloc_r>
 800be7e:	4606      	mov	r6, r0
 800be80:	b928      	cbnz	r0, 800be8e <_calloc_r+0x1e>
 800be82:	2600      	movs	r6, #0
 800be84:	4630      	mov	r0, r6
 800be86:	bd70      	pop	{r4, r5, r6, pc}
 800be88:	220c      	movs	r2, #12
 800be8a:	6002      	str	r2, [r0, #0]
 800be8c:	e7f9      	b.n	800be82 <_calloc_r+0x12>
 800be8e:	462a      	mov	r2, r5
 800be90:	4621      	mov	r1, r4
 800be92:	f7fe fa94 	bl	800a3be <memset>
 800be96:	e7f5      	b.n	800be84 <_calloc_r+0x14>

0800be98 <__ascii_mbtowc>:
 800be98:	b082      	sub	sp, #8
 800be9a:	b901      	cbnz	r1, 800be9e <__ascii_mbtowc+0x6>
 800be9c:	a901      	add	r1, sp, #4
 800be9e:	b142      	cbz	r2, 800beb2 <__ascii_mbtowc+0x1a>
 800bea0:	b14b      	cbz	r3, 800beb6 <__ascii_mbtowc+0x1e>
 800bea2:	7813      	ldrb	r3, [r2, #0]
 800bea4:	600b      	str	r3, [r1, #0]
 800bea6:	7812      	ldrb	r2, [r2, #0]
 800bea8:	1e10      	subs	r0, r2, #0
 800beaa:	bf18      	it	ne
 800beac:	2001      	movne	r0, #1
 800beae:	b002      	add	sp, #8
 800beb0:	4770      	bx	lr
 800beb2:	4610      	mov	r0, r2
 800beb4:	e7fb      	b.n	800beae <__ascii_mbtowc+0x16>
 800beb6:	f06f 0001 	mvn.w	r0, #1
 800beba:	e7f8      	b.n	800beae <__ascii_mbtowc+0x16>

0800bebc <_realloc_r>:
 800bebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bec0:	4680      	mov	r8, r0
 800bec2:	4615      	mov	r5, r2
 800bec4:	460c      	mov	r4, r1
 800bec6:	b921      	cbnz	r1, 800bed2 <_realloc_r+0x16>
 800bec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800becc:	4611      	mov	r1, r2
 800bece:	f7fd bc6d 	b.w	80097ac <_malloc_r>
 800bed2:	b92a      	cbnz	r2, 800bee0 <_realloc_r+0x24>
 800bed4:	f7ff f9c4 	bl	800b260 <_free_r>
 800bed8:	2400      	movs	r4, #0
 800beda:	4620      	mov	r0, r4
 800bedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bee0:	f000 f841 	bl	800bf66 <_malloc_usable_size_r>
 800bee4:	4285      	cmp	r5, r0
 800bee6:	4606      	mov	r6, r0
 800bee8:	d802      	bhi.n	800bef0 <_realloc_r+0x34>
 800beea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800beee:	d8f4      	bhi.n	800beda <_realloc_r+0x1e>
 800bef0:	4629      	mov	r1, r5
 800bef2:	4640      	mov	r0, r8
 800bef4:	f7fd fc5a 	bl	80097ac <_malloc_r>
 800bef8:	4607      	mov	r7, r0
 800befa:	2800      	cmp	r0, #0
 800befc:	d0ec      	beq.n	800bed8 <_realloc_r+0x1c>
 800befe:	42b5      	cmp	r5, r6
 800bf00:	462a      	mov	r2, r5
 800bf02:	4621      	mov	r1, r4
 800bf04:	bf28      	it	cs
 800bf06:	4632      	movcs	r2, r6
 800bf08:	f7fe fb4d 	bl	800a5a6 <memcpy>
 800bf0c:	4621      	mov	r1, r4
 800bf0e:	4640      	mov	r0, r8
 800bf10:	f7ff f9a6 	bl	800b260 <_free_r>
 800bf14:	463c      	mov	r4, r7
 800bf16:	e7e0      	b.n	800beda <_realloc_r+0x1e>

0800bf18 <__ascii_wctomb>:
 800bf18:	4603      	mov	r3, r0
 800bf1a:	4608      	mov	r0, r1
 800bf1c:	b141      	cbz	r1, 800bf30 <__ascii_wctomb+0x18>
 800bf1e:	2aff      	cmp	r2, #255	@ 0xff
 800bf20:	d904      	bls.n	800bf2c <__ascii_wctomb+0x14>
 800bf22:	228a      	movs	r2, #138	@ 0x8a
 800bf24:	601a      	str	r2, [r3, #0]
 800bf26:	f04f 30ff 	mov.w	r0, #4294967295
 800bf2a:	4770      	bx	lr
 800bf2c:	700a      	strb	r2, [r1, #0]
 800bf2e:	2001      	movs	r0, #1
 800bf30:	4770      	bx	lr
	...

0800bf34 <fiprintf>:
 800bf34:	b40e      	push	{r1, r2, r3}
 800bf36:	b503      	push	{r0, r1, lr}
 800bf38:	4601      	mov	r1, r0
 800bf3a:	ab03      	add	r3, sp, #12
 800bf3c:	4805      	ldr	r0, [pc, #20]	@ (800bf54 <fiprintf+0x20>)
 800bf3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf42:	6800      	ldr	r0, [r0, #0]
 800bf44:	9301      	str	r3, [sp, #4]
 800bf46:	f000 f83f 	bl	800bfc8 <_vfiprintf_r>
 800bf4a:	b002      	add	sp, #8
 800bf4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf50:	b003      	add	sp, #12
 800bf52:	4770      	bx	lr
 800bf54:	2000001c 	.word	0x2000001c

0800bf58 <abort>:
 800bf58:	b508      	push	{r3, lr}
 800bf5a:	2006      	movs	r0, #6
 800bf5c:	f000 fa08 	bl	800c370 <raise>
 800bf60:	2001      	movs	r0, #1
 800bf62:	f7f6 f8d1 	bl	8002108 <_exit>

0800bf66 <_malloc_usable_size_r>:
 800bf66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf6a:	1f18      	subs	r0, r3, #4
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	bfbc      	itt	lt
 800bf70:	580b      	ldrlt	r3, [r1, r0]
 800bf72:	18c0      	addlt	r0, r0, r3
 800bf74:	4770      	bx	lr

0800bf76 <__sfputc_r>:
 800bf76:	6893      	ldr	r3, [r2, #8]
 800bf78:	3b01      	subs	r3, #1
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	b410      	push	{r4}
 800bf7e:	6093      	str	r3, [r2, #8]
 800bf80:	da08      	bge.n	800bf94 <__sfputc_r+0x1e>
 800bf82:	6994      	ldr	r4, [r2, #24]
 800bf84:	42a3      	cmp	r3, r4
 800bf86:	db01      	blt.n	800bf8c <__sfputc_r+0x16>
 800bf88:	290a      	cmp	r1, #10
 800bf8a:	d103      	bne.n	800bf94 <__sfputc_r+0x1e>
 800bf8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf90:	f000 b932 	b.w	800c1f8 <__swbuf_r>
 800bf94:	6813      	ldr	r3, [r2, #0]
 800bf96:	1c58      	adds	r0, r3, #1
 800bf98:	6010      	str	r0, [r2, #0]
 800bf9a:	7019      	strb	r1, [r3, #0]
 800bf9c:	4608      	mov	r0, r1
 800bf9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfa2:	4770      	bx	lr

0800bfa4 <__sfputs_r>:
 800bfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfa6:	4606      	mov	r6, r0
 800bfa8:	460f      	mov	r7, r1
 800bfaa:	4614      	mov	r4, r2
 800bfac:	18d5      	adds	r5, r2, r3
 800bfae:	42ac      	cmp	r4, r5
 800bfb0:	d101      	bne.n	800bfb6 <__sfputs_r+0x12>
 800bfb2:	2000      	movs	r0, #0
 800bfb4:	e007      	b.n	800bfc6 <__sfputs_r+0x22>
 800bfb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfba:	463a      	mov	r2, r7
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	f7ff ffda 	bl	800bf76 <__sfputc_r>
 800bfc2:	1c43      	adds	r3, r0, #1
 800bfc4:	d1f3      	bne.n	800bfae <__sfputs_r+0xa>
 800bfc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bfc8 <_vfiprintf_r>:
 800bfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfcc:	460d      	mov	r5, r1
 800bfce:	b09d      	sub	sp, #116	@ 0x74
 800bfd0:	4614      	mov	r4, r2
 800bfd2:	4698      	mov	r8, r3
 800bfd4:	4606      	mov	r6, r0
 800bfd6:	b118      	cbz	r0, 800bfe0 <_vfiprintf_r+0x18>
 800bfd8:	6a03      	ldr	r3, [r0, #32]
 800bfda:	b90b      	cbnz	r3, 800bfe0 <_vfiprintf_r+0x18>
 800bfdc:	f7fe f956 	bl	800a28c <__sinit>
 800bfe0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bfe2:	07d9      	lsls	r1, r3, #31
 800bfe4:	d405      	bmi.n	800bff2 <_vfiprintf_r+0x2a>
 800bfe6:	89ab      	ldrh	r3, [r5, #12]
 800bfe8:	059a      	lsls	r2, r3, #22
 800bfea:	d402      	bmi.n	800bff2 <_vfiprintf_r+0x2a>
 800bfec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bfee:	f7fe fad8 	bl	800a5a2 <__retarget_lock_acquire_recursive>
 800bff2:	89ab      	ldrh	r3, [r5, #12]
 800bff4:	071b      	lsls	r3, r3, #28
 800bff6:	d501      	bpl.n	800bffc <_vfiprintf_r+0x34>
 800bff8:	692b      	ldr	r3, [r5, #16]
 800bffa:	b99b      	cbnz	r3, 800c024 <_vfiprintf_r+0x5c>
 800bffc:	4629      	mov	r1, r5
 800bffe:	4630      	mov	r0, r6
 800c000:	f000 f938 	bl	800c274 <__swsetup_r>
 800c004:	b170      	cbz	r0, 800c024 <_vfiprintf_r+0x5c>
 800c006:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c008:	07dc      	lsls	r4, r3, #31
 800c00a:	d504      	bpl.n	800c016 <_vfiprintf_r+0x4e>
 800c00c:	f04f 30ff 	mov.w	r0, #4294967295
 800c010:	b01d      	add	sp, #116	@ 0x74
 800c012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c016:	89ab      	ldrh	r3, [r5, #12]
 800c018:	0598      	lsls	r0, r3, #22
 800c01a:	d4f7      	bmi.n	800c00c <_vfiprintf_r+0x44>
 800c01c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c01e:	f7fe fac1 	bl	800a5a4 <__retarget_lock_release_recursive>
 800c022:	e7f3      	b.n	800c00c <_vfiprintf_r+0x44>
 800c024:	2300      	movs	r3, #0
 800c026:	9309      	str	r3, [sp, #36]	@ 0x24
 800c028:	2320      	movs	r3, #32
 800c02a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c02e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c032:	2330      	movs	r3, #48	@ 0x30
 800c034:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c1e4 <_vfiprintf_r+0x21c>
 800c038:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c03c:	f04f 0901 	mov.w	r9, #1
 800c040:	4623      	mov	r3, r4
 800c042:	469a      	mov	sl, r3
 800c044:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c048:	b10a      	cbz	r2, 800c04e <_vfiprintf_r+0x86>
 800c04a:	2a25      	cmp	r2, #37	@ 0x25
 800c04c:	d1f9      	bne.n	800c042 <_vfiprintf_r+0x7a>
 800c04e:	ebba 0b04 	subs.w	fp, sl, r4
 800c052:	d00b      	beq.n	800c06c <_vfiprintf_r+0xa4>
 800c054:	465b      	mov	r3, fp
 800c056:	4622      	mov	r2, r4
 800c058:	4629      	mov	r1, r5
 800c05a:	4630      	mov	r0, r6
 800c05c:	f7ff ffa2 	bl	800bfa4 <__sfputs_r>
 800c060:	3001      	adds	r0, #1
 800c062:	f000 80a7 	beq.w	800c1b4 <_vfiprintf_r+0x1ec>
 800c066:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c068:	445a      	add	r2, fp
 800c06a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c06c:	f89a 3000 	ldrb.w	r3, [sl]
 800c070:	2b00      	cmp	r3, #0
 800c072:	f000 809f 	beq.w	800c1b4 <_vfiprintf_r+0x1ec>
 800c076:	2300      	movs	r3, #0
 800c078:	f04f 32ff 	mov.w	r2, #4294967295
 800c07c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c080:	f10a 0a01 	add.w	sl, sl, #1
 800c084:	9304      	str	r3, [sp, #16]
 800c086:	9307      	str	r3, [sp, #28]
 800c088:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c08c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c08e:	4654      	mov	r4, sl
 800c090:	2205      	movs	r2, #5
 800c092:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c096:	4853      	ldr	r0, [pc, #332]	@ (800c1e4 <_vfiprintf_r+0x21c>)
 800c098:	f7f4 f8ba 	bl	8000210 <memchr>
 800c09c:	9a04      	ldr	r2, [sp, #16]
 800c09e:	b9d8      	cbnz	r0, 800c0d8 <_vfiprintf_r+0x110>
 800c0a0:	06d1      	lsls	r1, r2, #27
 800c0a2:	bf44      	itt	mi
 800c0a4:	2320      	movmi	r3, #32
 800c0a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0aa:	0713      	lsls	r3, r2, #28
 800c0ac:	bf44      	itt	mi
 800c0ae:	232b      	movmi	r3, #43	@ 0x2b
 800c0b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0b4:	f89a 3000 	ldrb.w	r3, [sl]
 800c0b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c0ba:	d015      	beq.n	800c0e8 <_vfiprintf_r+0x120>
 800c0bc:	9a07      	ldr	r2, [sp, #28]
 800c0be:	4654      	mov	r4, sl
 800c0c0:	2000      	movs	r0, #0
 800c0c2:	f04f 0c0a 	mov.w	ip, #10
 800c0c6:	4621      	mov	r1, r4
 800c0c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0cc:	3b30      	subs	r3, #48	@ 0x30
 800c0ce:	2b09      	cmp	r3, #9
 800c0d0:	d94b      	bls.n	800c16a <_vfiprintf_r+0x1a2>
 800c0d2:	b1b0      	cbz	r0, 800c102 <_vfiprintf_r+0x13a>
 800c0d4:	9207      	str	r2, [sp, #28]
 800c0d6:	e014      	b.n	800c102 <_vfiprintf_r+0x13a>
 800c0d8:	eba0 0308 	sub.w	r3, r0, r8
 800c0dc:	fa09 f303 	lsl.w	r3, r9, r3
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	9304      	str	r3, [sp, #16]
 800c0e4:	46a2      	mov	sl, r4
 800c0e6:	e7d2      	b.n	800c08e <_vfiprintf_r+0xc6>
 800c0e8:	9b03      	ldr	r3, [sp, #12]
 800c0ea:	1d19      	adds	r1, r3, #4
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	9103      	str	r1, [sp, #12]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	bfbb      	ittet	lt
 800c0f4:	425b      	neglt	r3, r3
 800c0f6:	f042 0202 	orrlt.w	r2, r2, #2
 800c0fa:	9307      	strge	r3, [sp, #28]
 800c0fc:	9307      	strlt	r3, [sp, #28]
 800c0fe:	bfb8      	it	lt
 800c100:	9204      	strlt	r2, [sp, #16]
 800c102:	7823      	ldrb	r3, [r4, #0]
 800c104:	2b2e      	cmp	r3, #46	@ 0x2e
 800c106:	d10a      	bne.n	800c11e <_vfiprintf_r+0x156>
 800c108:	7863      	ldrb	r3, [r4, #1]
 800c10a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c10c:	d132      	bne.n	800c174 <_vfiprintf_r+0x1ac>
 800c10e:	9b03      	ldr	r3, [sp, #12]
 800c110:	1d1a      	adds	r2, r3, #4
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	9203      	str	r2, [sp, #12]
 800c116:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c11a:	3402      	adds	r4, #2
 800c11c:	9305      	str	r3, [sp, #20]
 800c11e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c1f4 <_vfiprintf_r+0x22c>
 800c122:	7821      	ldrb	r1, [r4, #0]
 800c124:	2203      	movs	r2, #3
 800c126:	4650      	mov	r0, sl
 800c128:	f7f4 f872 	bl	8000210 <memchr>
 800c12c:	b138      	cbz	r0, 800c13e <_vfiprintf_r+0x176>
 800c12e:	9b04      	ldr	r3, [sp, #16]
 800c130:	eba0 000a 	sub.w	r0, r0, sl
 800c134:	2240      	movs	r2, #64	@ 0x40
 800c136:	4082      	lsls	r2, r0
 800c138:	4313      	orrs	r3, r2
 800c13a:	3401      	adds	r4, #1
 800c13c:	9304      	str	r3, [sp, #16]
 800c13e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c142:	4829      	ldr	r0, [pc, #164]	@ (800c1e8 <_vfiprintf_r+0x220>)
 800c144:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c148:	2206      	movs	r2, #6
 800c14a:	f7f4 f861 	bl	8000210 <memchr>
 800c14e:	2800      	cmp	r0, #0
 800c150:	d03f      	beq.n	800c1d2 <_vfiprintf_r+0x20a>
 800c152:	4b26      	ldr	r3, [pc, #152]	@ (800c1ec <_vfiprintf_r+0x224>)
 800c154:	bb1b      	cbnz	r3, 800c19e <_vfiprintf_r+0x1d6>
 800c156:	9b03      	ldr	r3, [sp, #12]
 800c158:	3307      	adds	r3, #7
 800c15a:	f023 0307 	bic.w	r3, r3, #7
 800c15e:	3308      	adds	r3, #8
 800c160:	9303      	str	r3, [sp, #12]
 800c162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c164:	443b      	add	r3, r7
 800c166:	9309      	str	r3, [sp, #36]	@ 0x24
 800c168:	e76a      	b.n	800c040 <_vfiprintf_r+0x78>
 800c16a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c16e:	460c      	mov	r4, r1
 800c170:	2001      	movs	r0, #1
 800c172:	e7a8      	b.n	800c0c6 <_vfiprintf_r+0xfe>
 800c174:	2300      	movs	r3, #0
 800c176:	3401      	adds	r4, #1
 800c178:	9305      	str	r3, [sp, #20]
 800c17a:	4619      	mov	r1, r3
 800c17c:	f04f 0c0a 	mov.w	ip, #10
 800c180:	4620      	mov	r0, r4
 800c182:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c186:	3a30      	subs	r2, #48	@ 0x30
 800c188:	2a09      	cmp	r2, #9
 800c18a:	d903      	bls.n	800c194 <_vfiprintf_r+0x1cc>
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d0c6      	beq.n	800c11e <_vfiprintf_r+0x156>
 800c190:	9105      	str	r1, [sp, #20]
 800c192:	e7c4      	b.n	800c11e <_vfiprintf_r+0x156>
 800c194:	fb0c 2101 	mla	r1, ip, r1, r2
 800c198:	4604      	mov	r4, r0
 800c19a:	2301      	movs	r3, #1
 800c19c:	e7f0      	b.n	800c180 <_vfiprintf_r+0x1b8>
 800c19e:	ab03      	add	r3, sp, #12
 800c1a0:	9300      	str	r3, [sp, #0]
 800c1a2:	462a      	mov	r2, r5
 800c1a4:	4b12      	ldr	r3, [pc, #72]	@ (800c1f0 <_vfiprintf_r+0x228>)
 800c1a6:	a904      	add	r1, sp, #16
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	f7fd fc2b 	bl	8009a04 <_printf_float>
 800c1ae:	4607      	mov	r7, r0
 800c1b0:	1c78      	adds	r0, r7, #1
 800c1b2:	d1d6      	bne.n	800c162 <_vfiprintf_r+0x19a>
 800c1b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1b6:	07d9      	lsls	r1, r3, #31
 800c1b8:	d405      	bmi.n	800c1c6 <_vfiprintf_r+0x1fe>
 800c1ba:	89ab      	ldrh	r3, [r5, #12]
 800c1bc:	059a      	lsls	r2, r3, #22
 800c1be:	d402      	bmi.n	800c1c6 <_vfiprintf_r+0x1fe>
 800c1c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c1c2:	f7fe f9ef 	bl	800a5a4 <__retarget_lock_release_recursive>
 800c1c6:	89ab      	ldrh	r3, [r5, #12]
 800c1c8:	065b      	lsls	r3, r3, #25
 800c1ca:	f53f af1f 	bmi.w	800c00c <_vfiprintf_r+0x44>
 800c1ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c1d0:	e71e      	b.n	800c010 <_vfiprintf_r+0x48>
 800c1d2:	ab03      	add	r3, sp, #12
 800c1d4:	9300      	str	r3, [sp, #0]
 800c1d6:	462a      	mov	r2, r5
 800c1d8:	4b05      	ldr	r3, [pc, #20]	@ (800c1f0 <_vfiprintf_r+0x228>)
 800c1da:	a904      	add	r1, sp, #16
 800c1dc:	4630      	mov	r0, r6
 800c1de:	f7fd fea9 	bl	8009f34 <_printf_i>
 800c1e2:	e7e4      	b.n	800c1ae <_vfiprintf_r+0x1e6>
 800c1e4:	0800c868 	.word	0x0800c868
 800c1e8:	0800c872 	.word	0x0800c872
 800c1ec:	08009a05 	.word	0x08009a05
 800c1f0:	0800bfa5 	.word	0x0800bfa5
 800c1f4:	0800c86e 	.word	0x0800c86e

0800c1f8 <__swbuf_r>:
 800c1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1fa:	460e      	mov	r6, r1
 800c1fc:	4614      	mov	r4, r2
 800c1fe:	4605      	mov	r5, r0
 800c200:	b118      	cbz	r0, 800c20a <__swbuf_r+0x12>
 800c202:	6a03      	ldr	r3, [r0, #32]
 800c204:	b90b      	cbnz	r3, 800c20a <__swbuf_r+0x12>
 800c206:	f7fe f841 	bl	800a28c <__sinit>
 800c20a:	69a3      	ldr	r3, [r4, #24]
 800c20c:	60a3      	str	r3, [r4, #8]
 800c20e:	89a3      	ldrh	r3, [r4, #12]
 800c210:	071a      	lsls	r2, r3, #28
 800c212:	d501      	bpl.n	800c218 <__swbuf_r+0x20>
 800c214:	6923      	ldr	r3, [r4, #16]
 800c216:	b943      	cbnz	r3, 800c22a <__swbuf_r+0x32>
 800c218:	4621      	mov	r1, r4
 800c21a:	4628      	mov	r0, r5
 800c21c:	f000 f82a 	bl	800c274 <__swsetup_r>
 800c220:	b118      	cbz	r0, 800c22a <__swbuf_r+0x32>
 800c222:	f04f 37ff 	mov.w	r7, #4294967295
 800c226:	4638      	mov	r0, r7
 800c228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c22a:	6823      	ldr	r3, [r4, #0]
 800c22c:	6922      	ldr	r2, [r4, #16]
 800c22e:	1a98      	subs	r0, r3, r2
 800c230:	6963      	ldr	r3, [r4, #20]
 800c232:	b2f6      	uxtb	r6, r6
 800c234:	4283      	cmp	r3, r0
 800c236:	4637      	mov	r7, r6
 800c238:	dc05      	bgt.n	800c246 <__swbuf_r+0x4e>
 800c23a:	4621      	mov	r1, r4
 800c23c:	4628      	mov	r0, r5
 800c23e:	f7ff fdb7 	bl	800bdb0 <_fflush_r>
 800c242:	2800      	cmp	r0, #0
 800c244:	d1ed      	bne.n	800c222 <__swbuf_r+0x2a>
 800c246:	68a3      	ldr	r3, [r4, #8]
 800c248:	3b01      	subs	r3, #1
 800c24a:	60a3      	str	r3, [r4, #8]
 800c24c:	6823      	ldr	r3, [r4, #0]
 800c24e:	1c5a      	adds	r2, r3, #1
 800c250:	6022      	str	r2, [r4, #0]
 800c252:	701e      	strb	r6, [r3, #0]
 800c254:	6962      	ldr	r2, [r4, #20]
 800c256:	1c43      	adds	r3, r0, #1
 800c258:	429a      	cmp	r2, r3
 800c25a:	d004      	beq.n	800c266 <__swbuf_r+0x6e>
 800c25c:	89a3      	ldrh	r3, [r4, #12]
 800c25e:	07db      	lsls	r3, r3, #31
 800c260:	d5e1      	bpl.n	800c226 <__swbuf_r+0x2e>
 800c262:	2e0a      	cmp	r6, #10
 800c264:	d1df      	bne.n	800c226 <__swbuf_r+0x2e>
 800c266:	4621      	mov	r1, r4
 800c268:	4628      	mov	r0, r5
 800c26a:	f7ff fda1 	bl	800bdb0 <_fflush_r>
 800c26e:	2800      	cmp	r0, #0
 800c270:	d0d9      	beq.n	800c226 <__swbuf_r+0x2e>
 800c272:	e7d6      	b.n	800c222 <__swbuf_r+0x2a>

0800c274 <__swsetup_r>:
 800c274:	b538      	push	{r3, r4, r5, lr}
 800c276:	4b29      	ldr	r3, [pc, #164]	@ (800c31c <__swsetup_r+0xa8>)
 800c278:	4605      	mov	r5, r0
 800c27a:	6818      	ldr	r0, [r3, #0]
 800c27c:	460c      	mov	r4, r1
 800c27e:	b118      	cbz	r0, 800c288 <__swsetup_r+0x14>
 800c280:	6a03      	ldr	r3, [r0, #32]
 800c282:	b90b      	cbnz	r3, 800c288 <__swsetup_r+0x14>
 800c284:	f7fe f802 	bl	800a28c <__sinit>
 800c288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c28c:	0719      	lsls	r1, r3, #28
 800c28e:	d422      	bmi.n	800c2d6 <__swsetup_r+0x62>
 800c290:	06da      	lsls	r2, r3, #27
 800c292:	d407      	bmi.n	800c2a4 <__swsetup_r+0x30>
 800c294:	2209      	movs	r2, #9
 800c296:	602a      	str	r2, [r5, #0]
 800c298:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c29c:	81a3      	strh	r3, [r4, #12]
 800c29e:	f04f 30ff 	mov.w	r0, #4294967295
 800c2a2:	e033      	b.n	800c30c <__swsetup_r+0x98>
 800c2a4:	0758      	lsls	r0, r3, #29
 800c2a6:	d512      	bpl.n	800c2ce <__swsetup_r+0x5a>
 800c2a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c2aa:	b141      	cbz	r1, 800c2be <__swsetup_r+0x4a>
 800c2ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2b0:	4299      	cmp	r1, r3
 800c2b2:	d002      	beq.n	800c2ba <__swsetup_r+0x46>
 800c2b4:	4628      	mov	r0, r5
 800c2b6:	f7fe ffd3 	bl	800b260 <_free_r>
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2be:	89a3      	ldrh	r3, [r4, #12]
 800c2c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c2c4:	81a3      	strh	r3, [r4, #12]
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	6063      	str	r3, [r4, #4]
 800c2ca:	6923      	ldr	r3, [r4, #16]
 800c2cc:	6023      	str	r3, [r4, #0]
 800c2ce:	89a3      	ldrh	r3, [r4, #12]
 800c2d0:	f043 0308 	orr.w	r3, r3, #8
 800c2d4:	81a3      	strh	r3, [r4, #12]
 800c2d6:	6923      	ldr	r3, [r4, #16]
 800c2d8:	b94b      	cbnz	r3, 800c2ee <__swsetup_r+0x7a>
 800c2da:	89a3      	ldrh	r3, [r4, #12]
 800c2dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c2e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2e4:	d003      	beq.n	800c2ee <__swsetup_r+0x7a>
 800c2e6:	4621      	mov	r1, r4
 800c2e8:	4628      	mov	r0, r5
 800c2ea:	f000 f883 	bl	800c3f4 <__smakebuf_r>
 800c2ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2f2:	f013 0201 	ands.w	r2, r3, #1
 800c2f6:	d00a      	beq.n	800c30e <__swsetup_r+0x9a>
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	60a2      	str	r2, [r4, #8]
 800c2fc:	6962      	ldr	r2, [r4, #20]
 800c2fe:	4252      	negs	r2, r2
 800c300:	61a2      	str	r2, [r4, #24]
 800c302:	6922      	ldr	r2, [r4, #16]
 800c304:	b942      	cbnz	r2, 800c318 <__swsetup_r+0xa4>
 800c306:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c30a:	d1c5      	bne.n	800c298 <__swsetup_r+0x24>
 800c30c:	bd38      	pop	{r3, r4, r5, pc}
 800c30e:	0799      	lsls	r1, r3, #30
 800c310:	bf58      	it	pl
 800c312:	6962      	ldrpl	r2, [r4, #20]
 800c314:	60a2      	str	r2, [r4, #8]
 800c316:	e7f4      	b.n	800c302 <__swsetup_r+0x8e>
 800c318:	2000      	movs	r0, #0
 800c31a:	e7f7      	b.n	800c30c <__swsetup_r+0x98>
 800c31c:	2000001c 	.word	0x2000001c

0800c320 <_raise_r>:
 800c320:	291f      	cmp	r1, #31
 800c322:	b538      	push	{r3, r4, r5, lr}
 800c324:	4605      	mov	r5, r0
 800c326:	460c      	mov	r4, r1
 800c328:	d904      	bls.n	800c334 <_raise_r+0x14>
 800c32a:	2316      	movs	r3, #22
 800c32c:	6003      	str	r3, [r0, #0]
 800c32e:	f04f 30ff 	mov.w	r0, #4294967295
 800c332:	bd38      	pop	{r3, r4, r5, pc}
 800c334:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c336:	b112      	cbz	r2, 800c33e <_raise_r+0x1e>
 800c338:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c33c:	b94b      	cbnz	r3, 800c352 <_raise_r+0x32>
 800c33e:	4628      	mov	r0, r5
 800c340:	f000 f830 	bl	800c3a4 <_getpid_r>
 800c344:	4622      	mov	r2, r4
 800c346:	4601      	mov	r1, r0
 800c348:	4628      	mov	r0, r5
 800c34a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c34e:	f000 b817 	b.w	800c380 <_kill_r>
 800c352:	2b01      	cmp	r3, #1
 800c354:	d00a      	beq.n	800c36c <_raise_r+0x4c>
 800c356:	1c59      	adds	r1, r3, #1
 800c358:	d103      	bne.n	800c362 <_raise_r+0x42>
 800c35a:	2316      	movs	r3, #22
 800c35c:	6003      	str	r3, [r0, #0]
 800c35e:	2001      	movs	r0, #1
 800c360:	e7e7      	b.n	800c332 <_raise_r+0x12>
 800c362:	2100      	movs	r1, #0
 800c364:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c368:	4620      	mov	r0, r4
 800c36a:	4798      	blx	r3
 800c36c:	2000      	movs	r0, #0
 800c36e:	e7e0      	b.n	800c332 <_raise_r+0x12>

0800c370 <raise>:
 800c370:	4b02      	ldr	r3, [pc, #8]	@ (800c37c <raise+0xc>)
 800c372:	4601      	mov	r1, r0
 800c374:	6818      	ldr	r0, [r3, #0]
 800c376:	f7ff bfd3 	b.w	800c320 <_raise_r>
 800c37a:	bf00      	nop
 800c37c:	2000001c 	.word	0x2000001c

0800c380 <_kill_r>:
 800c380:	b538      	push	{r3, r4, r5, lr}
 800c382:	4d07      	ldr	r5, [pc, #28]	@ (800c3a0 <_kill_r+0x20>)
 800c384:	2300      	movs	r3, #0
 800c386:	4604      	mov	r4, r0
 800c388:	4608      	mov	r0, r1
 800c38a:	4611      	mov	r1, r2
 800c38c:	602b      	str	r3, [r5, #0]
 800c38e:	f7f5 feab 	bl	80020e8 <_kill>
 800c392:	1c43      	adds	r3, r0, #1
 800c394:	d102      	bne.n	800c39c <_kill_r+0x1c>
 800c396:	682b      	ldr	r3, [r5, #0]
 800c398:	b103      	cbz	r3, 800c39c <_kill_r+0x1c>
 800c39a:	6023      	str	r3, [r4, #0]
 800c39c:	bd38      	pop	{r3, r4, r5, pc}
 800c39e:	bf00      	nop
 800c3a0:	20004e8c 	.word	0x20004e8c

0800c3a4 <_getpid_r>:
 800c3a4:	f7f5 be98 	b.w	80020d8 <_getpid>

0800c3a8 <__swhatbuf_r>:
 800c3a8:	b570      	push	{r4, r5, r6, lr}
 800c3aa:	460c      	mov	r4, r1
 800c3ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3b0:	2900      	cmp	r1, #0
 800c3b2:	b096      	sub	sp, #88	@ 0x58
 800c3b4:	4615      	mov	r5, r2
 800c3b6:	461e      	mov	r6, r3
 800c3b8:	da0d      	bge.n	800c3d6 <__swhatbuf_r+0x2e>
 800c3ba:	89a3      	ldrh	r3, [r4, #12]
 800c3bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c3c0:	f04f 0100 	mov.w	r1, #0
 800c3c4:	bf14      	ite	ne
 800c3c6:	2340      	movne	r3, #64	@ 0x40
 800c3c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c3cc:	2000      	movs	r0, #0
 800c3ce:	6031      	str	r1, [r6, #0]
 800c3d0:	602b      	str	r3, [r5, #0]
 800c3d2:	b016      	add	sp, #88	@ 0x58
 800c3d4:	bd70      	pop	{r4, r5, r6, pc}
 800c3d6:	466a      	mov	r2, sp
 800c3d8:	f000 f848 	bl	800c46c <_fstat_r>
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	dbec      	blt.n	800c3ba <__swhatbuf_r+0x12>
 800c3e0:	9901      	ldr	r1, [sp, #4]
 800c3e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c3e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c3ea:	4259      	negs	r1, r3
 800c3ec:	4159      	adcs	r1, r3
 800c3ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c3f2:	e7eb      	b.n	800c3cc <__swhatbuf_r+0x24>

0800c3f4 <__smakebuf_r>:
 800c3f4:	898b      	ldrh	r3, [r1, #12]
 800c3f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3f8:	079d      	lsls	r5, r3, #30
 800c3fa:	4606      	mov	r6, r0
 800c3fc:	460c      	mov	r4, r1
 800c3fe:	d507      	bpl.n	800c410 <__smakebuf_r+0x1c>
 800c400:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c404:	6023      	str	r3, [r4, #0]
 800c406:	6123      	str	r3, [r4, #16]
 800c408:	2301      	movs	r3, #1
 800c40a:	6163      	str	r3, [r4, #20]
 800c40c:	b003      	add	sp, #12
 800c40e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c410:	ab01      	add	r3, sp, #4
 800c412:	466a      	mov	r2, sp
 800c414:	f7ff ffc8 	bl	800c3a8 <__swhatbuf_r>
 800c418:	9f00      	ldr	r7, [sp, #0]
 800c41a:	4605      	mov	r5, r0
 800c41c:	4639      	mov	r1, r7
 800c41e:	4630      	mov	r0, r6
 800c420:	f7fd f9c4 	bl	80097ac <_malloc_r>
 800c424:	b948      	cbnz	r0, 800c43a <__smakebuf_r+0x46>
 800c426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c42a:	059a      	lsls	r2, r3, #22
 800c42c:	d4ee      	bmi.n	800c40c <__smakebuf_r+0x18>
 800c42e:	f023 0303 	bic.w	r3, r3, #3
 800c432:	f043 0302 	orr.w	r3, r3, #2
 800c436:	81a3      	strh	r3, [r4, #12]
 800c438:	e7e2      	b.n	800c400 <__smakebuf_r+0xc>
 800c43a:	89a3      	ldrh	r3, [r4, #12]
 800c43c:	6020      	str	r0, [r4, #0]
 800c43e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c442:	81a3      	strh	r3, [r4, #12]
 800c444:	9b01      	ldr	r3, [sp, #4]
 800c446:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c44a:	b15b      	cbz	r3, 800c464 <__smakebuf_r+0x70>
 800c44c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c450:	4630      	mov	r0, r6
 800c452:	f000 f81d 	bl	800c490 <_isatty_r>
 800c456:	b128      	cbz	r0, 800c464 <__smakebuf_r+0x70>
 800c458:	89a3      	ldrh	r3, [r4, #12]
 800c45a:	f023 0303 	bic.w	r3, r3, #3
 800c45e:	f043 0301 	orr.w	r3, r3, #1
 800c462:	81a3      	strh	r3, [r4, #12]
 800c464:	89a3      	ldrh	r3, [r4, #12]
 800c466:	431d      	orrs	r5, r3
 800c468:	81a5      	strh	r5, [r4, #12]
 800c46a:	e7cf      	b.n	800c40c <__smakebuf_r+0x18>

0800c46c <_fstat_r>:
 800c46c:	b538      	push	{r3, r4, r5, lr}
 800c46e:	4d07      	ldr	r5, [pc, #28]	@ (800c48c <_fstat_r+0x20>)
 800c470:	2300      	movs	r3, #0
 800c472:	4604      	mov	r4, r0
 800c474:	4608      	mov	r0, r1
 800c476:	4611      	mov	r1, r2
 800c478:	602b      	str	r3, [r5, #0]
 800c47a:	f7f5 fe95 	bl	80021a8 <_fstat>
 800c47e:	1c43      	adds	r3, r0, #1
 800c480:	d102      	bne.n	800c488 <_fstat_r+0x1c>
 800c482:	682b      	ldr	r3, [r5, #0]
 800c484:	b103      	cbz	r3, 800c488 <_fstat_r+0x1c>
 800c486:	6023      	str	r3, [r4, #0]
 800c488:	bd38      	pop	{r3, r4, r5, pc}
 800c48a:	bf00      	nop
 800c48c:	20004e8c 	.word	0x20004e8c

0800c490 <_isatty_r>:
 800c490:	b538      	push	{r3, r4, r5, lr}
 800c492:	4d06      	ldr	r5, [pc, #24]	@ (800c4ac <_isatty_r+0x1c>)
 800c494:	2300      	movs	r3, #0
 800c496:	4604      	mov	r4, r0
 800c498:	4608      	mov	r0, r1
 800c49a:	602b      	str	r3, [r5, #0]
 800c49c:	f7f5 fe94 	bl	80021c8 <_isatty>
 800c4a0:	1c43      	adds	r3, r0, #1
 800c4a2:	d102      	bne.n	800c4aa <_isatty_r+0x1a>
 800c4a4:	682b      	ldr	r3, [r5, #0]
 800c4a6:	b103      	cbz	r3, 800c4aa <_isatty_r+0x1a>
 800c4a8:	6023      	str	r3, [r4, #0]
 800c4aa:	bd38      	pop	{r3, r4, r5, pc}
 800c4ac:	20004e8c 	.word	0x20004e8c

0800c4b0 <_init>:
 800c4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4b2:	bf00      	nop
 800c4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4b6:	bc08      	pop	{r3}
 800c4b8:	469e      	mov	lr, r3
 800c4ba:	4770      	bx	lr

0800c4bc <_fini>:
 800c4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4be:	bf00      	nop
 800c4c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4c2:	bc08      	pop	{r3}
 800c4c4:	469e      	mov	lr, r3
 800c4c6:	4770      	bx	lr
